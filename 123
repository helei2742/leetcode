script-node.ts

import request from '@/util/request.ts'
import type {RegisteredScriptNode} from "@/types/vortexa-type.ts";
import type {Result} from "@/types/vortexa-type-common.ts";

/**
 * 查询所有已注册的script node
 * @returns {*}
 */
export function queryAllRegisteredScriptNode(): Promise<Result<Array<RegisteredScriptNode>>> {
  return request({
    url: '/script-node/all',
    method: 'post'
  })
}


stores/windowSizeStore.ts


import {defineStore} from 'pinia'
import {type Ref, ref} from "vue";

export const useWindowSizeStore = defineStore('windowSize', () => {
  const width: Ref<number> = ref(0)
  const height: Ref<number> = ref(0)
  const windowSizeChangedHandler: Ref<Array<(w: number, h: number) => void>> = ref([])

  const updateWindowSize = (w: number, h: number) => {
    width.value = w
    height.value = h

    if (windowSizeChangedHandler.value) {
      windowSizeChangedHandler.value.forEach(handler => handler(w, h))
    }
  }

  const addWindowSizeChangeHandler = (handler: (w: number, h: number) => void) => {
    windowSizeChangedHandler.value.push(handler)
  }

  return {
    width,
    height,
    updateWindowSize,
    addWindowSizeChangeHandler
  }
})


vtypes vortexa-type.ts
/**
 * 基础账户信息
 */
export class AccountBaseInfo {
  id: number
  type: string
  name: string
  email: string
  password: string
  params: Map<string, object>
  insertDatetime: string
  updateDatetime: string

  public constructor({
                       id,
                       type,
                       name,
                       email,
                       password,
                       params,
                       insertDatetime,
                       updateDatetime
                     }: {
    id: number,
    type: string,
    name: string,
    email: string,
    password: string,
    params: Map<string, object>,
    insertDatetime: string,
    updateDatetime: string
  }) {
    this.id = id
    this.type = type
    this.name = name
    this.email = email
    this.password = password
    this.params = params
    this.insertDatetime = insertDatetime
    this.updateDatetime = updateDatetime
  }
}


/**
 * twitter信息
 */
export class TwitterInfo {
  id: number
  username: string
  password: string
  email: string
  emailPassword: string
  token: string
  f2aKey: string
  params: Map<string, object>
  insertDatetime: string
  updateDatetime: string

  public constructor({
                       id,
                       username,
                       password,
                       email,
                       emailPassword,
                       params,
                       token,
                       f2aKey,
                       insertDatetime,
                       updateDatetime
                     }: {
    id: number,
    username: string,
    password: string,
    email: string,
    emailPassword: string,
    params: Map<string, object>,
    token: string,
    f2aKey: string,
    insertDatetime: string,
    updateDatetime: string
  }) {
    this.id = id
    this.username = username
    this.password = password
    this.email = email
    this.emailPassword = emailPassword
    this.params = params
    this.token = token
    this.f2aKey = f2aKey
    this.insertDatetime = insertDatetime
    this.updateDatetime = updateDatetime
  }
}

/**
 * discord信息
 */
export class DiscordInfo {
  id: number
  username: string
  password: string
  bindEmail: string
  bindEmailPassword: string
  token: string
  f2aKey: string
  params: Map<string, object>
  insertDatetime: string
  updateDatetime: string

  public constructor({
                       id,
                       username,
                       password,
                       bindEmail,
                       bindEmailPassword,
                       params,
                       token,
                       f2aKey,
                       insertDatetime,
                       updateDatetime
                     }: {
    id: number,
    username: string,
    password: string,
    bindEmail: string,
    bindEmailPassword: string,
    params: Map<string, object>,
    token: string,
    f2aKey: string,
    insertDatetime: string,
    updateDatetime: string
  }) {
    this.id = id
    this.username = username
    this.password = password
    this.bindEmail = bindEmail
    this.bindEmailPassword = bindEmailPassword
    this.params = params
    this.token = token
    this.f2aKey = f2aKey
    this.insertDatetime = insertDatetime
    this.updateDatetime = updateDatetime
  }
}

/**
 * proxy信息
 */
export class ProxyInfo {
  id: number
  username: string
  password: string
  proxyType: string
  proxyProtocol: string
  host: string
  port: number
  params: Map<string, object>
  insertDatetime: string
  updateDatetime: string

  public constructor({
                       id,
                       host,
                       port,
                       username,
                       password,
                       proxyType,
                       proxyProtocol,
                       params,
                       insertDatetime,
                       updateDatetime
                     }: {
    id: number,
    host: string,
    port: number,
    username: string,
    password: string,
    proxyType: string,
    proxyProtocol: string,
    params: Map<string, object>,
    insertDatetime: string,
    updateDatetime: string
  }) {
    this.id = id
    this.host = host
    this.port = port
    this.username = username
    this.password = password
    this.proxyType = proxyType
    this.proxyProtocol = proxyProtocol
    this.params = params
    this.insertDatetime = insertDatetime
    this.updateDatetime = updateDatetime
  }
}

/**
 * proxy信息
 */
export class BrowserEnv {
  id: number
  userAgent: string
  otherHeader: Map<string, object>
  insertDatetime: string
  updateDatetime: string

  public constructor({
                       id,
                       userAgent,
                       otherHeader,
                       insertDatetime,
                       updateDatetime
                     }: {
    id: number,
    userAgent: string,
    otherHeader: Map<string, object>,
    insertDatetime: string,
    updateDatetime: string
  }) {
    this.id = id
    this.userAgent = userAgent
    this.otherHeader = otherHeader
    this.insertDatetime = insertDatetime
    this.updateDatetime = updateDatetime
  }
}


/**
 * Bot 实例信息
 */
export class BotInstanceInfo {
  id?: number
  botId?: number
  botName: string
  botKey: string
  botStatus: number // 0 未运行 1 正在运行 -1 告警
  runningTask: Array<string>
  accountTableName?: string
  jobParams: Map<string, object>
  params: Map<string, object>
  insertDatetime?: string
  updateDatetime?: string
  botInfo?: object

  public constructor({
                       id,
                       botId,
                       botName,
                       botKey,
                       botStatus,
                       runningTask,
                       accountTableName,
                       jobParams,
                       params,
                       insertDatetime,
                       updateDatetime,
                       botInfo
                     }
                       : {
                       id?: number,
                       botId?: number,
                       botName?: string,
                       botKey?: string,
                       botStatus?: number,
                       runningTask?: Array<string>,
                       accountTableName?: string,
                       jobParams?: Map<string, object>,
                       params?: Map<string, object>,
                       insertDatetime?: string,
                       updateDatetime?: string,
                       botInfo?: BotInfo
                     }
  ) {
    this.id = id
    this.botId = botId
    this.botName = botName ? botName : 'unknown_bot'
    this.botKey = botKey ? botKey : 'unknown_instance'
    this.botStatus = botStatus !== undefined ? botStatus : -1
    this.runningTask = runningTask ? runningTask : new Array<string>()
    this.accountTableName = accountTableName
    this.jobParams = jobParams ? jobParams : new Map<string, object>()
    this.params = params ? params : new Map<string, object>()
    this.insertDatetime = insertDatetime
    this.updateDatetime = updateDatetime
    this.botInfo = botInfo
  }
}

/**
 * Bot 信息
 */
export class BotInfo {
  id?: number
  name: string
  describe: string
  image?: string
  jobParams: Map<string, object>
  params: Map<string, object>
  insertDatetime?: string
  updateDatetime?: string

  constructor({id, name, describe, image, jobParams, params, insertDatetime, updateDatetime}
                : {
                id?: number,
                name?: string,
                describe?: string,
                image?: string,
                jobParams?: Map<string, object>,
                params?: Map<string, object>,
                insertDatetime?: string,
                updateDatetime?: string
              }
  ) {
    this.id = id
    this.name = name ? name : 'unknown_bot'
    this.describe = describe ? describe : ''
    this.image = image
    this.jobParams = jobParams ? jobParams : new Map<string, object>()
    this.params = params ? params : new Map<string, object>()
    this.insertDatetime = insertDatetime
    this.updateDatetime = updateDatetime
  }
}


/**
 * 节点信息
 */
export class ScriptNode {
  id: number
  scriptNodeName: string
  host: string
  port: number
  groupId: string
  serviceId: string
  instanceId: string
  description: string
  botConfigMap: Map<string, object>
  params: Map<string, object>
  insertDatetime: string
  updateDatetime: string

  constructor({
                id,
                scriptNodeName,
                host,
                port,
                groupId,
                serviceId,
                instanceId,
                description,
                botConfigMap,
                params,
                insertDatetime,
                updateDatetime
              }
                : {
                id: number,
                scriptNodeName: string,
                host: string
                port: number
                groupId: string
                serviceId: string
                instanceId: string
                description: string
                botConfigMap: Map<string, object>
                params: Map<string, object>,
                insertDatetime: string,
                updateDatetime: string
              }
  ) {
    this.id = id
    this.scriptNodeName = scriptNodeName
    this.host = host
    this.port = port
    this.groupId = groupId
    this.serviceId = serviceId
    this.instanceId = instanceId
    this.description = description
    this.botConfigMap = botConfigMap
    this.params = params
    this.insertDatetime = insertDatetime
    this.updateDatetime = updateDatetime
  }
}

/**
 * 已注册的script node 信息
 */
export class RegisteredScriptNode {
  scriptNode: ScriptNode
  online: boolean
}


script-node-components/ script-node-bot-config.dialog.vue
<script setup lang="ts">
import {ref} from "vue";

const botKey = ref('')
const botConfig = ref({})
const dialogVisible = ref(false)

const openDialog = (bk:string, bc:object) => {
  botConfig.value = bc
  botKey.value = bk
  dialogVisible.value = true
}

defineExpose({
  openDialog
})
</script>

<template>
<div>
  <el-dialog
    v-model="dialogVisible"
    :title="botKey"
    width="45%"
    align-center
  >
    <span>{{ botConfig }}</span>
    <template #footer>
      <div class="dialog-footer">
        <el-button @click="dialogVisible = false">Cancel</el-button>
        <el-button type="primary" @click="dialogVisible = false">
          Confirm
        </el-button>
      </div>
    </template>
  </el-dialog>
</div>
</template>

<style scoped>

</style>


components/script-node-tbale-card.vue
<script setup lang="ts">
import type {ScriptNode} from "@/types/vortexa-type.ts";
import {onMounted, ref} from "vue";
import {useWindowSizeStore} from "@/stores/windowSizeStore.ts";

defineProps<{
  scriptNode: ScriptNode
}>();

const {addWindowSizeChangeHandler} = useWindowSizeStore();
const descriptionsColumn = ref(3)

const emit = defineEmits(['openBotConfig'])

const openBotConfig = (botKey, botConfig)=>{
  emit('openBotConfig', botKey, botConfig)
}

onMounted(()=>{
  addWindowSizeChangeHandler((w, h)=>{
    console.log(w)
    if (w < 900) descriptionsColumn.value = 1
    else if (w < 1400) descriptionsColumn.value = 2
    else descriptionsColumn.value = 3
  })
})
</script>

<template>
  <div class="script-node-table-card">
    <el-descriptions
      :title="scriptNode.scriptNodeName"
      :column="descriptionsColumn"
      size="small"
      border
      :label-width="120"
    >
      <template #extra>
        <el-button type="primary">Operation</el-button>
      </template>
      <el-descriptions-item>
        <template #label>
          <div class="cell-item">
            id
          </div>
        </template>
        {{scriptNode.id}}
      </el-descriptions-item>
      <el-descriptions-item>
        <template #label>
          <div class="cell-item">
            Create time
          </div>
        </template>
        {{scriptNode.insertDatetime}}
      </el-descriptions-item>
      <el-descriptions-item>
        <template #label>
          <div class="cell-item">
            Update time
          </div>
        </template>
        {{scriptNode.updateDatetime}}
      </el-descriptions-item>
      <el-descriptions-item
        label-class-name="cell-item-2"
        v-for="(config, botKey, index) in scriptNode.botConfigMap" :key="botKey"
      >
        <template #label>
          <div class="cell-item">
            Deploy Bot: {{index + 1}}
          </div>
        </template>
        <el-link @click="openBotConfig(botKey, config)">
          {{botKey}}
        </el-link>
      </el-descriptions-item>
    </el-descriptions>
  </div>
</template>

<style scoped>
.cell-item {
  display: flex;
  align-items: center;
}
:deep(.cell-item-2) {
  background: var(--el-color-warning-light-9) !important;
}

.script-node-table-card{
  padding: 10px 24px;
}
</style>


vortexa-script=node-view
<script setup lang="ts">
import {MoreFilled, Refresh} from "@element-plus/icons-vue"
import ContentBlock from "@/components/content-block/content-block.vue";
import {queryAllRegisteredScriptNode} from "@/api/script-node.ts";
import {onMounted, ref} from "vue";
import type {RegisteredScriptNode} from "@/types/vortexa-type.ts";
import ScriptNodeTableCard
  from "@/views/homepage/script-node/components/script-node-table-card.vue";
import ScriptNodeBotConfigDialog
  from "@/views/homepage/script-node/components/script-node-bot-config-dialog.vue";

const scriptNodeList = ref()
const botConfigDialog = ref()

const openBotConfigHandler = (botKey, config) => {
  botConfigDialog.value.openDialog(botKey, config)
}

const scriptNodeStatus = ({row, rowIndex}) => {
  if (row.online) {
    return 'script-node-online'
  } else {
    return 'script-node-offline'
  }
}

const ipTagName = (registeredScriptNode:RegisteredScriptNode) => {
  if (registeredScriptNode.online) {
    return 'success'
  } else {
    return 'info'
  }
}

// 查询全部
const queryAllRegisteredScriptNodeNetwork = () => {
  queryAllRegisteredScriptNode().then(result => {
    console.log(result)
    scriptNodeList.value = result.data
  })
}

onMounted(async () => {
  queryAllRegisteredScriptNodeNetwork()
})
</script>

<template>
  <content-block class="vortexa-script-node-view">
    <div class="script-node-list">
      <el-table
        class="script-node-table"
        :data="scriptNodeList"
        :row-class-name="scriptNodeStatus"
        table-layout="fixed"
        :show-overflow-tooltip="true"
        border
        height="500"
        fit
      >
        <el-table-column type="expand">
          <template #default="props">
            <script-node-table-card
              @open-bot-config="openBotConfigHandler"
              :script-node="props.row.scriptNode"
            />
          </template>
        </el-table-column>

        <el-table-column label="nodeName" sortable min-width="160">
          <template #default="scope">
              {{ scope.row.scriptNode.scriptNodeName }}
          </template>
        </el-table-column>
        <el-table-column label="groupId" sortable min-width="160">
          <template #default="scope">
              {{ scope.row.scriptNode.groupId }}
          </template>
        </el-table-column>
        <el-table-column prop="serviceId" sortable label="ServiceId" min-width="160">
          <template #default="scope">
              {{ scope.row.scriptNode.serviceId }}
          </template>
        </el-table-column>
        <el-table-column prop="instanceId" sortable label="InstanceId" min-width="160">
          <template #default="scope">
              {{ scope.row.scriptNode.instanceId }}
          </template>
        </el-table-column>
        <el-table-column label="ip" sortable min-width="160">
          <template #default="scope">
            <el-tag :type="ipTagName(scope.row)">
              {{ scope.row.scriptNode.host + ':' + scope.row.scriptNode.port }}
            </el-tag>
          </template>
        </el-table-column>
        <el-table-column label="bot count" sortable min-width="160">
          <template #default="scope">
              {{ Object.keys(scope.row.scriptNode.botConfigMap).length }}
          </template>
        </el-table-column>
        <el-table-column fixed="right" width="90">
          <template #header>
            <el-button :icon="Refresh" plain type="success"></el-button>
          </template>
          <template #default="scope">
            <el-dropdown placement="bottom-end">
              <el-button text type="info" size="large" style="font-size: 22px">
                <el-icon><MoreFilled /></el-icon>
              </el-button>
              <template #dropdown>
                <el-dropdown-menu>
                  <el-dropdown-item>Setting</el-dropdown-item>
                  <el-dropdown-item
                    v-if="scope.row.online"
                    style="color: red"
                  >
                    Stop
                  </el-dropdown-item>
                  <el-dropdown-item
                    v-else
                    style="color: greenyellow"
                  >
                    Start
                  </el-dropdown-item>
                </el-dropdown-menu>
              </template>
            </el-dropdown>
          </template>
        </el-table-column>
      </el-table>
    </div>

    <script-node-bot-config-dialog ref="botConfigDialog"/>
  </content-block>
</template>

<style scoped>

.vortexa-script-node-view {
  height: calc(100vh - 240px);
}

.script-node-list {
  position: relative;

}

.script-node-table {
  position: absolute;
}

:deep(.el-table .script-node-online)  {
  --el-table-tr-bg-color:var(--el-color-success-light-9);
}

:deep(.el-table .script-node-offline) {
  --el-table-tr-bg-color: var(--el-color-info-light-7);
}
</style>


vortexa-home-page.vue

<script setup lang="ts">
import {ref, onMounted, onUnmounted} from 'vue';
import {useCommonStore} from '@/stores/commonStore.ts'
import VortexaMenu from "@/views/homepage/components/vortexa-menu/vortexa-menu.vue";
import VortexaHeader from "@/views/homepage/components/vortexa-header/vortexa-header.vue";
import VortexaBanner from "@/views/homepage/components/vortexa-banner-tool/vortexa-banner-tool.vue";
import BotDetailDrawer from "@/views/homepage/script-bot/components/bot-detail-drawer.vue";
import {useWindowSizeStore} from '@/stores/windowSizeStore.ts'

const isDesktop = ref(window.innerWidth > 780);

const updateLayout = () => {
  isDesktop.value = window.innerWidth > 780
  updateWindowSize(window.innerWidth, window.innerHeight)
};

const {updateWindowSize} = useWindowSizeStore()

const {currentBotInstance} = useCommonStore()

onMounted(() => {
  window.addEventListener('resize', updateLayout)
});

onUnmounted(() => {
  window.removeEventListener('resize', updateLayout)
});
</script>

<template>
  <div>
    <div class="vortexa-app">
      <div style="display: flex; margin-bottom: 60px">
        <div v-if="isDesktop" class="sidebar">
          <vortexa-banner/>
          <vortexa-menu :is-horizontal="!isDesktop"/>
        </div>

        <div class="vortexa-main">
          <vortexa-header style="margin-bottom: 14px"/>

          <router-view v-slot="{ Component, route }">
            <keep-alive>
              <component v-if="route.meta.keepAlive" :is="Component" :key="route.fullPath"/>
            </keep-alive>
            <component v-if="!route.meta.keepAlive" :is="Component" :key="route.fullPath"/>
          </router-view>
        </div>
      </div>

      <!--    bot详情抽屉-->
      <bot-detail-drawer :bot-instance="currentBotInstance"/>

      <div v-if="!isDesktop" class="bottom-menu">
        <vortexa-menu :is-horizontal="!isDesktop"/>
      </div>
    </div>
  </div>
</template>

<style scoped>
.vortexa-app {
  min-height: 100vh;
  background-color: #fafaf9;
  max-width: 1980px;
  padding: 20px;
  margin: auto;
}

.vortexa-app > .sidebar {
  width: 208px;
  padding: 24px 16px;
}

.vortexa-main {
  flex: 1;
}

.bottom-menu {
  z-index: 10;
  background-color: #ffffff;
  position: fixed;
  bottom: 0;
  height: 60px;
  width: 100%;
}
</style>
