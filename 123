package cn.com.helei.bot.core.mvc.controller;

import cn.com.helei.bot.core.dto.Result;
import cn.com.helei.bot.core.mvc.service.IAccountBaseInfoService;
import cn.com.helei.bot.core.mvc.vo.BotImportVO;
import cn.com.helei.bot.core.mvc.vo.DeleteVO;
import cn.com.helei.bot.core.mvc.vo.PageQuery;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

/**
 * <p>
 * 前端控制器
 * </p>
 *
 * @author com.helei
 * @since 2025-02-05
 */
@RestController
@RequestMapping("/accountBaseInfo")
public class AccountBaseInfoController {
    @Autowired
    private IAccountBaseInfoService accountBaseInfoService;

    @PostMapping("/batchAdd")
    public Result batchAdd(@RequestBody BotImportVO importVO) {
        return accountBaseInfoService.saveAccountBaseInfos(importVO.getRawLines());
    }

    @PostMapping("/pageQuery")
    public Result pageQuery(@RequestBody PageQuery query) {
        return accountBaseInfoService.conditionPageQuery(query);
    }

    @GetMapping("/typedInfo")
    public Result queryTypedInfo() {
        return accountBaseInfoService.queryTypedInfo();
    }

    @PostMapping("/delete")
    public Result delete(@RequestBody DeleteVO deleteVO) {
        return accountBaseInfoService.delete(deleteVO.getIds());
    }
}
package cn.com.helei.bot.core.mvc.mapper;

import cn.com.helei.bot.core.entity.AccountBaseInfo;
import cn.hutool.core.lang.Pair;
import com.baomidou.mybatisplus.core.mapper.BaseMapper;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Select;

import java.util.List;
import java.util.Map;

/**
 * <p>
 * Mapper 接口
 * </p>
 *
 * @author com.helei
 * @since 2025-02-05
 */
public interface AccountBaseInfoMapper extends BaseMapper<AccountBaseInfo> {

    Integer insertOrUpdate(AccountBaseInfo accountBaseInfo);

    List<AccountBaseInfo> multipleConditionQuery(AccountBaseInfo query);

    @Select("select type as key, count(*) as value from t_account_base_info group by type")
    List<Pair<String, Integer>> queryTypedInfo();
}
package cn.com.helei.bot.core.mvc.service.impl;

import cn.com.helei.bot.core.dto.Result;
import cn.com.helei.bot.core.entity.AccountBaseInfo;
import cn.com.helei.bot.core.mvc.mapper.AccountBaseInfoMapper;
import cn.com.helei.bot.core.mvc.service.IAccountBaseInfoService;
import cn.com.helei.bot.core.mvc.util.ConditionBuildUtil;
import cn.com.helei.bot.core.mvc.vo.PageQuery;
import cn.com.helei.bot.core.supporter.botapi.ImportService;
import cn.hutool.core.lang.Pair;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

/**
 * <p>
 * 服务实现类
 * </p>
 *
 * @author com.helei
 * @since 2025-02-05
 */
@Slf4j
@Service
public class AccountBaseInfoServiceImpl extends ServiceImpl<AccountBaseInfoMapper, AccountBaseInfo> implements IAccountBaseInfoService {

    @Autowired
    private ImportService importService;

    @Override
    public Integer insertOrUpdate(AccountBaseInfo accountBaseInfo) {
        accountBaseInfo.setInsertDatetime(LocalDateTime.now());
        accountBaseInfo.setUpdateDatetime(LocalDateTime.now());
        accountBaseInfo.setIsValid(1);

        return baseMapper.insertOrUpdate(accountBaseInfo);
    }

    @Override
    public Integer insertOrUpdateBatch(List<AccountBaseInfo> accountBaseInfos) {
        int successCount = 0;
        for (AccountBaseInfo accountBaseInfo : accountBaseInfos) {
            try {
                Integer count = insertOrUpdate(accountBaseInfo);
                successCount += count == null ? 0 : count;;
            } catch (Exception e) {
                throw new RuntimeException("insert or update [%s] error".formatted(accountBaseInfo), e.getCause());
            }
        }

        return successCount;
    }

    @Override
    public Result saveAccountBaseInfos(List<Map<String, Object>> rawLines) {
        if (rawLines == null || rawLines.isEmpty()) {
            return Result.fail("导入数据不能为空");
        }

        try {
            importService.importAccountBaseInfoFromRaw(rawLines);
            return Result.ok();
        } catch (Exception e) {
            log.error("导入账户数据失败", e.getCause());
            return Result.fail("导入账户数据失败," + e.getMessage());
        }
    }

    @Override
    public Result conditionPageQuery(PageQuery query) {
        log.info("收到查询消息 [{}]", query);
        Map<String, Object> filterMap = query.getFilterMap();

        try (Page<AccountBaseInfo> page = PageHelper.startPage(query.getPage(), query.getLimit())){
            AccountBaseInfo condition = ConditionBuildUtil.getMapContainsCondition(
                    filterMap,
                    "params",
                    AccountBaseInfo.class
            );

            // 执行自定义查询
            List<AccountBaseInfo> accountBaseInfos = getBaseMapper().multipleConditionQuery(condition);

            // 包装成 PageInfo 对象，便于返回分页结果
            PageInfo<AccountBaseInfo> data = new PageInfo<>(accountBaseInfos);

            log.info("[{}]查询成功, {}条", query, accountBaseInfos.size());

            return Result.ok(data);
        } catch (Exception e) {
            log.error("error", e);
            return Result.fail("error, " + e.getCause().getMessage());
        }
    }

    @Override
    @Transactional
    public Result delete(List<Integer> ids) {
        if (ids == null || ids.isEmpty()) {
            return Result.ok();
        }

        if (removeBatchByIds(ids)) {
            return Result.ok();
        } else {
            log.error("删除{}失败", ids);
            return Result.fail("删除" + ids+ "失败");
        }
    }

    @Override
    public Result queryTypedInfo() {
        try {
            List<Pair<String, Integer>> typedInfo = getBaseMapper().queryTypedInfo();
            return Result.ok(typedInfo);
        } catch (Exception e) {
            log.error("查询AccountBaseInfo分类信息失败,", e.getCause());
            return Result.fail(e.getCause().getMessage());
        }
    }
}
package cn.com.helei.bot.core.mvc.service;

import cn.com.helei.bot.core.dto.Result;
import cn.com.helei.bot.core.entity.AccountBaseInfo;
import cn.com.helei.bot.core.mvc.vo.PageQuery;
import com.baomidou.mybatisplus.extension.service.IService;

import java.util.List;
import java.util.Map;

/**
 * <p>
 *  服务类
 * </p>
 *
 * @author com.helei
 * @since 2025-02-05
 */
public interface IAccountBaseInfoService extends IService<AccountBaseInfo> {

    Integer insertOrUpdate(AccountBaseInfo accountBaseInfo);

    Integer insertOrUpdateBatch(List<AccountBaseInfo> accountBaseInfos);

    Result saveAccountBaseInfos(List<Map<String, Object>> rawLines);

    Result conditionPageQuery(PageQuery query);

    Result delete(List<Integer> ids);

    Result queryTypedInfo();
}
package cn.com.helei.bot.core.util.typehandler;

import com.alibaba.fastjson.JSONObject;
import org.apache.ibatis.type.BaseTypeHandler;
import org.apache.ibatis.type.JdbcType;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;

public class MapTextTypeHandler extends BaseTypeHandler<Map<String, Object>> {


    @Override
    public void setNonNullParameter(PreparedStatement ps, int i, Map<String, Object> parameter, JdbcType jdbcType) throws SQLException {

        String jsonString = parameter != null ? JSONObject.toJSONString(parameter) : "";
        ps.setString(i, jsonString);
    }

    @Override
    public Map<String, Object> getNullableResult(ResultSet rs, String columnName) throws SQLException {
        String json = rs.getString(columnName);
        if (json == null || json.isEmpty()) {
            return new HashMap<>();
        }
        return JSONObject.parseObject(json, Map.class);
    }

    @Override
    public Map<String, Object> getNullableResult(ResultSet rs, int columnIndex) throws SQLException {
        String json = rs.getString(columnIndex);
        return JSONObject.parseObject(json, Map.class);
    }

    @Override
    public Map<String, Object> getNullableResult(java.sql.CallableStatement cs, int columnIndex) throws SQLException {
        String json = cs.getString(columnIndex);
        return JSONObject.parseObject(json, Map.class);
    }
}
