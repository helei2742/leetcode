<template>
  <div class="app-container">
    <DynamicAddColTable
      :headers="discordAccountFields"
      :data="discordAccountList"
      @upload-data-list="uploadDataListHandler"
    />
  </div>
</template>

<script>
import DynamicAddColTable from '@/views/custom/import/components/dynamic-add-col-table.vue'

export default {
  name: 'ImportDiscordAccount',
  components: { DynamicAddColTable },
  filters: {},
  data() {
    return {
      discordAccountFields: [
        'username', 'password', 'bind_email'
      ],
      discordAccountList: [
      ]
    }
  },
  created() {
  },
  methods: {
    uploadDataListHandler(uploadAccountBaseInfoDataList) {
      console.log(uploadAccountBaseInfoDataList)
      this.$message('保存代理信息...' + uploadAccountBaseInfoDataList)
    }
  }
}
</script>
<template>
  <div class="app-container">
    <DynamicAddColTable
      :headers="telegramAccountFields"
      :data="telegramAccountList"
      @upload-data-list="uploadDataListHandler"
    />
  </div>
</template>

<script>
import DynamicAddColTable from '@/views/custom/import/components/dynamic-add-col-table.vue'

export default {
  name: 'ImportTelegramAccount',
  components: { DynamicAddColTable },
  filters: {},
  data() {
    return {
      telegramAccountFields: [
        'username', 'phone_prefix', 'phone'
      ],
      telegramAccountList: []
    }
  },
  created() {
  },
  methods: {
    uploadDataListHandler(uploadAccountBaseInfoDataList) {
      console.log(uploadAccountBaseInfoDataList)
      this.$message('保存代理信息...' + uploadAccountBaseInfoDataList)
    }
  }
}
</script>
<template>
  <div class="app-container">
    <DynamicAddColTable
      :headers="twitterAccountFields"
      :data="twitterAccountList"
      :upload-data-network="uploadTwitterNetwork"
      :batch-query-data-network="batchTwitterNetwork"
      :delete-data-network="deleteTwitterNetwork"
      :update-data-network="updateTwitterNetwork"
    />
  </div>
</template>

<script>
import DynamicAddColTable from '@/views/custom/import/components/dynamic-add-col-table.vue'
import { deleteTwitter, pageQueryTwitter, uploadTwitterList } from '@/api/custom/twitter'

export default {
  name: 'ImportTwitterAccount',
  components: { DynamicAddColTable },
  filters: {},
  data() {
    return {
      twitterAccountFields: [
        'username', 'password'
      ],
      twitterAccountList: [
      ]
    }
  },
  created() {
  },
  methods: {
    batchTwitterNetwork(query, fieldFilter, loadDataCall) {
      const payload = {
        page: query.page,
        limit: query.limit,
        fieldFilter: fieldFilter
      }

      pageQueryTwitter(payload).then(response => {
        this.$message.success(response)
        loadDataCall.accept(response.data)
      })
    },
    uploadTwitterNetwork(uploadAccountBaseInfoDataList) {
      uploadTwitterList(uploadAccountBaseInfoDataList)
    },
    deleteTwitterNetwork(browserEnv) {
      if (browserEnv.id === undefined || browserEnv.id === null) {
        this.$message.error('删除需带有id')
      } else {
        deleteTwitter([browserEnv.id]).then(response => {
          this.$message.success(response)
        })
      }
    },
    updateTwitterNetwork(browserEnv) {
      uploadTwitterList([browserEnv]).then(response => {
        this.$message.success(response)
      })
    }
  }
}
</script>
<template>
  <div class="app-container">
    <DynamicAddColTable
      :headers="accountBaseInfoFields"
      :data="accountBaseInfoList"
      :batch-query-data-network="batchQueryAccount"
      :upload-data-network="uploadDataListNetwork"
      :delete-data-network="deleteDataNetwork"
      :update-data-network="updateDataHandler"
    />
  </div>
</template>

<script>
import DynamicAddColTable from '@/views/custom/import/components/dynamic-add-col-table.vue'
import {
  uploadAccountBaseInfoList,
  deleteAccountBaseInfo,
  pageQueryAccountBaseInfo
} from '@/api/custom/account-base-info'
import { id } from 'html-webpack-plugin/lib/chunksorter'

export default {
  name: 'ImportAccountBaseInfo',
  components: { DynamicAddColTable },
  filters: {},
  data() {
    return {
      accountBaseInfoFields: [
        'type', 'name', 'email', 'password'
      ],
      accountBaseInfoList: []
    }
  },
  created() {

  },
  methods: {
    uploadDataListNetwork(uploadAccountBaseInfoDataList) {
      uploadAccountBaseInfoList(uploadAccountBaseInfoDataList).then(response => {
        this.$message.success(response)
        loadDataCall.accept(response.data)
      })
    },
    deleteDataNetwork(accountBaseInfo) {
      if (accountBaseInfo.id !== undefined && accountBaseInfo.id !== null) {
        deleteAccountBaseInfo([id]).then(response => {
          if (response.success) {
            this.$message.success('删除 ' + id + '账户成功')
          }
        })
      } else {
        this.$message.error('参数错误, 删除时必须带有id')
      }
    },
    updateDataHandler(accountBaseInfo) {
      uploadAccountBaseInfoList([accountBaseInfo])
        .then(response => {
          this.$message.success('更新成功')
        })
    },
    batchQueryAccount(query, fieldFilter, loadDataCall) {
      const payload = {
        page: query.page,
        limit: query.limit,
        fieldFilter: fieldFilter
      }
      pageQueryAccountBaseInfo(payload)
        .then(response => {

        })
    }
  }
}
</script>
<template>
  <div class="app-container">
    <DynamicAddColTable
      :headers="browserEnvFields"
      :data="browserEnvList"
      :update-data-network="updateBrowserEnvNetwork"
      :delete-data-network="deleteBrowserEnvNetwork"
      :batch-query-data-network="batchBrowserEnvNetwork"
      :upload-data-network="uploadBrowserEnvNetwork"
    />
  </div>
</template>

<script>
import DynamicAddColTable from '@/views/custom/import/components/dynamic-add-col-table.vue'
import { pageQueryBrowserEnv, deleteBrowserEnv, uploadBrowserEnvList } from '@/api/custom/browser-env'

export default {
  name: 'ImportBrowserEnv',
  components: { DynamicAddColTable },
  filters: {},
  data() {
    return {
      browserEnvFields: [
        'user_agent'
      ],
      browserEnvList: [
      ]
    }
  },
  created() {
  },
  methods: {
    batchBrowserEnvNetwork(query, fieldFilter, loadDataCall) {
      const payload = {
        page: query.page,
        limit: query.limit,
        fieldFilter: fieldFilter
      }

      pageQueryBrowserEnv(payload).then(response => {
        this.$message.success(response)
        loadDataCall.accept(response.data)
      })
    },
    uploadBrowserEnvNetwork(uploadAccountBaseInfoDataList) {
      uploadBrowserEnvList(uploadAccountBaseInfoDataList)
    },
    deleteBrowserEnvNetwork(browserEnv) {
      if (browserEnv.id === undefined || browserEnv.id === null) {
        this.$message.error('删除需带有id')
      } else {
        deleteBrowserEnv([browserEnv.id]).then(response => {
          this.$message.success(response)
        })
      }
    },
    updateBrowserEnvNetwork(browserEnv) {
      uploadBrowserEnvList([browserEnv]).then(response => {
        this.$message.success(response)
      })
    }
  }
}
</script>
<template>
  <div class="app-container">
    <DynamicAddColTable
      :headers="proxyInfoFields"
      :data="proxyInfoList"
      :upload-data-network="uploadDataListNetwork"
      :batch-query-data-network="batchQueryProxyNetwork"
      :delete-data-network="deleteProxyNetwork"
      :update-data-network="updateProxyNetwork"
    />
  </div>
</template>

<script>
import DynamicAddColTable from '@/views/custom/import/components/dynamic-add-col-table.vue'
import { uploadProxyInfoList, pageQueryProxyInfo, deleteProxyInfo } from '@/api/custom/proxy-info'

export default {
  name: 'ImportProxyInfo',
  components: { DynamicAddColTable },
  filters: {},
  data() {
    return {
      proxyInfoFields: [
        'proxy_protocol', 'host', 'port'
      ],
      proxyInfoList: []
    }
  },
  created() {

  },
  methods: {
    batchQueryProxyNetwork(query, fieldFilter, loadDataCall) {
      const payload = {
        page: query.page,
        limit: query.limit,
        fieldFilter: fieldFilter
      }

      pageQueryProxyInfo(payload).then(response => {
        this.$message.success(response)
        loadDataCall.accept(response.data)
      })
    },
    uploadDataListNetwork(uploadAccountBaseInfoDataList) {
      uploadProxyInfoList(uploadAccountBaseInfoDataList)
    },
    deleteProxyNetwork(proxyInfo) {
      if (proxyInfo.id === undefined || proxyInfo.id === null) {
        this.$message.error('删除需带有id')
      } else {
        deleteProxyInfo([proxyInfo.id]).then(response => {
          this.$message.success(response)
        })
      }
    },
    updateProxyNetwork(proxyInfo) {
      uploadProxyInfoList([proxyInfo]).then(response => {
        this.$message.success(response)
      })
    }
  }
}
</script>
