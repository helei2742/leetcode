package cn.com.helei.example.stork_bot;

import cn.com.helei.bot_father.BotLauncher;
import cn.com.helei.bot_father.anno.BotApplication;
import cn.com.helei.bot_father.anno.BotMethod;
import cn.com.helei.bot_father.bot.AutoLaunchBot;
import cn.com.helei.bot_father.config.AutoBotConfig;
import cn.com.helei.bot_father.service.BotApi;
import cn.com.helei.common.constants.BotJobType;
import cn.com.helei.common.dto.Result;
import cn.com.helei.common.entity.AccountContext;
import cn.com.helei.common.exception.BotInitException;
import cn.com.helei.common.exception.BotStartException;

import java.util.ArrayList;
import java.util.List;

@BotApplication(name = "stork_bot" )
public class StorkBot extends AutoLaunchBot<StorkBot> {

    private StorkBotAPI storkBotAPI;

    @Override
    protected void botInitialized(AutoBotConfig botConfig, BotApi botApi) {
        storkBotAPI = new StorkBotAPI(this);
    }

    @Override
    protected StorkBot getInstance() {
        return this;
    }

    @BotMethod(jobType = BotJobType.REGISTER)
    public Result signUp(AccountContext exampleAC, List<AccountContext> sameABIList, String inviteCode) {
        return storkBotAPI.signup(exampleAC, sameABIList, inviteCode);
    }

    @BotMethod(jobType = BotJobType.LOGIN)
    public Result login(AccountContext accountContext) {
        return storkBotAPI.login(accountContext);
    }

    @BotMethod(jobType = BotJobType.TIMED_TASK)
    public void keepAlive(AccountContext accountContext) {
        storkBotAPI.keepAlive(accountContext);
    }

    public static void main(String[] args) throws BotStartException, BotInitException {
        List<String> list = new ArrayList<>(List.of(args));

        list.add("--bot.botKey=stork_test");
        list.add("--bot.accountConfig.configFilePath=stork_google.xlsx");
        list.add("--add-opens java.base/java.lang=ALL-UNNAMED");

        BotLauncher.launch(StorkBot.class, list.toArray(new String[0]));
    }

}
package cn.com.helei.example.stork_bot;

import cn.com.helei.common.constants.HttpMethod;
import cn.com.helei.common.dto.Result;
import cn.com.helei.common.entity.AccountContext;
import cn.com.helei.mail.constants.MailProtocolType;
import cn.com.helei.mail.factory.MailReaderFactory;
import cn.com.helei.mail.reader.MailReader;
import cn.hutool.core.util.StrUtil;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.jetbrains.annotations.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.mail.Message;
import javax.mail.MessagingException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.atomic.AtomicReference;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


public class StorkBotAPI {
    private static final String CLIENT_ID = "5msns4n49hmg3dftp2tp1t2iuh";

    private static final String SIGNUP_APi = "https://cognito-idp.ap-northeast-1.amazonaws.com/";

    private static final String LOGIN_API = "";

    private static final String STORK_SIGNED_PRICE_API = "https://app-api.jp.stork-oracle.network/v1/stork_signed_prices";

    private static final String VALIDATE_SIGNED_PRICE_API = "https://app-api.jp.stork-oracle.network/v1/stork_signed_prices/validations";

    private static final String MAIL_FROM = "noreply@stork.network";

    private static final Pattern V_CODE_PATTERN = Pattern.compile("he verification code to your new account is\\s+(\\d{6})");

    public static final String PASSWORD_KEY = "stork_password";

    public static final String IMAP_PASSWORD_KEY = "imap_password";

    public static final String TOKEN_KEY = "stork_token";


    private static final MailReader mailReader = MailReaderFactory.getMailReader(MailProtocolType.imap,
            "imap.gmail.com", "993", true);
    private static final Logger log = LoggerFactory.getLogger(StorkBotAPI.class);

    private final StorkBot bot;


    public StorkBotAPI(StorkBot bot) {
        this.bot = bot;
    }


    /**
     * 注册
     *
     * @param exampleAC     exampleAC
     * @param sameABIACList sameABIACList
     * @param inviteCode    inviteCode
     * @return Result
     */
    public Result signup(AccountContext exampleAC, List<AccountContext> sameABIACList, String inviteCode) {
        bot.logger.info("%s start signup".formatted(exampleAC.getSimpleInfo()));

        CompletableFuture<String> signupFuture = sendSignUpRequest(exampleAC, inviteCode)
                .thenApplyAsync(responseStr -> queryCheckCode(exampleAC))
                .thenApplyAsync(checkCode -> confirmSignup(exampleAC, checkCode));

        try {
            String confirmResponse = signupFuture.get();
            bot.logger.info("%s sign up finish, %s".formatted(exampleAC.getSimpleInfo(), confirmResponse));
            return Result.ok();
        } catch (InterruptedException | ExecutionException e) {
            String errorMsg = "%s signup error, %s".formatted(exampleAC.getSimpleInfo(),
                    e.getCause() == null ? e.getCause().getMessage() : e.getMessage());
            bot.logger.error(errorMsg, e);
            return Result.fail(errorMsg);
        }
    }

    /**
     * 登录
     *
     * @param accountContext accountContext
     * @return Result
     */
    public Result login(AccountContext accountContext) {
        bot.logger.info("%s start login".formatted(accountContext.getSimpleInfo()));

        Map<String, String> headers = accountContext.getBrowserEnv().generateHeaders();
        headers.put("Accept", "/");

        JSONObject body = new JSONObject();
        body.put("grant_type", "refresh_token");
        body.put("ClientId", CLIENT_ID);

        try {
            String responseStr = bot.syncRequest(
                    accountContext.getProxy(),
                    LOGIN_API,
                    HttpMethod.POST,
                    headers,
                    null,
                    body,
                    () -> accountContext.getSimpleInfo() + " start login"
            ).get();

            JSONObject result = JSONObject.parseObject(responseStr);
            bot.logger.info("%s login success, %s".formatted(accountContext.getSimpleInfo(), responseStr));
            return Result.ok();
        } catch (InterruptedException | ExecutionException e) {
            String errorMsg = "%s login error, %s".formatted(accountContext.getSimpleInfo(),
                    e.getCause() == null ? e.getMessage() : e.getCause().getMessage());
            bot.logger.error(errorMsg, e);
            return Result.fail(errorMsg);
        }
    }


    /**
     * keepAlive
     *
     * @param accountContext accountContext
     */
    public void keepAlive(AccountContext accountContext) {
        // TODO check token refresh it
        try {
            String msgHash = getSignedPrice(accountContext).get();

            String response = validateSignedPrice(accountContext, msgHash).get();

            bot.logger.info(accountContext + "%s keep alive success, " + response);
        } catch (InterruptedException | ExecutionException e) {
            bot.logger.error(accountContext + " keep alive error " + (e.getCause() == null ? e.getMessage() : e.getCause().getMessage()));
        }
    }



    private CompletableFuture<String> validateSignedPrice(AccountContext accountContext, String msgHash) {
        bot.logger.info(accountContext.getSimpleInfo() + " start validate signed price ");
        String token = accountContext.getParam(TOKEN_KEY);

        Map<String, String> headers = accountContext.getBrowserEnv().generateHeaders();
        headers.put("Authorization", "Bearer " + token);

        JSONObject body = new JSONObject();
        body.put("msg_hash", msgHash);
        body.put("valid", true);

        return bot.syncRequest(
                accountContext.getProxy(),
                VALIDATE_SIGNED_PRICE_API,
                HttpMethod.POST,
                headers,
                null,
                body,
                () -> accountContext.getSimpleInfo() + " send validate signed price request"
        );
    }


    private CompletableFuture<String> getSignedPrice(AccountContext accountContext) {
        bot.logger.info(accountContext.getSimpleInfo() + " start get signed price ");

        String token = accountContext.getParam(TOKEN_KEY);

        Map<String, String> headers = accountContext.getBrowserEnv().generateHeaders();
        headers.put("Authorization", "Bearer " + token);

        return bot.syncRequest(
                accountContext.getProxy(),
                STORK_SIGNED_PRICE_API,
                HttpMethod.GET,
                headers,
                null,
                null,
                () -> accountContext.getSimpleInfo() + " send get signed price request"
        ).thenApplyAsync(responseStr -> {
            JSONObject signedPrices = JSONObject.parseObject(responseStr);
            bot.logger.info(accountContext.getSimpleInfo() + " signed price is " + signedPrices);

            JSONArray prices = signedPrices.getJSONArray("data");
            for (int i = 0; i < prices.size(); i++) {
                JSONObject price = prices.getJSONObject(i);
                JSONObject timestampedSignature = price.getJSONObject("timestamped_signature");
                if (timestampedSignature != null) {
                    return timestampedSignature.getString("msg_hash");
                }
            }
            throw new RuntimeException("signed price is empty");
        });
    }


    private String confirmSignup(AccountContext exampleAC, String checkCode) {
        bot.logger.info(exampleAC.getSimpleInfo() + " check code is " + checkCode + " start confirm sign up");

        Map<String, String> headers = exampleAC.getBrowserEnv().generateHeaders();
        headers.put("X-Amz-Target", "AWSCognitoIdentityProviderService.ConfirmSignUp");
        headers.put("Accept", "/");

        JSONObject body = new JSONObject();
        body.put("Username", exampleAC.getAccountBaseInfo().getEmail());
        body.put("ConfirmationCode", checkCode);
        body.put("ClientId", CLIENT_ID);

        CompletableFuture<String> future = bot.syncRequest(
                exampleAC.getProxy(),
                SIGNUP_APi,
                HttpMethod.POST,
                headers,
                body,
                null,
                () -> exampleAC.getSimpleInfo() + " confirm sign up"
        );
        try {
            return future.get();
        } catch (InterruptedException | ExecutionException e) {
            throw new RuntimeException("confirm sign up error, %s".formatted(e.getCause() == null ? e.getCause().getMessage() : e.getMessage()));
        }
    }


    /**
     * Step 2 从邮箱获取验证码
     *
     * @param exampleAC exampleAC
     * @return String
     */
    private @NotNull String queryCheckCode(AccountContext exampleAC) {
        bot.logger.info(exampleAC.getSimpleInfo() + " start query check code");

        String email = exampleAC.getAccountBaseInfo().getEmail();
        String imapPassword = exampleAC.getParam(IMAP_PASSWORD_KEY);

        AtomicReference<String> checkCode = new AtomicReference<>();
        mailReader.stoppableReadMessage(email, imapPassword, 3, message -> {
            try {
                String newValue = resolveVerifierCodeFromMessage(message);
                checkCode.set(newValue);
                return StrUtil.isNotBlank(newValue);
            } catch (MessagingException e) {
                throw new RuntimeException("email check code query error", e);
            }
        });

        if (StrUtil.isBlank(checkCode.get())) {
            throw new RuntimeException("check code is empty");
        }

        return checkCode.get();
    }


    private CompletableFuture<String> sendSignUpRequest(AccountContext exampleAC, String inviteCode) {
        Map<String, String> headers = exampleAC.getBrowserEnv().generateHeaders();
        headers.put("X-Amz-Target", "AWSCognitoIdentityProviderService.SignUp");
        headers.put("Accept", "/");

        JSONObject body = generateSignupBody(exampleAC, inviteCode);

        // Step 1 注册请求
        return bot.syncRequest(
                exampleAC.getProxy(),
                SIGNUP_APi,
                HttpMethod.POST,
                headers,
                body,
                null,
                () -> exampleAC.getSimpleInfo() + " send sign up request"
        );
    }

    private String resolveVerifierCodeFromMessage(Message message) throws MessagingException {
        boolean b = Arrays.stream(message.getFrom())
                .anyMatch(address -> MAIL_FROM.equals(address.toString()));
        if (!b) return null;

        String context = MailReader.getTextFromMessage(message);
        Matcher matcher = V_CODE_PATTERN.matcher(context);

        if (matcher.find()) {
            return matcher.group();
        }
        return null;
    }

    private static @NotNull JSONObject generateSignupBody(AccountContext exampleAC, String inviteCode) {
        JSONObject body = new JSONObject();

        String email = exampleAC.getAccountBaseInfo().getEmail();
        body.put("Username", email);
        body.put("Password", exampleAC.getParam(PASSWORD_KEY));
        body.put("ClientId", CLIENT_ID);

        JSONArray userAtributes = new JSONArray();
        JSONObject ua1 = new JSONObject();
        ua1.put("Name", "email");
        ua1.put("Value", email);
        JSONObject ua2 = new JSONObject();
        ua2.put("Name", "custom:referral_code");
        ua2.put("Value", inviteCode);
        userAtributes.add(ua1);
        userAtributes.add(ua2);
        body.put("UserAttributes", userAtributes);
        return body;
    }

}
