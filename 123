package cn.com.helei.bot.core.supporter.botapi;

import java.util.Map;

public interface ImportService {

    Integer importBotAccountContextFromExcel(Integer botId, String fileBotConfigPath);

    Integer importBrowserEnvFromExcel(String fileBotConfigPath);


    Integer importProxyFromExcel(String botConfigPath);


    Map<String, Integer> importAccountBaseInfoFromExcel(String botConfigPath);


    Integer importTwitterFromExcel(String fileBotConfigPath);


    Integer importDiscordFromExcel(String fileBotConfigPath);


    Integer importTelegramFormExcel(String fileBotConfigPath);
}
package cn.com.helei.bot.core.supporter.persistence.impl;


import cn.com.helei.bot.core.entity.AccountContext;
import cn.com.helei.bot.core.supporter.botapi.BotApi;
import cn.com.helei.bot.core.supporter.persistence.AbstractPersistenceManager;
import cn.com.helei.bot.core.supporter.propertylisten.PropertyChangeInvocation;
import cn.com.helei.bot.core.util.NamedThreadFactory;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import lombok.extern.slf4j.Slf4j;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.stream.Collectors;

@Slf4j
public class DBAccountPersistenceManager extends AbstractPersistenceManager {

    private final ExecutorService executorService = Executors.newThreadPerTaskExecutor(new NamedThreadFactory("database-"));

    private final BotApi botApi;;

    public DBAccountPersistenceManager(BotApi botApi) {
        this.botApi = botApi;
    }

    @Override
    public void init() {

    }

    @Override
    public void persistenceAccountContexts(Map<String, List<AccountContext>> typedAccountMap) {
        for (List<AccountContext> values : typedAccountMap.values()) {
            botApi.getProjectAccountContextService().saveBatch(values);
        }
    }

    @Override
    public Map<String, List<AccountContext>> loadAccountContexts(Integer botId) {
        // Step 1 加载 botId 对应的账号
        AccountContext query = new AccountContext();
        query.setBotId(botId);
        List<AccountContext> accountContexts = botApi.getProjectAccountContextService().list(new QueryWrapper<>(query));

        // Step 2 遍历账号，补充对象
        CompletableFuture<?>[] futures = accountContexts.stream()
                .map(accountContext -> CompletableFuture.runAsync(
                        () -> fillAccountInfo(accountContext), executorService))
                .toArray(CompletableFuture[]::new);

        // Step 3 等待所有任务完成
        for (int i = 0; i < futures.length; i++) {
            try {
                futures[i].get();
            } catch (InterruptedException | ExecutionException e) {
                log.error("{} fill account context info error", i, e);
            }
        }

        // Step 4 按类型分类账号
        return accountContexts.stream().collect(Collectors.groupingBy(AccountContext::getType));
    }

    @Override
    protected void propertyChangeHandler(PropertyChangeInvocation invocation) {

    }


    /**
     * 查询填充账户信息
     *
     * @param accountContext accountContext
     */
    private void fillAccountInfo(AccountContext accountContext) {

        // Step 2.1 绑定基础账号信息
        if (accountContext.getAccountBaseInfoId() != null) {
            accountContext.setAccountBaseInfo(botApi.getAccountBaseInfoService().getById(accountContext.getAccountBaseInfoId()));
        }
        // Step 2,2 绑定推特
        if (accountContext.getTwitterId() != null) {
            accountContext.setTwitter(botApi.getTwitterAccountService().getById(accountContext.getTwitterId()));
        }
        // Step 2,3 绑定 discord
        if (accountContext.getDiscordId() != null) {
            accountContext.setDiscord(botApi.getDiscordAccountService().getById(accountContext.getDiscordId()));
        }
        // Step 2.4 绑定代理
        if (accountContext.getProxyId() != null) {
            accountContext.setProxy(botApi.getProxyInfoService().getById(accountContext.getProxyId()));
        }
        // Step 2.5 绑定浏览器环境
        if (accountContext.getBrowserEnvId() != null) {
            accountContext.setBrowserEnv(botApi.getBrowserEnvService().getById(accountContext.getBrowserEnvId()));
        }
        // Step 2.6 绑定tg
        if (accountContext.getTelegramId() != null) {

        }
        // Step 2.7 绑定钱包
        if (accountContext.getWalletId() != null) {

        }

        // Step 2.8 绑定奖励信息
        if (accountContext.getRewardId() != null) {
            accountContext.setRewordInfo(botApi.getRewordInfoService().getById(accountContext.getRewardId()));
        }
    }
}
package cn.com.helei.bot.core.supporter.persistence;

import cn.com.helei.bot.core.entity.AccountContext;

import java.util.List;
import java.util.Map;

public interface AccountPersistenceManager {

    void init();

    void persistenceAccountContexts(Map<String, List<AccountContext>> typedAccountMap);

    Map<String, List<AccountContext>> loadAccountContexts(Integer projectId);

    void registerPersistenceListener(String type, List<AccountContext> targetList);

}
package cn.com.helei.bot.core.util;

import cn.com.helei.bot.core.config.SystemConfig;
import org.apache.poi.ss.formula.functions.T;
import org.yaml.snakeyaml.Yaml;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.rmi.MarshalledObject;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class YamlConfigLoadUtil {

    private static final ConcurrentHashMap<String, Object> LOADED_CONFIG_MAP = new ConcurrentHashMap<>();


    public static  <T> T  load(String configDirBotPath, String fileName, String prefix,  Class<T> clazz) {
        return load(List.of(configDirBotPath.split("\\.")), fileName, List.of(prefix.split("\\.")), clazz);
    }

    public static <T> T load(
            List<String> path,
            String fileName,
            List<String> prefixList,
            Class<T> clazz
    ) {
        String dirResourcePath = FileUtil.getConfigDirResourcePath(path, fileName);

        Object compute = LOADED_CONFIG_MAP.compute(dirResourcePath, (k, config) -> {
            if (config == null) {
                Yaml yaml = new Yaml();
                try (InputStream inputStream = new FileInputStream(dirResourcePath)) {
                    Map<String, Object> yamlData = yaml.load(inputStream);

                    if (prefixList != null) {
                        for (String prefix : prefixList) {
                            yamlData = (Map<String, Object>) yamlData.get(prefix);
                        }
                    }

                    config = yaml.loadAs(yaml.dump(yamlData), clazz);
                } catch (IOException e) {
                    throw new RuntimeException(String.format("加载配置池文件[%s]发生错误", dirResourcePath), e);
                }
            }

            return config;
        });

        return (T) compute;
    }

    public static List<Object> load(String configDirBotPath, String fileName, String prefix) {
        return load(List.of(configDirBotPath.split("\\.")), fileName, List.of(prefix.split("\\.")));
    }

    public static List<Object> load(
            List<String> path,
            String fileName,
            List<String> prefixList
    ) {
        String dirResourcePath = FileUtil.getConfigDirResourcePath(path, fileName);

        Object compute = LOADED_CONFIG_MAP.compute(dirResourcePath, (k, config) -> {
            if (config == null) {
                Yaml yaml = new Yaml();
                try (InputStream inputStream = new FileInputStream(dirResourcePath)) {
                    Map<String, Object> yamlData = yaml.load(inputStream);

                    if (prefixList != null) {
                        for (String prefix : prefixList) {
                            yamlData = (Map<String, Object>) yamlData.get(prefix);
                        }
                    }
                    return yamlData.get("list");
                } catch (IOException e) {
                    throw new RuntimeException(String.format("加载配置池文件[%s]发生错误", dirResourcePath), e);
                }
            }

            return config;
        });

        return (List<Object>) compute;
    }

    public static void main(String[] args) {
        System.out.println(YamlConfigLoadUtil.load(SystemConfig.CONFIG_DIR_BOT_PATH, "browser-env.yaml", List.of("bot", "browser")));
    }

}
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.com.helei.bot.core.mvc.mapper.BotAccountContextMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="cn.com.helei.bot.core.entity.AccountContext">
        <id column="id" property="id" />
        <result column="bot_id" property="botId" />
        <result column="account_base_info_id" property="accountBaseInfoId" />
        <result column="twitter_id" property="twitterId" />
        <result column="discord_id" property="discordId" />
        <result column="proxy_id" property="proxyId" />
        <result column="browser_env_id" property="browserEnvId" />
        <result column="telegram_id" property="telegramId" />
        <result column="wallet_id" property="walletId" />
        <result column="reward_id" property="rewardId" />
        <result column="status" property="status" />
        <result column="usable" property="usable" />
        <result column="params" property="params" />
        <result column="insert_datetime" property="insertDatetime" />
        <result column="update_datetime" property="updateDatetime" />
        <result column="is_valid" property="isValid" />
    </resultMap>



    <select id="insertOrUpdate" parameterType="cn.com.helei.bot.core.entity.AccountContext" resultType="java.lang.Integer">
        INSERT INTO t_account_base_info
        (id, bot_id, account_base_info_id, twitter_id, discord_id, proxy_id, browser_env_id, telegram_id, wallet_id,
         reward_id, status, usable, params, insert_datetime, update_datetime, is_valid)
        VALUES (NULL, #{bot_id}, #{account_base_info_id}, #{twitter_id}, #{discord_id}, #{proxy_id}, #{browser_env_id}, #{telegram_id}, #{wallet_id},
                #{reward_id}, #{status}, #{usable}, #{params}, #{insert_datetime}, #{update_datetime}, #{is_valid}
               ) ON CONFLICT(email)
        DO
        UPDATE SET
            id = excluded.id,
            bot_id = excluded.bot_id,
            account_base_info_id = excluded.account_base_info_id,
            twitter_id = excluded.twitter_id,
            discord_id = excluded.discord_id,
            proxy_id = excluded.proxy_id,
            browser_env_id = excluded.browser_env_id,
            telegram_id = excluded.telegram_id,
            wallet_id = excluded.wallet_id,
            reward_id = excluded.reward_id,
            status = excluded.status,
            usable = excluded.usable,
            params = excluded.params,
            update_datetime = excluded.update_datetime,
    </select>
</mapper>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.com.helei.bot.core.mapper.ProjectMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="cn.com.helei.bot.core.entity.ProjectInfo">
        <id column="id" property="id" />
        <result column="name" property="name" />
        <result column="describe" property="describe" />
        <result column="is_account_loaded" property="isAccountLoaded" />
        <result column="insert_datetime" property="insertDatetime" />
        <result column="update_datetime" property="updateDatetime" />
        <result column="is_valid" property="isValid" />
    </resultMap>

</mapper>
package cn.com.helei.bot.view;

import cn.com.helei.bot.core.AutoBotApplication;
import cn.com.helei.bot.core.bot.RestTaskAutoBot;
import cn.com.helei.bot.core.bot.anno.BotApplication;
import cn.com.helei.bot.core.bot.view.MenuCMDLineAutoBot;
import cn.com.helei.bot.core.config.AutoBotConfig;
import cn.com.helei.bot.core.entity.AccountContext;
import cn.com.helei.bot.core.supporter.botapi.BotApi;
import cn.com.helei.bot.core.supporter.commandMenu.DefaultMenuType;
import cn.com.helei.bot.core.util.YamlConfigLoadUtil;
import cn.com.helei.bot.core.util.exception.DepinBotStartException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import javax.mail.Message;
import java.util.List;
import java.util.concurrent.CompletableFuture;


@SpringBootTest(classes = AutoBotApplication.class)
class MenuCMDLineAutoBotTest {

    private TestRestAutoBot autoBot;

    private MenuCMDLineAutoBot<AutoBotConfig> menuCMDLineAutoBot;

    @Autowired
    public BotApi botApi;

    @BeforeEach
    public  void setUp() throws DepinBotStartException {

        AutoBotConfig config = YamlConfigLoadUtil.load("config.app", "example.yaml", "bot.app", AutoBotConfig.class);

        autoBot = new TestRestAutoBot(config, botApi);

        menuCMDLineAutoBot = new MenuCMDLineAutoBot<>(autoBot, List.of(DefaultMenuType.IMPORT));

    }

    @Test
    public void test() throws DepinBotStartException {
        menuCMDLineAutoBot.start();
    }


    @BotApplication(name = "testbot")
    static class TestRestAutoBot extends RestTaskAutoBot {

        public TestRestAutoBot(AutoBotConfig autoBotConfig, BotApi botApi) {
            super(autoBotConfig, botApi);
        }

        @Override
        public CompletableFuture<Boolean> registerAccount(AccountContext accountContext, String inviteCode) {
            return null;
        }

        @Override
        public CompletableFuture<Boolean> verifierAccountEmail(AccountContext accountContext, Message message) {
            return null;
        }

        @Override
        public CompletableFuture<String> requestTokenOfAccount(AccountContext accountContext) {
            return null;
        }

        @Override
        public boolean doAccountClaim(AccountContext accountContext) {
            return false;
        }

        @Override
        public CompletableFuture<Boolean> updateAccountRewordInfo(AccountContext accountContext) {
            return null;
        }
    }
}
