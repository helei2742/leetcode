<script lang="ts" setup>
import {SwitchButton,Setting} from '@element-plus/icons-vue'
import {BotInstanceInfo} from "@/interfaces/VortexaTypes.ts";
import {computed} from "vue";
import {ElMessage, ElMessageBox} from "element-plus";

const props = defineProps<{
  botInstance: BotInstanceInfo
}>();

// 事件
const emit = defineEmits(['start-script', 'stop-script', 'delete-script', 'start-task', 'stop-task'])

const startScriptHandler = ()=>{
  emit('start-script', {instanceId: props.botInstance.id})
}

const stopScriptHandler = ()=>{
  emit('stop-script', {instanceId: props.botInstance.id})
}

const deleteInstanceHandler = ()=>{
  ElMessageBox.confirm(
    'delete the script instance. Continue?',
    'Warning',
    {
      confirmButtonText: 'OK',
      cancelButtonText: 'Cancel',
      type: 'danger',
    }
  )
    .then(() => {
      emit('delete-task', {instanceId: props.botInstance.id})
    })
    .catch(() => {
      ElMessage({
        type: 'info',
        message: 'Delete canceled',
      })
    })
}

const startTaskHandler = ()=>{
  emit('start-task', {instanceId: props.botInstance.id})
}

const stopTaskHandler = ()=>{
  emit('stop-task', {instanceId: props.botInstance.id})
}
</script>

<template>
  <div class="bot-runtime-display-card" >
    <div class="card-header clearfix">
      <div style="display:flex; align-items: start">
        <div style="width: 60px;">
          <el-image class="head-image"/>
        </div>
        <div style="flex: 1;overflow: hidden;font-weight: 700">
          <el-text truncated>{{ botInstance.botKey }}</el-text>
          <div style="font-weight: 400;">
            <el-text truncated>
              {{ botInstance.insertDatetime ? botInstance.insertDatetime : 'unknown start time'}}
            </el-text>
          </div>
        </div>

        <el-dropdown  placement="bottom-end">
          <el-icon class="setting-button"><Setting/></el-icon>
          <template #dropdown>
            <el-dropdown-menu>
              <el-dropdown-item>Task params edit</el-dropdown-item>
              <el-dropdown-item>Account edit</el-dropdown-item>
              <el-dropdown-item
                style="color: red"
                @click="deleteInstanceHandler"
              >
                delete
              </el-dropdown-item>
            </el-dropdown-menu>
          </template>
        </el-dropdown>
      </div>
    </div>

    <div class="data-print-line">

    </div>

    <div class="card-detail">
      <div class="card-detail-content"/>


      <el-button v-if="botInstance.botStatus==1" class="opt-button" type="danger" plain>
        <el-icon>
          <SwitchButton/>
        </el-icon>
        Stop Task
      </el-button>
      <el-button
        v-else
        class="opt-button"
        type="success"
        @click="startScriptHandler"
        plain
      >
        <el-icon>
          <SwitchButton/>
        </el-icon>
        Start Script
      </el-button>
    </div>
  </div>
</template>

<style scoped>
.bot-runtime-display-card {
  width: 300px;
  min-width: 300px;
  //max-width: 500px;
  height: 350px;
  background-color: rgba(110, 110, 110, 0.1);
  padding: 24px;

  margin-left: 12px;

  color: #9da3ae;
  border-radius: 10px;
}

.card-header {
  height: 48px;
}

.data-print-line {
  height: 48px;
  margin-top: 4px;

}

.card-detail {
  height: 222px;
  margin-top: 16px;
}

.head-image {
  height: 48px;
  width: 48px;
  margin-right: 8px;
}

.icon-button {
  width: 24px;
  height: 24px;
  color: #9da3ae;
  font-size: 20px;

  cursor: pointer;
}

.icon-button:hover {
  transform: scale(1.2); /* 鼠标悬浮时放大 */
  color: #007BFF; /* 鼠标悬浮时改变颜色 */
}

.card-detail-content {
  height: 184px;
}

.opt-button {
  width: 100%;
  font-size: 16px;
  font-weight: 600;
  text-align: center;
}

.setting-button{
  font-size: 23px;
  cursor: pointer;
}

.setting-button:hover{
  color: #000000;
}
</style>
