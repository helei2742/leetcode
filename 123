

package com.helei.tradesignalprocess.config;

import com.helei.constants.trade.TradeType;
import com.helei.constants.RunEnv;
import com.helei.dto.config.RunTypeConfig;
import com.helei.dto.kafka.TradeSignalTopic;
import lombok.Data;
import org.yaml.snakeyaml.Yaml;

import java.io.InputStream;
import java.io.Serializable;
import java.util.Map;

@Data
public class TradeSignalConfig implements Serializable {
    private static final String CONFIG_FILE = "trade-signal-config.yaml";

    public static final TradeSignalConfig TRADE_SIGNAL_CONFIG;

    /**
     * 信号名
     */
    private String name;

    /**
     * 信号交易对
     */
    private String symbol;

    /**
     * 运行环境设置
     */
    private RunTypeConfig run_type;

    /**
     * 历史k线加载批大小
     */
    private int historyKLineBatchSize;

    /**
     * 批加载并发度
     */
    private int batchLoadConcurrent;

    /**
     * 实时数据配置
     */
    private RealtimeConfig realtime;

    static {
        Yaml yaml = new Yaml();
        try (InputStream inputStream = TradeSignalConfig.class.getClassLoader().getResourceAsStream(CONFIG_FILE)) {
            if (inputStream == null) {
                throw new IllegalArgumentException("File not found: " + CONFIG_FILE);
            }
            Map<String, Object> yamlData = yaml.load(inputStream);
            Map<String, Object> shinano = (Map<String, Object>) yamlData.get("shinano");
            Map<String, Object> quantity = (Map<String, Object>) shinano.get("quantity");
            Map<String, Object> trade_signal_maker = (Map<String, Object>) quantity.get("trade_signal_maker");


            TRADE_SIGNAL_CONFIG = yaml.loadAs(yaml.dump(trade_signal_maker), TradeSignalConfig.class);

        } catch (Exception e) {
            throw new RuntimeException("Failed to load YAML file: " + CONFIG_FILE, e);
        }
    }

    private TradeSignalConfig() {
    }

    /**
     * 获取最终交易信号写入到kafka到topic
     *
     * @return topic
     */
    public TradeSignalTopic getSinkTopic() {
        return new TradeSignalTopic(getRun_env(), getTrade_type(), symbol, name);
    }

    /**
     * 获取交易类型
     *
     * @return TradeType
     */
    public TradeType getTrade_type() {
        return run_type.getConfigs().stream().findFirst().get().getTrade_type().stream().findFirst().get();
    }

    /**
     * 获取运行环境
     *
     * @return RunEnv
     */
    public RunEnv getRun_env() {
        return run_type.getConfigs().stream().findFirst().get().getEnv();
    }


    @Data
    public static class RealtimeConfig implements Serializable {

        private RealtimeKafkaConfig kafka;

        private RealtimeFlinkConfig flink;

    }


    @Data
    public static class RealtimeKafkaConfig implements Serializable {

        /**
         * 输入的配置
         */
        private KafkaServerConfig input;

        /**
         * 输出的配置
         */
        private KafkaServerConfig output;

    }

    @Data
    public static class KafkaServerConfig implements Serializable {
        /**
         * kafka集群连接地址
         */
        private String bootstrapServer;

        /**
         * 消费者组名
         */
        private String groupId;

        /**
         * 事务超时时间，需要比kafka broker 中设置的小
         */
        private String transaction_timeout_ms;
    }

    @Data
    public static class RealtimeFlinkConfig implements Serializable {

        /**
         * flink job manager host
         */
        private String jobManagerHost;
        /**
         * flink job manager port
         */
        private Integer jobManagerPort;
    }

    public static void main(String[] args) {
        System.out.println(TRADE_SIGNAL_CONFIG);
    }

}


package com.helei.tradesignalprocess.stream.d_decision;


import com.helei.dto.trade.IndicatorMap;
import com.helei.dto.trade.IndicatorSignal;
import com.helei.dto.trade.TradeSignal;
import com.helei.tradesignalprocess.stream.d_decision.config.PSTBollDecisionConfig_v1;
import lombok.extern.slf4j.Slf4j;

import java.math.BigDecimal;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * 根据PST和Boll指标决策下单
 */
@Deprecated
@Slf4j
public class PSTBollDecisionMaker extends BinanceDecisionMaker {

    private final PSTBollDecisionConfig_v1 config;

    public PSTBollDecisionMaker(PSTBollDecisionConfig_v1 config) {
        super(config.getName());
        this.config = config;
    }

    @Override
    protected TradeSignal makeBinanceTradeSignal(String symbol, List<IndicatorSignal> windowSignal, IndicatorMap indicatorMap) { String pstKey = config.getPstConfig().getIndicatorName();
        String bollKey = config.getBollConfig().getIndicatorName();

        Map<String, List<IndicatorSignal>> signalMap = windowSignal.stream().collect(Collectors.groupingBy(IndicatorSignal::getName));

        List<IndicatorSignal> pstSignals = signalMap.get(pstKey);
        List<IndicatorSignal> bollSignals = signalMap.get(bollKey);

//        if (pstSignals == null || bollSignals == null || pstSignals.isEmpty() || bollSignals.isEmpty()) {
//            log.warn("pst和boll信号不满足共振， 不生成订单");
//            return null;
//        }

        if (bollSignals != null && !signalMap.isEmpty()) {
            IndicatorSignal newBollSignal = bollSignals.getLast();
            //TODO 仅仅测试用
            return buildMarketOrder(newBollSignal);
        }
//        IndicatorSignal newPstSignal = pstSignals.getLast();


        return null;
    }

    private static TradeSignal buildMarketOrder(IndicatorSignal newBollSignal) {
        return TradeSignal
                .builder()
                .symbol(newBollSignal.getKLine().getSymbol())
                .tradeSide(newBollSignal.getTradeSide())
                .targetPrice(BigDecimal.valueOf(newBollSignal.getTargetPrice()))
                .stopPrice(BigDecimal.valueOf(newBollSignal.getStopPrice()))
                .enterPrice(BigDecimal.valueOf(newBollSignal.getKLine().getCloseTime()))
                .build();
    }
}





package com.helei.tradesignalprocess.stream.e_trade_signal;

import com.helei.dto.kafka.TradeSignalTopic;
import com.helei.tradesignalprocess.config.TradeSignalConfig;
import com.helei.dto.trade.TradeSignal;
import com.helei.util.Serializer;
import lombok.extern.slf4j.Slf4j;
import org.apache.flink.api.common.serialization.SerializationSchema;
import org.apache.flink.api.connector.sink2.Sink;
import org.apache.flink.connector.kafka.sink.KafkaRecordSerializationSchema;
import org.apache.flink.connector.kafka.sink.KafkaSink;
import org.apache.kafka.clients.producer.ProducerConfig;

import java.util.Properties;


@Slf4j
public class KafkaTradeSignalCommitter extends AbstractTradeSignalCommitter<TradeSignal> {


    @Override
    public Sink<TradeSignal> getCommitSink() {
        TradeSignalConfig.KafkaServerConfig kafkaServerConfig = tradeSignalConfig.getRealtime().getKafka().getOutput();
        String bootstrap = kafkaServerConfig.getBootstrapServer();
        TradeSignalTopic topic = tradeSignalConfig.getSinkTopic();

        log.info("创建 原始订单 Kafka Sink [{}] - topic [{}]", bootstrap, topic);

        Properties props = new Properties();
        props.setProperty(ProducerConfig.TRANSACTION_TIMEOUT_CONFIG, kafkaServerConfig.getTransaction_timeout_ms());

        return KafkaSink.<TradeSignal>builder()
                .setBootstrapServers(bootstrap)
                .setRecordSerializer(
                        KafkaRecordSerializationSchema
                                .builder()
                                .setTopic(topic.toString())
                                .setValueSerializationSchema(new KafkaOriginOrderSchema())
                                .build()
                )
//                .setDeliveryGuarantee(DeliveryGuarantee.EXACTLY_ONCE)
                .setKafkaProducerConfig(props)
                .build();
    }


    static class KafkaOriginOrderSchema implements SerializationSchema<TradeSignal> {
        @Override
        public byte[] serialize(TradeSignal tradeSignal) {
            return Serializer.Algorithm.JSON.serialize(tradeSignal);
        }
    }
}





package com.helei.tradesignalprocess.stream;

import com.helei.dto.trade.IndicatorSignal;
import com.helei.dto.trade.SignalGroupKey;
import com.helei.tradesignalprocess.stream.c_indicator_signal.IndicatorSignalService;
import com.helei.tradesignalprocess.stream.d_decision.AbstractDecisionMaker;
import com.helei.tradesignalprocess.stream.e_trade_signal.AbstractTradeSignalCommitter;
import lombok.extern.slf4j.Slf4j;
import org.apache.flink.api.connector.sink2.Sink;
import org.apache.flink.api.java.tuple.Tuple2;
import org.apache.flink.streaming.api.datastream.DataStream;
import org.apache.flink.streaming.api.datastream.KeyedStream;

import java.util.List;

@Slf4j
public class TradeSignalBuildTask<T> {


    /**
     * 信号流服务
     */
    private final IndicatorSignalService indicatorSignalService;

    /**
     * 决策服务
     */
    private final AbstractDecisionMaker<T> decisionMaker;

    /**
     * 订单提交器
     */
    private final AbstractTradeSignalCommitter<T> orderCommitter;


    public TradeSignalBuildTask(
            IndicatorSignalService indicatorSignalService,
            AbstractDecisionMaker<T> decisionMaker,
            AbstractTradeSignalCommitter<T> orderCommitter
    ) {
        this.indicatorSignalService = indicatorSignalService;

        this.decisionMaker = decisionMaker;

        this.orderCommitter = orderCommitter;
    }


    public void execute(String name) throws Exception {

        //1.信号服务
        KeyedStream<Tuple2<SignalGroupKey, List<IndicatorSignal>>, String> symbolGroupSignalStream = indicatorSignalService.getSymbolGroupSignalStream();

//        symbolGroupSignalStream.print();
        //2.决策服务
        DataStream<T> originOrderStream = symbolGroupSignalStream.process(decisionMaker);

        originOrderStream.print();
        //3订单提交服务
        Sink<T> commitSink = orderCommitter.getCommitSink();
        originOrderStream.sinkTo(commitSink).setParallelism(1);

        indicatorSignalService.getEnv().execute(name);
    }

}


package com.helei.tradesignalprocess.support;


import com.helei.constants.trade.KLineInterval;
import com.helei.constants.trade.TradeSide;
import com.helei.dto.trade.*;
import com.helei.dto.indicator.config.MACDConfig;
import com.helei.tradesignalprocess.config.FlinkConfig;
import com.helei.tradesignalprocess.stream.*;
import com.helei.tradesignalprocess.stream.a_klinesource.LocalFileKLineSource;
import com.helei.tradesignalprocess.stream.a_klinesource.RandomKLineSource;
import com.helei.tradesignalprocess.stream.b_indicator.calculater.MACDCalculator;
import com.helei.tradesignalprocess.stream.b_indicator.calculater.PSTCalculator;
import com.helei.tradesignalprocess.stream.c_indicator_signal.IndicatorSignalService;
import com.helei.tradesignalprocess.stream.c_indicator_signal.IndicatorSignalStreamProcessor;
import com.helei.tradesignalprocess.stream.c_indicator_signal.maker.PSTSignalMaker;
import com.helei.tradesignalprocess.stream.d_decision.AbstractDecisionMaker;
import com.helei.tradesignalprocess.stream.b_indicator.calculater.BollCalculator;
import com.helei.dto.indicator.config.BollConfig;
import com.helei.dto.indicator.config.PSTConfig;
import com.helei.tradesignalprocess.stream.c_indicator_signal.maker.AbstractSignalMaker;
import com.helei.tradesignalprocess.stream.c_indicator_signal.maker.BollSignalMaker;
import com.helei.tradesignalprocess.stream.d_decision.PSTBollDecisionMaker;
import com.helei.tradesignalprocess.stream.d_decision.config.PSTBollDecisionConfig_v1;
import com.helei.tradesignalprocess.stream.e_trade_signal.KafkaTradeSignalCommitter;
import org.apache.flink.api.common.functions.OpenContext;
import org.apache.flink.streaming.api.TimerService;
import org.apache.flink.streaming.api.datastream.DataStreamSource;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.Serial;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Set;
import java.util.concurrent.TimeUnit;

public class RandomKLineSourceTest {
    private static final Logger log = LoggerFactory.getLogger(RandomKLineSourceTest.class);
    private static String btcusdt = "btcusdt";

    private static String ethusdt = "ethusdt";

    private static String kLineFileName = "";

    private static StreamExecutionEnvironment env;

    private static StreamExecutionEnvironment env2;

    private static RandomKLineSource randomKLineSource;

    private static LocalFileKLineSource localFileKLineSource;

    @BeforeAll
    public static void before() {
        try {
            env = FlinkConfig.streamExecutionEnvironment();
            randomKLineSource = new RandomKLineSource(btcusdt, Set.of(KLineInterval.m_15),
                    LocalDateTime.of(2020, 10, 29, 15, 38), 2000.0, 19000.0);

            localFileKLineSource = new LocalFileKLineSource(kLineFileName);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    public void testRandomKLineSource() throws Exception {
        DataStreamSource<KLine> streamSource = env.addSource(randomKLineSource);

        streamSource.print();

        env.execute();
        TimeUnit.MINUTES.sleep(1000);
    }

    @Test
    public void testAutoTradeV2() throws Exception {
        PSTConfig pstConfig = new PSTConfig(60, 3, 3);
        BollConfig bollConfig = new BollConfig(15);


        IndicatorSignalService indicatorSignalService = buildTradeSignalService(pstConfig, bollConfig);


        AbstractDecisionMaker<TradeSignal> abstractDecisionMaker = new AbstractDecisionMaker<>("测试用决策生成器") {
            @Serial
            private final static long serialVersionUID = 122142132145213L;

            @Override
            protected TradeSignal decisionAndBuilderOrder(String symbol, List<IndicatorSignal> windowSignal, IndicatorMap indicatorMap) {
//                log.info("收到信号【{}】\n{}", symbol, windowSignal);
                return TradeSignal
                        .builder()
                        .symbol(symbol)
                        .tradeSide(TradeSide.BUY)
                        .targetPrice(BigDecimal.valueOf(windowSignal.getFirst().getTargetPrice()))
                        .stopPrice(BigDecimal.valueOf(windowSignal.getFirst().getStopPrice()))
                        .build();
            }
        };

        KafkaTradeSignalCommitter kafkaOriginOrderCommitter = new KafkaTradeSignalCommitter();


        TradeSignalBuildTask<TradeSignal> tradeSignalBuildTask = new TradeSignalBuildTask<>(
                indicatorSignalService,
                new PSTBollDecisionMaker(new PSTBollDecisionConfig_v1(pstConfig, bollConfig)),
                kafkaOriginOrderCommitter);

        tradeSignalBuildTask.execute("test");
    }

    private IndicatorSignalService buildTradeSignalService(PSTConfig pstConfig, BollConfig bollConfig) {
        return IndicatorSignalService
                .builder(env)
                .addIndicatorSignalProcessor(
                        IndicatorSignalStreamProcessor
                                .builder()
                                .setWindowLengthRationOfKLine(1.0 / 60)
//                                .addKLineSource(randomKLineSource)
                                .addKLineSource(localFileKLineSource)
                                .addIndicator(new PSTCalculator(pstConfig))
                                .addIndicator(new MACDCalculator(new MACDConfig(12, 26, 9)))
                                .addIndicator(new BollCalculator(bollConfig))

                                .addSignalMaker(new BollSignalMaker(bollConfig))
                                .addSignalMaker(new PSTSignalMaker(pstConfig))
//                                .addSignalMaker(new AbstractSignalMaker(true) {
//
//                                    @Override
//                                    public void onOpen(OpenContext openContext) throws Exception {
//
//                                    }
//
//                                    @Override
//                                    protected IndicatorSignal resolveHistoryKLine(KLine kLine, TimerService timerService) throws Exception {
////                        System.out.println(Instant.ofEpochMilli(kLine.getOpenTime()) + " - " + kLine.getIndicators());
//                                        return IndicatorSignal.builder().description("这是一条测试信号1h").name("测试信号1h")
//                                                .kLine(kLine).tradeSide(TradeSide.BUY).targetPrice(1111111111.0).stopPrice(1231231.0).build();
//                                    }
//
//                                    @Override
//                                    protected IndicatorSignal resolveRealTimeKLine(KLine kLine, TimerService timerService) throws Exception {
//                                        return null;
//                                    }
//                                })
                                .build()
                )
                .build();
    }

}
