import request from '@/utils/custom_request'

/**
 * 分页查询浏览器环境
 * @param {page, limit}
 * @returns {*}
 */
export function pageQueryBot({ page, limit, filterMap }) {
  return request({
    url: '/bot/pageQuery',
    method: 'post',
    data: {
      page,
      limit,
      filterMap
    }
  })
}

/**
 * 创建bot
 * @param botId
 * @param botKey
 * @param accountIds
 */
export function createBot({ botId, botKey, accountIds }) {
  return request({
    url: '/bot/create',
    method: 'post',
    data: {
      botId,
      botKey,
      accountIds
    }
  })
}

/**
 * 查询Bot实例
 */
export function pageQueryBotInstanceNetwork({ page, limit, filterMap }) {
  return request({
    url: '/botInstance/pageQuery',
    method: 'post',
    data: {
      page,
      limit,
      filterMap
    }
  })
}
import request from '@/utils/custom_request'

/**
 * 分页查询Bot账户的基本信息
 * @param {page, limit, filterMap}
 * @returns {*}
 */
export function pageQueryAccountContext({ page, limit, filterMap }) {
  return request({
    url: '/accountContext/pageQuery',
    method: 'post',
    data: {
      page,
      limit,
      filterMap
    }
  })
}
export const Bot_JOB_TYPE = {
  LOGIN: 'LOGIN',
  REGISTER: 'REGISTER',
  QUERY_REWARD: 'QUERY_REWARD',
  TIMED_TASK: 'TIMED_TASK',
  ONCE_TASK: 'ONCE_TASK',
  WEB_SOCKET_CONNECT: 'WEB_SOCKET_CONNECT'
}


export const BOT_INSTANCE_STATUS = {
  NEW: 'NEW',
  STOPPED: 'STOPPED',
  RUNNING: 'RUNNING'
}
<template>
  <div>
    <!--    头部搜索、添加、上传 bar-->
    <div class="filter-container clearfix">

      <el-dropdown
        plain
        split-button
        class="filter-item"
        style="margin-right: 5px"
        type="info"
        size="medium"
      >
        展示列
        <el-dropdown-menu slot="dropdown">
          <el-checkbox-group v-model="currentParams.selectedFilterHeader">
            <el-dropdown-item v-for="item in headers">
              <el-checkbox :label="item" disabled />
            </el-dropdown-item>

            <el-dropdown-item v-for="item in currentParams.customHeaders">
              <el-checkbox :label="item" />
            </el-dropdown-item>
          </el-checkbox-group>
        </el-dropdown-menu>
      </el-dropdown>

      <el-select
        v-for="headerName in headers"
        v-model="currentParams.headerFilterFieldValues[headerName]"
        size="medium"
        :placeholder="headerName"
        clearable
        style="width: 90px"
        class="filter-item"
        @clear="currentParams.headerFilterFieldValues[headerName] = undefined"
      >
        <el-option v-for="item in getFieldOptions(headerName)" :key="item" :label="item" :value="item" />
      </el-select>

      <el-button
        v-waves
        size="medium"
        class="filter-item"
        style="margin-left: 10px"
        type="primary"
        icon="el-icon-search"
        @click="handleFilter"
      >
        Search
      </el-button>
      <el-button
        v-if="useImportData"
        size="medium"
        class="filter-item"
        style="margin-left: 10px;"
        type="primary"
        icon="el-icon-plus"
        @click="addBatchRowData"
      >
        Add
      </el-button>
      <el-button
        v-if="useImportData"
        v-waves
        size="medium"
        class="filter-item"
        type="success"
        icon="el-icon-upload"
        @click="handleUpload"
      >
        Upload
      </el-button>

      <el-switch
        v-model="useImportData"
        class="filter-item"
        style="float: right; top: 10px"
        active-text="导入"
        inactive-text="查看"
      />
    </div>

    <!--    表格-->
    <el-table
      :data="filteredTableData"
      border
      stripe
      fit
      highlight-current-row
      style="width: 100%;"
      @selection-change="handleSelectionChange"
    >
      <el-table-column type="selection" width="55" fixed="left" />

      <el-table-column
        v-if="currentParams.customHeaders.indexOf(idField) < 0"
        type="index"
        class-name="status-col"
        style="color: #2ac06d"
        min-width="75"
      />

      <el-table-column v-for="headName in fullHeaders" :label="headName" class-name="status-col" min-width="200">
        <template slot="header">
          {{ headName }}
          <el-badge
            v-if="headers.includes(headName)"
            class="header-badge"
            :value="''"
            :max="99"
            :is-dot="true"
          />
        </template>

        <template slot-scope="scope">
          <div v-if="!currentParams.editLineIndexMap[scope.$index]">{{ scope.row[headName] }}</div>
          <el-input
            v-else
            v-model="scope.row[headName]"
            size="mini"
            placeholder="请输入内容"
          />
        </template>
      </el-table-column>

      <el-table-column label="Status" class-name="status-col" width="75">
        <template slot-scope="{row}">
          <el-button
            v-if="buildRowStatus(row)"
            type="success"
            icon="el-icon-check"
            size="mini"
            circle
          />
          <el-button
            v-else
            type="warning"
            icon="el-icon-close"
            size="mini"
            circle
          />
        </template>
      </el-table-column>

      <el-table-column align="right" width="200" fixed="right">
        <template #header>
          <el-input
            v-model="newHeaderName"
            size="small"
            placeholder="输入新列名"
            style="display: inline-block;width: 60%"
          />
          <el-button type="primary" size="small" @click="addNewHeaderField">
            Add
          </el-button>
        </template>

        <template #default="scope">
          <el-button
            v-if="currentParams.editLineIndexMap[scope.$index]"
            size="mini"
            type="success"
            :loading="currentParams.updatingLineIndexMap[scope.$index]"
            :disabled="currentParams.updatingLineIndexMap[scope.$index]"
            @click="confirmEditRow(scope.$index, scope.row)"
          >
            Confirm
          </el-button>
          <el-button
            v-else
            type="info"
            size="mini"
            @click="handleEdit(scope.$index, scope.row)"
          >
            Edit
          </el-button>

          <el-button
            size="mini"
            type="danger"
            @click="handleDelete(scope.$index, scope.row)"
          >
            Delete
          </el-button>
        </template>
      </el-table-column>
    </el-table>
    <!--      v-show="filteredTableData() !== null && filteredTableData().length >0"-->

    <!--分页条-->
    <pagination
      :total="currentParams.listQuery.total"
      :page.sync="currentParams.listQuery.page"
      :limit.sync="currentParams.listQuery.limit"
      @pagination="pageChangeHandler"
    />

    <!--    添加界面-->
    <dynamic-field-load-from
      :ref="fieldLoadFromRef"
      :field-names="headers"
      :visible="addRowDataFromVisible"
      @batch-data-import="batchDataImportHandler"
    />
  </div>
</template>

<script>
import waves from '@/directive/waves' // waves directive
import Pagination from '@/components/Pagination'
import DynamicFieldLoadFrom from '@/views/custom/account/components/dynamic-field-load-from'
import row from 'element-ui/packages/row'

export default {
  name: 'DynamicAddColTable',
  components: { Pagination, DynamicFieldLoadFrom },
  directives: { waves },
  filters: {},
  props: {
    title: {
      type: String,
      default() {
        return ''
      }
    },
    headers: {
      type: Array,
      default() {
        return []
      }
    },
    idField: {
      type: String,
      default() {
        return 'id'
      }
    },
    batchQueryDataNetwork: {
      type: Function,
      default() {
        return () => {
        }
      }
    },
    uploadDataNetwork: {
      type: Function,
      default() {
        return () => {
        }
      }
    },
    deleteDataNetwork: {
      type: Function,
      default() {
        return () => {
        }
      }
    },
    updateDataNetwork: {
      type: Function,
      default() {
        return () => {
        }
      }
    }
  },
  data() {
    return {
      importData: [],
      data: [],

      newHeaderName: '',
      useImportData: false,
      addRowDataFromVisible: false,

      typedParam: {
        import: {
          filteredTableDataIdxes: new Set(),
          headerFilterFieldValues: {},
          editLineIndexMap: {},
          editLineRowMap: {},
          updatingLineIndexMap: {},
          listQuery: {
            page: 1,
            limit: 20,
            total: 0
          },
          selectedDataList: [],
          customHeaders: [],
          selectedFilterHeader: []
        },
        display: {
          filteredTableDataIdxes: new Set(),
          headerFilterFieldValues: {},
          editLineIndexMap: {},
          editLineRowMap: {},
          updatingLineIndexMap: {},
          listQuery: {
            page: 1,
            limit: 20,
            total: 0
          },
          selectedDataList: [],
          customHeaders: [],
          selectedFilterHeader: []
        }
      }
    }
  },
  computed: {
    row() {
      return row
    },
    fullHeaders() {
      return this.headers.concat(this.currentParams.selectedFilterHeader)
    },
    fieldLoadFromRef() {
      return 'dynamicFieldLoadFrom[' + this.headers + ']'
    },
    currentParams() {
      return this.useImportData ? this.typedParam['import'] : this.typedParam['display']
    },
    currentData() {
      return this.useImportData ? this.importData : this.data
    },
    filteredTableData() {
      const curData = this.currentData

      const res = []
      for (let i = 0; i < curData.length; i++) {
        if (!this.currentParams.filteredTableDataIdxes.has(i)) {
          res.push(curData[i])
        }
      }

      return res
    }
  },
  created() {
    this.queryDisplayData()
  },
  methods: {
    handleDelete(idx, row) {
      if (this.useImportData) {
        this.importData.splice(idx, 1)
      } else {
        this.$confirm('是否删除该行数据?', '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning'
        }).then(() => {
          const network = this.deleteDataNetwork(row)
          if (network instanceof Promise) {
            network
              .then(response => {
                this.$message.success('删除成功')
                // this.currentData.splice(idx, 1)
                this.queryDisplayData()
              })
              .catch(e => {
                this.$message.error('删除失败, ' + e)
              })
          }
        }).catch(() => {
          this.$message({
            type: 'info',
            message: '已取消删除'
          })
        })
      }
    },
    handleEdit(idx, row) {
      this.$set(this.currentParams.editLineIndexMap, idx, true)
      this.$set(this.currentParams.editLineRowMap, idx, JSON.parse(JSON.stringify(row)))
    },
    handleSelectionChange(rows) {
      this.currentParams.selectedDataList = rows
    },
    handleFilter() {
      // 导入，前端筛选，
      this.currentParams.filteredTableDataIdxes.clear()

      const currentData = this.currentData
      for (let i = 0; i < currentData.length; i++) {
        const line = currentData[i]
        let flag = true
        for (const headName of this.fullHeaders) {
          const targetValue = this.currentParams.headerFilterFieldValues[headName]
          const currentValue = line[headName]

          if (targetValue !== undefined && targetValue !== currentValue) {
            flag = false
            break
          }
        }

        if (!flag) this.currentParams.filteredTableDataIdxes.add(i)
      }

      if (!this.useImportData) {
        // 展示，发送请求获取新数据
        this.queryDisplayData()
      }
    },
    handleUpload() {
      let uploadData = this.currentData
      if (this.currentParams.selectedDataList !== null && this.currentParams.selectedDataList.length > 0) {
        uploadData = this.currentParams.selectedDataList
      }
      const uploadDataNetwork = this.uploadDataNetwork(uploadData)
      if (uploadDataNetwork instanceof Promise) {
        uploadDataNetwork
          .then(response => {
            this.$message.success('上传成功')
          })
          .catch(e => {
            this.$message.error('上传失败, ' + e)
          })
      }
    },
    /**
     * 批量添加数据
     * @param payload
     */
    batchDataImportHandler(payload) {
      console.log(payload)
      const newDataArray = payload.filteredData
      const customFields = payload.customFields

      this.importData.push(...newDataArray)

      if (customFields !== undefined && customFields !== null && customFields.length > 0) {
        this.currentParams.customHeaders = [...new Set([...this.currentParams.customHeaders, ...customFields])]
      }
    },
    pageChangeHandler({ page, limit }) {
      this.currentParams.listQuery.page = page
      this.currentParams.listQuery.limit = limit

      if (!this.useImportData) {
        this.queryDisplayData()
      }
    },
    confirmEditRow(index, row) {
      this.$set(this.currentParams.updatingLineIndexMap, index, true)

      if (!this.useImportData) {
        const originRow = this.currentParams.editLineRowMap[index]

        let isRPC = false
        for (const key of Object.keys(row)) {
          if (originRow[key] !== row[key]) {
            isRPC = true
            break
          }
        }

        this.$set(this.currentParams.editLineRowMap, index, row)
        if (isRPC) {
          const network = this.updateDataNetwork(row)
          if (network instanceof Promise) {
            network
              .then(response => {
                this.$message.success('上传成功')
              })
              .catch(e => {
                this.$message.error('上传失败, ' + e)
              })
              .finally(() => {
                this.$set(this.currentParams.editLineIndexMap, index, false)
                this.$set(this.currentParams.updatingLineIndexMap, index, false)
              })
          } else {
            this.$set(this.currentParams.editLineIndexMap, index, false)
            this.$set(this.currentParams.updatingLineIndexMap, index, false)
          }
        } else {
          this.$set(this.currentParams.editLineIndexMap, index, false)
          this.$set(this.currentParams.updatingLineIndexMap, index, false)
        }
      } else {
        this.$set(this.currentParams.editLineIndexMap, index, false)
        this.$set(this.currentParams.updatingLineIndexMap, index, false)
      }
    },
    addNewHeaderField() {
      if (this.newHeaderName === null ||
        this.newHeaderName === undefined ||
        this.newHeaderName === ''
      ) {
        return
      }

      if (this.currentParams.customHeaders.indexOf(this.newHeaderName) === -1 && this.headers.indexOf(this.newHeaderName) === -1) {
        this.currentParams.customHeaders.push(this.newHeaderName)
        this.currentParams.selectedFilterHeader.push(this.newHeaderName)
      }

      this.newHeaderName = ''
    },
    addBatchRowData() {
      this.$refs[this.fieldLoadFromRef].toggleVisible()
    },
    getFieldOptions(headerName) {
      const set = new Set()
      const currentData = this.currentData

      if (currentData === undefined || currentData === null) return {}

      for (const line of currentData) {
        const fieldValue = line[headerName]

        if (fieldValue !== undefined) {
          set.add(fieldValue == null ? 'null' : fieldValue)
        }
      }

      return set
    },
    buildRowStatus(row) {
      return this.headers.every(header => row[header] !== undefined &&
        row[header] !== null && row[header] !== '')
    },
    /**
     * 网络请求获取数据
     */
    queryDisplayData() {
      const display = this.typedParam.display

      this.batchQueryDataNetwork(display.listQuery, display.headerFilterFieldValues, pageInfo => {
        this.data = pageInfo.list

        for (const item of this.data) {
          for (const key of Object.keys(item)) {
            if (this.headers.indexOf(key) === -1 && this.currentParams.customHeaders.indexOf(key) === -1) {
              this.currentParams.customHeaders.push(key)
            }
          }
        }

        display.listQuery.total = pageInfo.total
      })
    }
  }
}
</script>
<template>
  <div class="components-container">

    <el-row :span="24">
      <bot-info-card :bot-info="botInfo" />
    </el-row>

    <el-row :span="24">

      <el-col class="account-selector">

        <div>
          <h3 style="padding: 0 15px">运行账户设置</h3>
          <div class="center">
            <el-input v-model="botKey" style="width: 430px;padding: 0" placeholder="请输入Bot名称" />
          </div>
          <div class="center">
            <el-transfer
              v-model="selectedList"
              style="text-align: left; display: inline-block"
              :titles="['未添加', '已添加']"
              :data="selectionList"
              :format="{
                noChecked: '',
                hasChecked: '${checked}/${total}'
              }"
              filterable
            >
              <span slot-scope="{ option }">{{ option.key }} - {{ option.name }}-{{ option.email }}</span>

              <div slot="left-footer" style=" display: flex;justify-content: center;">
                <el-pagination
                  layout="prev, pager, next"
                  background
                  :page-size="defaultLimit"
                  :total="typedContext[currentType] !== undefined ? typedContext[currentType].total : 0"
                  @current-change="pageChangeHandler"
                />
              </div>

              <div slot="right-footer">
                <el-select
                  v-model="currentType"
                  placeholder=""
                  size="mini"
                  style="display: block"
                  @change="typeChangeHandler"
                >
                  <el-option
                    v-for="(value, key) in typedContext"
                    :key="key"
                    :label="key"
                    :value="key"
                  />
                </el-select>
              </div>
            </el-transfer>
          </div>

          <div class="center">
            <el-button type="success" @click="addBotHandler">
              确定
            </el-button>
          </div>
        </div>
      </el-col>
    </el-row>
  </div>
</template>

<script>
import BotInfoCard from '@/views/custom/bot/bot-config/components/bot-info-card.vue'
import DndList from '@/components/DndList/index.vue'
import LeftRightSelector from '@/views/custom/components/left-right-selector.vue'
import { pageQueryAccountBaseInfo, queryAccountBaseInfoTypedInfo } from '@/api/custom/account-base-info'
import { createBot } from '@/api/custom/bot'
import Index from '@/views/dashboard/admin/components/TodoList/index.vue'

export default {
  name: 'BotConfig',
  components: { Index, LeftRightSelector, DndList, BotInfoCard },
  data() {
    return {
      botId: null,
      botKey: null,
      botInfo: {},
      defaultLimit: 20,
      currentType: null,
      typedContext: {},
      selectionList: [],

      selectedList: [],
      selectedQuery: {
        page: 1,
        limit: 50
      }
    }
  },
  computed: {
    currentPage() {
      const currentTypeContext = this.typedContext[this.currentType]

      if (currentTypeContext === undefined) return 1

      return currentTypeContext.page
    }
  },
  created() {
    // 获取路由参数
    this.botInfo = this.$route.query.botInfo
    this.botId = this.botInfo.id
    this.botKey = this.$route.query.botKey

    document.title += this.botInfo.id

    // 获取账户分类信息
    queryAccountBaseInfoTypedInfo().then(response => {
      const typedInfo = response.data

      for (const info of typedInfo) {
        this.typedContext[info.key] = {
          page: 1,
          limit: this.defaultLimit,
          total: info.value,
          pageDataMap: {}
        }

        this.queryTypedABIPageData(1, this.defaultLimit, info.key)
      }
    })
  },
  methods: {

    calPrintTotal(pageDataMap, start) {
      let printTotal = []
      for (let i = 1; i <= start; i++) {
        printTotal = printTotal.concat(pageDataMap[i])
      }

      return printTotal
    },
    /**
     * 查询account base info
     *
     * @param page
     * @param limit
     * @param type
     */
    queryTypedABIPageData(page, limit, type) {
      // 有缓存，不请求新的数据
      const pageDataMap = this.typedContext[type].pageDataMap
      if (
        pageDataMap !== undefined && pageDataMap !== null &&
        pageDataMap[page] !== undefined && pageDataMap[page] !== null
      ) {
        this.selectionList = this.calPrintTotal(pageDataMap, page)

        return
      }

      // 获取账户信息
      pageQueryAccountBaseInfo({
        page: page,
        limit: limit,
        filterMap: {
          type: type
        }
      }).then(response => {
        const pageInfo = response.data

        pageDataMap[page] = pageInfo.list
        this.selectionList = this.calPrintTotal(pageDataMap, page)
        this.currentType = type

        this.typedContext[type].page = page

        for (const ac of pageDataMap[page]) {
          ac.key = ac.id
        }
        this.typedContext[type].total = pageInfo.total
      })
    },

    pageChangeHandler(page) {
      this.queryTypedABIPageData(page, this.defaultLimit, this.currentType)
    },
    typeChangeHandler(type) {
      this.queryTypedABIPageData(this.currentPage, this.defaultLimit, type)
    },
    addBotHandler() {
      const botKey = this.botKey
      if (botKey === undefined || botKey === null || botKey === '') {
        this.$message.warning('请输入bot名称')
        return
      }

      const botId = this.botId
      if (botId === undefined || botId === null || botId === '') {
        this.$message.error('请关闭页面重新进入')
        return
      }

      this.$confirm('确定创建[' + botKey + ']吗', '提示', {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning'
      }).then(() => {
        createBot({
          botId: botId,
          botKey: botKey,
          accountIds: this.selectedList
        }).then(response => {
          this.$message.success('创建Bot成功')
        })
      }).catch(() => {
        this.$message({
          type: 'info',
          message: '已取消创建'
        })
      })
    }
  }
}
</script>

<style scoped>
.components-container {
  position: relative;
  min-height: 100px;
  background-color: #f0f2f5;
  padding: 10px;
}

.account-selector {
  background-color: #fff;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.15); /* 设置阴影效果 */
  border: 1px solid #e6ebf5;
  border-radius: 10px;
}

.account-selector >>> .el-transfer-panel {
  width: 400px;
  border: 1px solid #e6ebf5;
  border-radius: 4px;
  overflow: hidden;
  background: #FFFFFF;
  display: inline-block;
  vertical-align: middle;
  max-height: 100%;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  position: relative;
}

.account-selector >>> .el-transfer-panel__body {
  height: calc(100% - 50px);
  min-height: 296px;
}

.account-selector >>> .el-transfer-panel__footer {
  margin: 10px auto 0;
  padding: 6px 5px;
}

.center {
  display: flex;
  justify-content: center;
  margin-top: 10px;
}
</style>

<template>
  <div class="mixin-components-container">
    <el-row>
      <el-card class="box-card">
        <div slot="header" class="clearfix">
          <span>Types</span>
        </div>
        <div style="margin-bottom:50px;">
          <el-col :span="4" class="text-center">
            <router-link class="pan-btn blue-btn" to="/documentation/index">
              Depin
            </router-link>
          </el-col>
          <el-col :span="4" class="text-center">
            <router-link class="pan-btn light-blue-btn" to="/icon/index">
              ETH
            </router-link>
          </el-col>
          <el-col :span="4" class="text-center">
            <router-link class="pan-btn pink-btn" to="/excel/export-excel">
              Ai
            </router-link>
          </el-col>
          <el-col :span="4" class="text-center">
            <router-link class="pan-btn green-btn" to="/table/complex-table">
              Daily
            </router-link>
          </el-col>
          <el-col :span="4" class="text-center">
            <router-link class="pan-btn tiffany-btn" to="/example/create">
              SOL
            </router-link>
          </el-col>
          <el-col :span="4" class="text-center">
            <router-link class="pan-btn yellow-btn" to="/theme/index">
              TESTNET
            </router-link>
          </el-col>
        </div>
      </el-card>
    </el-row>

    <div class="bot-info-content">
      <bot-simple-card
        v-for="info in botInfoList"
        :bot-simple-info="info"
      />
    </div>

    <div class="block">
      <el-pagination
        layout="prev, pager, next"
        :total="listQuery.total"
      />
    </div>
  </div>
</template>

<script>
import PanThumb from '@/components/PanThumb'
import MdInput from '@/components/MDinput'
import DropdownMenu from '@/components/Share/DropdownMenu'
import waves from '@/directive/waves/index.js'
import BotSimpleCard from '@/views/custom/bot/bot-market/components/bot-simple-card.vue' // 水波纹指令
import { pageQueryBot } from '@/api/custom/bot'

export default {
  name: 'BotMarket',
  components: {
    BotSimpleCard,
    PanThumb,
    MdInput,
    DropdownMenu
  },
  directives: {
    waves
  },
  data() {
    return {
      listQuery: {
        page: 1,
        limit: 10,
        total: 0
      },
      botInfoList: [
        {
          id: 1,
          name: 'test-bot-1',
          describe: 'bot detailnakjwndjkawndjknwajkdnakjwndjkawndjkawndjanwkjdnakjndjkawndjaw',
          image: 'https://wpimg.wallstcn.com/577965b9-bb9e-4e02-9f0c-095b41417191'
        }
      ]
    }
  },
  created() {
    pageQueryBot({
      page: this.listQuery.page,
      limit: this.listQuery.limit
    }).then(response => {
      const pageInfo = response.data

      if (pageInfo != null) {
        this.listQuery.total = pageInfo.total
        this.botInfoList = pageInfo.list
      } else {
        this.$message.warning('查询bot list失败')
      }
    })
  }
}
</script>

<style scoped>
.bot-info-content{
  padding: 0 25px 0px;
  display: flex;
  justify-content: flex-start;
  flex-wrap: wrap;
  margin-top: 20px;
}
</style>
<template>
  <div class="bot-runtime-display-card">
    <div class="card-header clearfix">
      <div style="display:flex; float: left">
        <el-image class="head-image"/>
        <div style="font-weight: 700;font-size: 16px">
          {{ botInstance.botKey }}
        </div>
      </div>

      <div style="float: right">
        <i class="el-icon-setting icon-button"/>
      </div>
    </div>

    <div class="data-print-line"/>

    <div class="card-detail">

      <div class="card-detail-content">
        <el-tabs tabPosition="bottom">
          <el-tab-pane
            v-for="(jobParam, jobName) in botInstance.botInfo.jobParams"
          >
            <span style="color: #9da3ae;" slot="label"> {{ jobName }}</span>
            <div class="card-detail-content-graph">

            </div>
          </el-tab-pane>
        </el-tabs>
      </div>

      <el-button v-if="botInstance.status === BOT_INSTANCE_STATUS.STOPPED"
                 @click="startBotClickHandler"
                 class="start-button" icon="el-icon-video-play" type="success" plain>
        Start Bot
      </el-button>
      <el-button v-else-if="botInstance.status === BOT_INSTANCE_STATUS.RUNNING"
                 @click="stopBotClickHandler"
                 class="start-button" icon="el-icon-video-pause" type="danger">
        Stop Bot
      </el-button>
      <el-button v-else
                 @click="configBotClickHandler"
                 class="start-button" icon="el-icon-s-operation" type="info" plain>
        Config Bot
      </el-button>
    </div>
  </div>
</template>

<script>

import {BOT_INSTANCE_STATUS} from "@/utils/system-enum";

export default {
  name: 'BotRuntimeDisplayCard',
  computed: {
    BOT_INSTANCE_STATUS() {
      return BOT_INSTANCE_STATUS
    }
  },
  props: {
    botInstance: {
      type: Object,
      default() {
        return {
          botKey: 'TestName',
          status: null
        }
      }
    }
  },
  methods: {
    startBotClickHandler() {
      this.$emit("start-bot", {botId: this.botInstance.botId, botInstance: this.botInstance})
    },
    stopBotClickHandler() {
      this.$emit("stop-bot", {botId: this.botInstance.botId, botInstance: this.botInstance})
    },
    configBotClickHandler() {
      this.$emit("config-bot", {botId: this.botInstance.botId, botInstance: this.botInstance})
    }
  }
}
</script>

<style scoped>
.bot-runtime-display-card {
  width: 416px;
  height: 398px;
  background-color: #202735;
  padding: 24px;

  margin-left: 12px;

  color: #9da3ae;
  border-radius: 10px;
}

.card-header {
  height: 48px;
}

.data-print-line {
  height: 48px;
  margin-top: 16px;

}

.card-detail {
  height: 222px;
  margin-top: 16px;
}

.head-image {
  height: 48px;
  width: 48px;
  margin-right: 8px;
}

.icon-button {
  width: 24px;
  height: 24px;
  color: #9da3ae;
  font-size: 20px;

  cursor: pointer;
}

.icon-button:hover {
  transform: scale(1.2); /* 鼠标悬浮时放大 */
  color: #007BFF; /* 鼠标悬浮时改变颜色 */
}

.card-detail-content {
  height: 184px;
}

.card-detail-content-graph {
  height: 130px;
  padding: 9px;
  background-color: #495060;
}

.start-button {
  width: 368px;
  height: 44px;

  font-size: 16px;
  font-weight: 500;
}
</style>
<template>
  <div class="my-bot">
    <div class="top-tool-bar"/>

    <div class="bot-info-content">


      <bot-runtime-display-card
        v-for="instance in botInstanceList"
        :bot-instance="instance"
      />

    </div>
  </div>

</template>

<script>

import BotRuntimeDisplayCard from '@/views/custom/bot/my-bot/components/bot-runtime-display-card.vue'
import {pageQueryBotInstanceNetwork} from "@/api/custom/bot";

export default {
  name: 'MyBot',
  components: {BotRuntimeDisplayCard},
  data() {
    return {
      botInstanceList: [],
      listQuery: {
        page: 1,
        limit: 9,
        total: 0
      }
    }
  },
  created() {
    // Step 1 查询实例列表
    this.queryAllBotInstance()
  },
  methods: {
    queryAllBotInstance() {
      pageQueryBotInstanceNetwork({
        page: this.listQuery.page,
        limit: this.listQuery.limit
      }).then(response => {
        const pageInfo = response.data
        this.listQuery.total = pageInfo.total
        this.botInstanceList = pageInfo.list
      })
    }
  }
}
</script>

<style scoped>
.my-bot {
  margin-top: 10px;
  background: linear-gradient(to bottom, #324157, #121826);

  padding: 32px;

  min-height: 100vh;
}

.top-tool-bar {
  height: 44px;
  padding: 16px;
}

.bot-info-content {
  display: flex;
  justify-items: flex-start;
}
</style>
