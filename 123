package cn.com.vortexa.script_node.bot;

import cn.com.vortexa.script_node.util.persistence.AccountPersistenceManager;
import cn.com.vortexa.script_node.util.persistence.impl.DBAccountPersistenceManager;
import cn.com.vortexa.common.dto.ACListOptResult;
import cn.com.vortexa.common.dto.BotACJobResult;
import cn.com.vortexa.common.dto.Result;
import cn.com.vortexa.common.dto.job.AutoBotJobParam;
import cn.com.vortexa.common.entity.AccountContext;
import cn.com.vortexa.common.exception.BotInitException;
import cn.hutool.core.util.BooleanUtil;

import com.alibaba.fastjson.JSONArray;

import lombok.Getter;

import java.util.*;
import java.util.concurrent.*;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.stream.Collectors;

import static cn.com.vortexa.common.entity.BotInfo.ACCOUNT_PARAMS_KEY;

public abstract class AccountManageAutoBot extends AbstractAutoBot {

    /**
     * job并发控制信号量， jobName -> semaphore
     */
    private final ConcurrentMap<String, Semaphore> jobCCSemaphoreMap = new ConcurrentHashMap<>();

    @Getter
    private final List<AccountContext> accountContexts = new ArrayList<>();

    @Getter
    private final Map<Integer, List<AccountContext>> acMap = new HashMap<>();

    @Getter
    private final List<AccountContext> uniqueACList = new ArrayList<>();

    /**
     * 持久化管理器
     */
    @Getter
    private AccountPersistenceManager persistenceManager;

    @Override
    protected void doInit() throws BotInitException {
        // Step 1 初始化保存的线程
        this.persistenceManager = new DBAccountPersistenceManager(getBotApi(), getExecutorService());

        this.persistenceManager.init();

        // Step 2 初始化账户
        this.initAccounts();

        acMap.putAll(
                getAccountContexts()
                        .stream()
                        .collect(Collectors.groupingBy(ac ->
                                ac.getAccountBaseInfoId() == null ? -1 : ac.getAccountBaseInfoId())
                        )
        );

        uniqueACList.addAll(acMap.values().stream().map(List::getFirst).toList());
    }

    @Override
    protected void doStop() {
        accountContexts.clear();
        acMap.clear();
        uniqueACList.clear();
        jobCCSemaphoreMap.clear();
    }

    /**
     * 注册账户
     *
     * @return CompletableFuture<Result>
     */
    public abstract CompletableFuture<ACListOptResult> registerAccount();

    /**
     * 登录并获取token
     *
     * @return CompletableFuture<Result>
     */
    public abstract CompletableFuture<ACListOptResult> loginAndTakeTokenAccount();

    /**
     * 更新账户奖励信息
     *
     * @return CompletableFuture<Result>
     */
    public abstract CompletableFuture<ACListOptResult> updateAccountRewordInfo();

    /**
     * 获取jb name列表
     *
     * @return List<String>
     */
    public abstract Set<String> botJobNameList();

    /**
     * 账号被加载后调用
     *
     * @param accountContexts accountContexts
     */
    protected void accountsLoadedHandler(List<AccountContext> accountContexts) {
    }

    protected CompletableFuture<ACListOptResult> uniqueAsyncForACList(
            BiFunction<AccountContext, List<AccountContext>, CompletableFuture<Result>> buildResultFuture,
            BiFunction<AccountContext, BotACJobResult, BotACJobResult> resultHandler,
            String jobName
    ) {

        return asyncForACList(
                new ArrayList<>(uniqueACList),
                accountContext -> buildResultFuture.apply(accountContext, acMap.get(accountContext.getAccountBaseInfoId())),
                resultHandler,
                jobName
        );
    }

    protected CompletableFuture<ACListOptResult> uniqueSyncForACList(
            BiFunction<AccountContext, List<AccountContext>, CompletableFuture<Result>> buildResultFuture,
            BiFunction<AccountContext, BotACJobResult, BotACJobResult> resultHandler,
            String jobName
    ) {

        return syncForACList(
                new ArrayList<>(uniqueACList),
                accountContext -> buildResultFuture.apply(accountContext, acMap.get(accountContext.getAccountBaseInfoId())),
                resultHandler,
                jobName
        );
    }

    /**
     * 遍历账户
     *
     * @param buildResultFuture buildResultFuture   具体执行的方法
     * @param resultHandler     resultHandler   处理结果的方法
     * @return CompletableFuture<ACListOptResult>
     */
    protected CompletableFuture<ACListOptResult> syncForACList(
            Function<AccountContext, CompletableFuture<Result>> buildResultFuture,
            BiFunction<AccountContext, BotACJobResult, BotACJobResult> resultHandler,
            String jobName
    ) {
        return syncForACList(getAccountContexts(), buildResultFuture, resultHandler, jobName);
    }

    /**
     * 异步遍历账户
     *
     * @param buildResultFuture buildResultFuture   具体执行的方法
     * @param resultHandler     resultHandler   处理结果的方法
     * @return CompletableFuture<ACListOptResult>
     */
    protected CompletableFuture<ACListOptResult> asyncForACList(
            Function<AccountContext, CompletableFuture<Result>> buildResultFuture,
            BiFunction<AccountContext, BotACJobResult, BotACJobResult> resultHandler,
            String jobName
    ) {
        return asyncForACList(getAccountContexts(), buildResultFuture, resultHandler, jobName);
    }

    /**
     * 同步遍历账户
     *
     * @param buildResultFuture buildResultFuture   具体执行的方法
     * @param resultHandler     resultHandler   处理结果的方法
     * @return CompletableFuture<ACListOptResult>
     */
    protected CompletableFuture<ACListOptResult> syncForACList(
            List<AccountContext> accountContexts,
            Function<AccountContext, CompletableFuture<Result>> buildResultFuture,
            BiFunction<AccountContext, BotACJobResult, BotACJobResult> resultHandler,
            String jobName
    ) {
        return CompletableFuture.supplyAsync(() -> {
            List<BotACJobResult> results = new ArrayList<>();
            int successCount = 0;

            for (AccountContext accountContext : new HashSet<>(accountContexts)) {
                if (checkAccountContainsParams(accountContext)) {
                    BotACJobResult botACJobResult = new BotACJobResult(
                            getBotInstance().getBotId(),
                            getBotInstance().getBotName(),
                            jobName,
                            accountContext.getId()
                    );

                    CompletableFuture<Result> future = buildResultFuture.apply(accountContext);

                    try {
                        Result result = future.get();
                        if (result.getSuccess()) {
                            successCount++;
                        }
                        botACJobResult = resultHandler.apply(accountContext, botACJobResult.setResult(result));
                        results.add(botACJobResult);
                    } catch (InterruptedException | ExecutionException e) {
                        throw new RuntimeException(e);
                    }
                }
            }

            return ACListOptResult.builder()
                    .botId(getBotInstance().getBotId())
                    .botName(getBotInstance().getBotName())
                    .jobName(jobName)
                    .successCount(successCount)
                    .success(true)
                    .results(results)
                    .build();
        }, getExecutorService());
    }

    /**
     * 异步遍历账户
     *
     * @param buildResultFuture buildResultFuture   具体执行的方法
     * @param resultHandler     resultHandler   处理结果的方法
     * @return CompletableFuture<ACListOptResult>
     */
    protected CompletableFuture<ACListOptResult> asyncForACList(
            List<AccountContext> accountContexts,
            Function<AccountContext, CompletableFuture<Result>> buildResultFuture,
            BiFunction<AccountContext, BotACJobResult, BotACJobResult> resultHandler,
            String jobName
    ) {
        // Step 1 遍历账户，获取执行结果
        List<CompletableFuture<BotACJobResult>> futures = accountContexts.stream()
                .filter(this::checkAccountContainsParams)
                .map(accountContext -> {
                    try {
                        // 获取信号量
                        getCcSemaphore(jobName).acquire();
                    } catch (InterruptedException e) {
                        throw new RuntimeException(e);
                    }

                    BotACJobResult botACJobResult = new BotACJobResult(
                            getBotInstance().getBotId(),
                            getBotInstance().getBotKey(),
                            jobName,
                            accountContext.getId()
                    );
                    CompletableFuture<Result> future;

                    try {
                        future = buildResultFuture.apply(accountContext);
                    } catch (Exception e) {
                        getCcSemaphore(jobName).release();
                        botACJobResult.setErrorMsg(e.getMessage());
                        return CompletableFuture.completedFuture(botACJobResult);
                    }

                    return future.thenApplyAsync(botACJobResult::setResult, getExecutorService())
                            .whenComplete((result, throwable) -> {
                                // 释放信号量
                                getCcSemaphore(jobName).release();
                            });
                }).toList();

        // Step 2 等待执行完成，转换执行结果
        return CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]))
                .thenApplyAsync(unused -> {
                    List<BotACJobResult> results = new ArrayList<>();

                    int success = 0;
                    for (int i = 0; i < futures.size(); i++) {
                        CompletableFuture<BotACJobResult> future = futures.get(i);
                        AccountContext accountContext = accountContexts.get(i);

                        try {
                            BotACJobResult result = future.get();
                            BotACJobResult botACJobResult = resultHandler.apply(accountContext, result);

                            if (BooleanUtil.isTrue(botACJobResult.getSuccess())) {
                                success++;
                            }

                            results.add(botACJobResult);
                        } catch (InterruptedException | ExecutionException e) {
                            String errorMsg = String.format("[%s] %s 获取异步结果发生错误",
                                    accountContext.getId(), accountContext.getSimpleInfo());

                            logger.error(errorMsg, e);

                            results.add(
                                    new BotACJobResult(
                                            getBotInstance().getBotId(),
                                            getBotInstance().getBotKey(),
                                            jobName,
                                            accountContext.getId(),
                                            false,
                                            errorMsg,
                                            null
                                    )
                            );
                        }
                    }

                    return ACListOptResult.builder()
                            .botId(getBotInstance().getBotId())
                            .botName(getBotInstance().getBotKey())
                            .jobName(jobName)
                            .successCount(success)
                            .success(true)
                            .results(results)
                            .build();
                });
    }

    /**
     * 检查账户是否含有指定参数
     *
     * @param accountContext accountContext
     * @return boolean
     */
    protected boolean checkAccountContainsParams(AccountContext accountContext) {
        // 过滤掉没有账户需要参数的
        Object o = getBotInstance().getParams().get(ACCOUNT_PARAMS_KEY);
        // 使用的json序列化进db，反序列化得到的是JsonArray
        if (o instanceof JSONArray jsonArray) {
            for (Object obj : jsonArray) {
                String key = (String) obj;
                if (accountContext.getParam(key) == null) {
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * 初始化账号方法
     */
    public void initAccounts() throws BotInitException {
        Integer botId = getBotInstance().getBotId();

        try {
            this.accountContexts.clear();

            logger.info("开始加载账户数据");
            // Step 1 获取持久化的
            List<AccountContext> accountContexts = persistenceManager
                    .loadAccountContexts(botId, getAutoBotConfig().getBotKey());

            // Step 2 没有保存的数据
            if (accountContexts == null || accountContexts.isEmpty()) {
                logger.warn("没有账户数据");
            } else {
                logger.info("使用历史账户数据, 共:" + accountContexts.size());

                // Step 3 加载到bot (字段修改监听)
                registerAccountsInBot(accountContexts);

                accountsLoadedHandler(accountContexts);

                this.accountContexts.addAll(accountContexts);
            }
        } catch (Exception e) {
            throw new BotInitException("初始化账户发生错误", e);
        }
    }

    /**
     * 将账户加载到bot， 会注册监听，当属性发生改变时自动刷入磁盘
     *
     * @param accountContexts accountContexts
     */
    private void registerAccountsInBot(List<AccountContext> accountContexts) {
        persistenceManager.registerPersistenceListener(accountContexts);
    }

    /**
     * 获取并发控制的信号量
     *
     * @param jobName jobName
     * @return Semaphore
     */
    private Semaphore getCcSemaphore(String jobName) {
        return jobCCSemaphoreMap.computeIfAbsent(jobName, key -> {
            AutoBotJobParam autoBotJobParam = getJobParam(key);
            if (autoBotJobParam == null) {
                return new Semaphore(getRequestConcurrentCount());
            }
            return new Semaphore(autoBotJobParam.getConcurrentCount());
        });
    }

}
package cn.com.vortexa.script_node.bot;

import cn.com.vortexa.script_node.anno.BotApplication;
import cn.com.vortexa.script_node.anno.BotMethod;
import cn.com.vortexa.script_node.websocket.AccountWSClientBuilder;
import cn.com.vortexa.script_node.websocket.BaseBotWSClient;
import cn.com.vortexa.script_node.websocket.WebSocketClientLauncher;
import cn.com.vortexa.common.constants.BotJobType;
import cn.com.vortexa.script_node.constants.MapConfigKey;
import cn.com.vortexa.common.dto.ACListOptResult;
import cn.com.vortexa.common.dto.Result;
import cn.com.vortexa.common.dto.config.AutoBotConfig;
import cn.com.vortexa.common.entity.AccountContext;
import cn.com.vortexa.common.entity.BotInfo;
import cn.com.vortexa.common.exception.BotMethodFormatException;
import cn.com.vortexa.common.exception.BotMethodInvokeException;
import cn.com.vortexa.common.exception.BotInitException;
import cn.com.vortexa.script_node.dto.job.AutoBotJobRuntimeParam;
import cn.hutool.core.util.BooleanUtil;
import cn.hutool.core.util.StrUtil;

import com.alibaba.fastjson.JSONArray;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;

import org.jetbrains.annotations.NotNull;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.*;
import java.util.concurrent.*;

import static cn.com.vortexa.common.entity.BotInfo.ACCOUNT_PARAMS_KEY;
import static cn.com.vortexa.common.entity.BotInfo.CONFIG_PARAMS_KEY;

@Slf4j
public abstract class AnnoDriveAutoBot<T extends JobInvokeAutoBot> extends JobInvokeAutoBot {

    /**
     * ws client 启动器
     */
    private final WebSocketClientLauncher webSocketClientLauncher = new WebSocketClientLauncher(this);

    /**
     * 注册方法
     */
    @Getter
    private Method registerMethod;

    /**
     * 登录方法
     */
    @Getter
    private Method loginMethod;

    /**
     * 奖励更新方法
     */
    @Getter
    private Method updateRewordMethod;

    /**
     * 构建bot info， 会解析注解查询db，给上层父类调用
     *
     * @return BotInfo
     */
    @Override
    protected BotInfo buildBotInfo() throws BotInitException {
        // 解析bot 基本信息
        try {
            BotApplication annotation = getInstance().getClass().getAnnotation(BotApplication.class);

            if (annotation != null) {
                String botName = annotation.name();
                if (StrUtil.isBlank(botName)) {
                    throw new IllegalArgumentException("bot name 不能为空");
                }

                //  解析bot 自定义配置, 看是否有满足的
                AutoBotConfig botConfig = getAutoBotConfig();
                Map<String, Object> customConfig = botConfig.getCustomConfig();
                for (String key : annotation.configParams()) {
                    if (!customConfig.containsKey(key)) {
                        throw new IllegalArgumentException("缺乏Bot必要参数[%s]".formatted(key));
                    }
                }

                BotInfo botInfo = null;

                // 查询是否存在botKey的bot
                Map<String, Object> query = new HashMap<>();
                query.put("name", botName);
                List<BotInfo> dbBotInfoList = getBotApi().getBotInfoRPC().conditionQueryRPC(query);

                // 查询bot是否存在，不存在则创建
                if (dbBotInfoList == null || dbBotInfoList.isEmpty()) {
                    logger.warn("不存在bot info, 自动创建...");
                    botInfo = generateFromAnno(annotation);
                } else {
                    botInfo = dbBotInfoList.getFirst();
                    botInfo.fixMapValueType();
                }
                return botInfo;
            } else {
                throw new IllegalArgumentException("bot 应该带有 @BotApplication注解");
            }
        } catch (Exception e) {
            throw new BotInitException(e);
        }
    }

    @Override
    protected void resolveBotJobMethod() {
        // 解析bot job 参数

        // Step 1 遍历方法
        for (Method method : getClass().getDeclaredMethods()) {
            method.setAccessible(true);

            // Step 2 找到方法中带有BotMethod注解的
            if (method.isAnnotationPresent(BotMethod.class)) {
                BotMethod botJobMethod = method.getAnnotation(BotMethod.class);

                // Step 3 根据BotMethod注解 的jobType，方法分类
                switch (botJobMethod.jobType()) {
                    case REGISTER -> registerMethodHandler(method, botJobMethod);
                    case LOGIN -> loginMethodHandler(method, botJobMethod);
                    case QUERY_REWARD -> queryRewardMethodHandler(method, botJobMethod);
                    case ONCE_TASK, TIMED_TASK -> timedTaskMethodHandler(method, botJobMethod);
                    case WEB_SOCKET_CONNECT -> webSocketConnectMethodHandler(method, botJobMethod);
                }
            }
        }
    }

    /**
     * 注册type账号
     *
     * @return String
     */
    @Override
    public CompletableFuture<ACListOptResult> registerAccount() {
        if (registerMethod == null) {
            return CompletableFuture.completedFuture(ACListOptResult.fail(
                    getBotInstance().getBotId(),
                    getBotInstance().getBotName(),
                    BotJobType.REGISTER.name(),
                    "未找到注册方法"
            ));
        }
        return uniqueAsyncForACList(
                (accountContext, accountContexts) -> {
                    if (BooleanUtil.isTrue(accountContext.isSignUp())) {
                        // 账户注册过，
                        String errorMsg = String.format("[%s]账户[%s]-email[%s]注册过", accountContext.getId(),
                                accountContext.getName(),
                                accountContext.getAccountBaseInfo().getEmail());

                        log.warn(errorMsg);

                        return CompletableFuture.completedFuture(Result.fail(errorMsg));
                    } else if (registerMethod != null) {
                        // 调用注册方法注册
                        return invokeBotMethod(
                                registerMethod,
                                accountContext,
                                accountContexts,
                                getAutoBotConfig().getConfig(MapConfigKey.INVITE_CODE_KEY)
                        ).thenApplyAsync(result -> {
                            if (result.getSuccess()) {
                                for (AccountContext ac : accountContexts) {
                                    AccountContext.signUpSuccess(ac);
                                }
                            }
                            return result;
                        });
                    } else {
                        return CompletableFuture.completedFuture(Result.fail("未知错误"));
                    }
                },
                (accountContext, result) -> {
                    // 登录成功
                    if (BooleanUtil.isTrue(result.getSuccess())) {
                        //注册成功
                        AccountContext.signUpSuccess(accountContext);
                    }
                    return result;
                },
                BotJobType.REGISTER.name()
        );
    }

    @Override
    protected void doStop() {
        registerMethod = null;
        loginMethod = null;
        updateRewordMethod = null;
        webSocketClientLauncher.clear();
        super.doStop();
    }

    /**
     * 获取账号的token
     *
     * @return String
     */
    @Override
    public CompletableFuture<ACListOptResult> loginAndTakeTokenAccount() {
        if (loginMethod == null) {
            return CompletableFuture.completedFuture(ACListOptResult.fail(
                    getBotInstance().getBotId(),
                    getBotInstance().getBotName(),
                    BotJobType.LOGIN.name(),
                    "未找到登录方法"
            ));
        }

        return asyncForACList(
                accountContext -> invokeBotMethod(
                        loginMethod,
                        accountContext
                ),
                (accountContext, result) -> {
                    // 登录成功
                    if (BooleanUtil.isTrue(result.getSuccess())) {
                        String token = result.getData() == null ? null :
                                (result.getData() instanceof String ? (String) result.getData() : null);

                        // token不为空，设置到accountContext里
                        if (StrUtil.isNotBlank(token)) {
                            accountContext.setParam(MapConfigKey.TOKEN_KEY, token);
                        } else {
                            log.debug("账号[{}]-[{}]token为空", accountContext.getId(), accountContext.getName());
                        }
                    }
                    return result;
                },
                BotJobType.LOGIN.name()
        );
    }

    @Override
    public CompletableFuture<ACListOptResult> updateAccountRewordInfo() {
        if (updateRewordMethod == null) {
            return CompletableFuture.completedFuture(ACListOptResult.fail(
                    getBotInstance().getBotId(),
                    getBotInstance().getBotName(),
                    BotJobType.QUERY_REWARD.name(),
                    "未找到奖励查询方法"
            ));
        }

        return asyncForACList(
                getUniqueACList(),
                accountContext -> invokeBotMethod(
                        updateRewordMethod,
                        accountContext,
                        getAcMap().get(accountContext.getAccountBaseInfoId())
                ),
                (accountContext, result) -> result,
                BotJobType.QUERY_REWARD.name()
        );
    }

    @Override
    public Set<String> botJobNameList() {
        return getJobParams().keySet();
    }

    protected abstract T getInstance();

    /**
     * 注册方法处理器
     *
     * @param method       method
     * @param botJobMethod botJobMethod
     */
    private void registerMethodHandler(Method method, BotMethod botJobMethod) {
        logger.debug("add register method");
        if (method.getReturnType() == Result.class
                && method.getParameterCount() == 3
                && method.getParameters()[0].getType() == AccountContext.class
                && method.getParameters()[1].getType() == List.class
                && method.getParameters()[2].getType() == String.class) {

            if (this.registerMethod == null) {
                this.registerMethod = method;
                this.addBasicJob(BotJobType.REGISTER);

                registryJobInBot(
                        getInstance(),
                        method,
                        null,
                        botJobMethod
                );
            } else {
                throw new BotMethodFormatException("注册方法只能有一个");
            }
        } else {
            throw new BotMethodFormatException("注册方法错误, " +
                    "应为 Result methodName(AccountContext accountContext, List<AccountContext> sameAccountBaseInfoIdLists, String inviteCode)");
        }
    }

    /**
     * 登录方法处理器
     *
     * @param method       method
     * @param botJobMethod botJobMethod
     */
    private void loginMethodHandler(Method method, BotMethod botJobMethod) {
        logger.debug("add login method");
        if (method.getReturnType() == Result.class
                && method.getParameterCount() == 1
                && method.getParameters()[0].getType() == AccountContext.class
        ) {

            if (this.loginMethod == null) {
                this.loginMethod = method;
                this.addBasicJob(BotJobType.LOGIN);

                registryJobInBot(
                        getInstance(),
                        method,
                        null,
                        botJobMethod
                );
            } else {
                throw new BotMethodFormatException("登录方法只能有一个");
            }
        } else {
            throw new BotMethodFormatException("登录方法错误, " +
                    "应为 Result methodName(AccountContext ac");
        }
    }

    /**
     * 奖励查询方法处理器
     *
     * @param method       method
     * @param botJobMethod botJobMethod
     */
    private void queryRewardMethodHandler(Method method, BotMethod botJobMethod) {
        logger.debug("add reword query method");
        if (method.getReturnType() == Result.class
                && method.getParameterCount() == 2
                && method.getParameters()[0].getType() == AccountContext.class
                && method.getParameters()[1].getType() == List.class
        ) {

            if (this.updateRewordMethod == null) {
                this.updateRewordMethod = method;
            } else {
                throw new BotMethodFormatException("收益查询方法只能有一个");
            }

            registryJobInBot(
                    getInstance(),
                    method,
                    null,
                    botJobMethod
            );
        } else {
            throw new BotMethodFormatException("收益查询方法错误, " +
                    "应为 Result methodName(AccountContext ac, List<AccountContext> sameAccountBaseInfoIdLists)");
        }
    }

    /**
     * 定时任务方法处理器
     *
     * @param method       method
     * @param botJobMethod botJobMethod
     */
    private void timedTaskMethodHandler(Method method, BotMethod botJobMethod) {
        logger.debug("add [%s] method".formatted(botJobMethod));

        if (method.getParameterCount() > 2
                || method.getParameterCount() < 1
                || method.getParameters()[0].getType() != AccountContext.class
                || (method.getParameterCount() == 2 && method.getParameters()[1].getType() != List.class)
        ) {
            throw new BotMethodFormatException("定时任务方法错误, " +
                    "应为 void methodName(AccountContext ac) 或 " +
                    "void methodName(AccountContext exampleAC, List<AccountContext> sameABIIdList) ");
        }

        registryJobInBot(
                getInstance(),
                method,
                null,
                botJobMethod
        );
    }

    /**
     * Web socket 方法处理器
     *
     * @param method           method
     * @param botJobMethodAnno botJobMethodAnno
     */
    private void webSocketConnectMethodHandler(Method method, BotMethod botJobMethodAnno) {
        logger.debug("add ws [%s] method".formatted(botJobMethodAnno));
        Class<?> returnType = method.getReturnType();

        // 检查方法是否符合要求
        if (cn.com.vortexa.script_node.websocket.BaseBotWSClient.class.isAssignableFrom(returnType)
                && method.getParameterCount() == 1
                && method.getParameters()[0].getType() == AccountContext.class
        ) {
            try {
                // 符合要求，添加到jobMap
                String jobName = registryJobInBot(
                        webSocketClientLauncher,
                        WebSocketClientLauncher.lanuchMethod,
                        null,
                        botJobMethodAnno
                );

                AutoBotJobRuntimeParam runtimeParam = getJobRuntimeParamMap().get(jobName);

                if (runtimeParam != null) {
                    // 添加额外参数
                    runtimeParam.setExtraParams(new Object[]{getJobParam(jobName), (AccountWSClientBuilder) accountContext -> {
                        Object invoke = method.invoke(getInstance(), accountContext);
                        return (BaseBotWSClient<?>) invoke;
                    }});
                }

            } catch (Exception e) {
                throw new BotMethodFormatException(e);
            }
        } else {
            throw new BotMethodFormatException(
                    "websocket 方法错误, 应为 BotWebSocketContext<?,?> methodName(AccountContext)");
        }
    }

    /**
     * 运行bot method
     *
     * @param method method
     * @param args   args
     * @return CompletableFuture<R>
     */
    private @NotNull CompletableFuture<Result> invokeBotMethod(Method method, Object... args) {
        return CompletableFuture.supplyAsync(() -> {
            try {
                return (Result) method.invoke(this, args);
            } catch (IllegalAccessException | InvocationTargetException e) {
                throw new BotMethodInvokeException(String.format(
                        "执行[%s]-[%s]方法发生异常",
                        getBotInstance().getBotKey(),
                        method.getName()
                ), e);
            }
        }, getExecutorService());
    }

    protected BotInfo generateFromAnno(BotApplication annotation) {
        BotInfo botInfo = new BotInfo();
        botInfo.setName(annotation.name());
        botInfo.setDescription(annotation.describe());
        botInfo.setImage(annotation.image());
        botInfo.setLimitProjectIds(Arrays.toString(annotation.limitProjectIds()));
        botInfo.getParams()
                .put(CONFIG_PARAMS_KEY, JSONArray.parseArray(JSONArray.toJSONString(annotation.configParams())));
        botInfo.getParams()
                .put(ACCOUNT_PARAMS_KEY, JSONArray.parseArray(JSONArray.toJSONString(annotation.accountParams())));

        return botInfo;
    }
}
package cn.com.vortexa.script_node.bot;

import cn.com.vortexa.common.exception.BotStatusException;
import cn.com.vortexa.common.dto.config.AutoBotConfig;
import cn.com.vortexa.script_node.constants.BotStatus;
import cn.com.vortexa.script_node.service.BotApi;
import cn.com.vortexa.common.exception.BotInitException;
import cn.com.vortexa.common.exception.BotStartException;
import cn.hutool.core.util.BooleanUtil;
import cn.hutool.core.util.StrUtil;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;

import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * @param <T>
 */
@Slf4j
@Setter
public abstract class AutoLaunchBot<T extends AnnoDriveAutoBot<T>> extends AnnoDriveAutoBot<T> {

    private BiConsumer<BotStatus, BotStatus> botStatusChangeHandler;
    @Getter
    private String botName;
    @Getter
    private String botKey;

    @Override
    public synchronized void updateState(BotStatus newStatus) throws BotStatusException {
        BotStatus oldStatus = getStatus();
        super.updateState(newStatus);

        if (botStatusChangeHandler != null) {
            try {
                botStatusChangeHandler.accept(oldStatus, newStatus);
            } catch (Exception e) {
                log.error("bot state change handle error", e);
            }
        }
    }

    @Override
    protected final void doStop() {
        super.doStop();
        botStopped();
    }

    /**
     * 启动Bot
     *
     * @param botConfig botConfig
     * @param botApi botApi
     * @throws BotStartException BotStartException
     * @throws BotInitException BotInitException
     */
    public void launch(AutoBotConfig botConfig, BotApi botApi, Function<AutoLaunchBot<?>, Boolean> initHandler)
        throws BotStartException, BotInitException {
        String botKey = botConfig.getBotKey();
        if (StrUtil.isBlank(botKey)) {
            throw new BotStartException("botKey is empty");
        }
        T instance = getInstance();

        // 初始化
        instance.init(botApi, botConfig);

        instance.updateState(BotStatus.STARTING);
        if (BooleanUtil.isTrue(initHandler.apply(this))) {
            try {
                botInitialized(botConfig, botApi);
                instance.updateState(BotStatus.RUNNING);
            } catch (Exception e) {
                log.error("bot init error", e);
                instance.updateState(BotStatus.SHUTDOWN);
            }
        } else {
            logger.error("bot start cancel by init");
            instance.updateState(BotStatus.SHUTDOWN);
        }
    }

    /**
     * bot初始化时调用
     *
     * @param botConfig botConfig
     * @param botApi botApi
     */
    protected abstract void botInitialized(AutoBotConfig botConfig, BotApi botApi);

    /**
     * bot stop时调用
     */
    protected void botStopped() {

    }
}
package cn.com.vortexa.script_node.bot;

import cn.com.vortexa.script_node.anno.BotMethod;
import cn.com.vortexa.script_node.anno.BotWSMethodConfig;
import cn.com.vortexa.common.constants.BotJobType;
import cn.com.vortexa.common.dto.ACListOptResult;
import cn.com.vortexa.common.dto.BotACJobResult;
import cn.com.vortexa.common.dto.Result;
import cn.com.vortexa.common.dto.job.AutoBotJobParam;
import cn.com.vortexa.common.dto.job.AutoBotJobWSParam;
import cn.com.vortexa.common.entity.AccountContext;
import cn.com.vortexa.job.core.AutoBotJobInvoker;
import cn.com.vortexa.script_node.dto.job.AutoBotJobRuntimeParam;
import cn.hutool.core.util.BooleanUtil;
import cn.hutool.core.util.StrUtil;
import lombok.Getter;
import org.jetbrains.annotations.NotNull;
import org.quartz.CronExpression;
import org.quartz.JobKey;

import java.lang.reflect.Method;
import java.text.ParseException;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;


import static cn.com.vortexa.common.constants.BotJobType.ACCOUNT_SPLIT_JOB;
import static cn.com.vortexa.common.dto.job.AutoBotJobParam.START_AT;

@Getter
public abstract class JobInvokeAutoBot extends AccountManageAutoBot implements AutoBotJobInvoker {

    private final Map<String, AutoBotJobRuntimeParam> jobRuntimeParamMap = new ConcurrentHashMap<>();

    private final Random random = new Random();

    @Override
    public void invokeJob(JobKey jobKey, AutoBotJobParam jobParam) {
        String jobName = jobKey.getName();

        // Step 1 获取运行时参数
        AutoBotJobRuntimeParam runtimeParam = jobRuntimeParamMap.get(jobName);

        // 账户拆分任务,不需要遍历账户列表
        if (ACCOUNT_SPLIT_JOB.equals(jobParam.getJobType())) {
            runtimeParam = jobRuntimeParamMap.get(jobKey.getGroup());
            invokeAccountSplitJob(jobKey, jobParam, runtimeParam);
            return;
        }

        // 动态触发器
        // 遍历账户，生成新的一些一次性任务执行
        if (BooleanUtil.isTrue(jobParam.getDynamicTrigger())) {
            splitJobByAccount(jobParam, jobName);
            return;
        }

        // Step 2 调用执行方法
        logger.info("开始执行[%s]定时任务".formatted(jobName));

        CompletableFuture<ACListOptResult> future = null;
        if (BooleanUtil.isTrue(jobParam.getUniqueAccount())) {
            future = uniqueForEachAccount(runtimeParam, jobName, jobParam, this::uniqueInvoke);
        } else {
            future = normalForEachAccount(runtimeParam, jobName, jobParam, this::normalInvoke);
        }

        acListOptResultHandler(future);


        logger.info("[%s]定时任务执行完毕".formatted(jobName));
    }

    @Override
    protected void doStop() {
        jobRuntimeParamMap.clear();
        super.doStop();
    }

    /**
     * 将Job注册到Bot中
     *
     * @param method           方法
     * @param botJobMethodAnno 方法上的BotMethod注解
     */
    public String registryJobInBot(
            Object invokeObj,
            Method method,
            Object[] extraParams,
            BotMethod botJobMethodAnno
    ) {
        AutoBotJobParam autoBotJobParam = null;

        try {
            Integer intervalInSecond = null;
            CronExpression cronExpression = null;

            String jobName = StrUtil.isBlank(botJobMethodAnno.jobName()) ? method.getName() : botJobMethodAnno.jobName();

            // Step 1 判断合法性
            if (botJobMethodAnno.intervalInSecond() != 0) {
                intervalInSecond = botJobMethodAnno.intervalInSecond();
            } else if (StrUtil.isNotBlank(botJobMethodAnno.cronExpression())) {
                cronExpression = new CronExpression(botJobMethodAnno.cronExpression());
                logger.info("%s cronExpression:[%s]".formatted(jobName, cronExpression.getCronExpression()));
            } else if (
                    botJobMethodAnno.jobType() != BotJobType.ONCE_TASK
                            && botJobMethodAnno.jobType() != BotJobType.REGISTER
                            && botJobMethodAnno.jobType() != BotJobType.LOGIN
            ) {
                throw new IllegalArgumentException("定时任务需设置时间间隔或cron表达式");
            }

            // Step 2 设置job运行时参数
            getJobRuntimeParamMap().put(
                    jobName,
                    AutoBotJobRuntimeParam
                            .builder()
                            .target(invokeObj)
                            .method(method)
                            .extraParams(extraParams)
                            .build()
            );

            // Step 3 构建job task参数
            autoBotJobParam = AutoBotJobParam
                    .builder()
                    .jobName(jobName)
                    .jobType(botJobMethodAnno.jobType())
                    .description(botJobMethodAnno.description())
                    .cronExpression(botJobMethodAnno.cronExpression())
                    .intervalInSecond(intervalInSecond)
                    .concurrentCount(botJobMethodAnno.concurrentCount())
                    .autoBotJobWSParam(convertWSConfigParam(botJobMethodAnno.bowWsConfig()))
                    .uniqueAccount(botJobMethodAnno.uniqueAccount())
                    .dynamicTrigger(botJobMethodAnno.dynamicTrigger())
                    .dynamicTimeWindowMinute(botJobMethodAnno.dynamicTimeWindowMinute())
                    .syncExecute(botJobMethodAnno.syncExecute())
                    .build();

            // Step 4 设置
            setJobParam(jobName, autoBotJobParam);

            getBotApi().getBotJobService().registerJobInvoker(new JobKey(jobName, getAutoBotConfig().getBotKey()), this);

            return jobName;
        } catch (ParseException e) {
            throw new IllegalArgumentException(
                    String.format("[%s]-[%s]BotJobMethod上错误的cron表达式[%s]",
                            getBotInstance().getBotKey(), method.getName(), botJobMethodAnno.cronExpression()),
                    e
            );
        }
    }

    /**
     * 开始任务
     *
     * @param jobName jobName
     * @return BotACJobResult
     */
    public BotACJobResult startBotJob(String jobName) {
        return getBotApi().getBotJobService().startJob(
                getAutoBotConfig().getBotKey(),
                jobName,
                getJobParam(jobName),
                getInstance()
        );
    }


    /**
     * 根据账户拆分job
     *
     * @param param   param
     * @param jobName jobName
     */
    private void splitJobByAccount(AutoBotJobParam param, String jobName) {
        if (BooleanUtil.isTrue(param.getUniqueAccount())) {
            uniqueAsyncForACList(
                    (accountContext, accountContexts) -> buildNewJob(param, accountContext),
                    (accountContext, result) -> result,
                    jobName
            );
        } else {
            asyncForACList(
                    (accountContext) -> buildNewJob(param, accountContext),
                    (accountContext, result) -> result,
                    jobName
            );
        }
    }

    /**
     * 运行拆分的job
     *
     * @param jobKey       jobKey
     * @param param        param
     * @param runtimeParam runtimeParam
     */
    private void invokeAccountSplitJob(JobKey jobKey, AutoBotJobParam param, AutoBotJobRuntimeParam runtimeParam) {
        Integer acId = Integer.parseInt(jobKey.getName());

        List<AccountContext> list = getAcMap().get(acId);

        if (list.isEmpty()) {
            throw new IllegalArgumentException("不存在bot account " + acId);
        } else {
            AccountContext accountContext = list.getFirst();

            if (BooleanUtil.isTrue(param.getUniqueAccount())) {
                uniqueInvoke(accountContext, list, runtimeParam.getExtraParams(), runtimeParam.getMethod(), runtimeParam.getTarget());
            } else {
                normalInvoke(accountContext, list, runtimeParam.getExtraParams(), runtimeParam.getMethod(), runtimeParam.getTarget());
            }
        }
    }

    /**
     * 普通账户遍历处理
     *
     * @param runtimeParam runtimeParam
     * @param jobName      jobName
     * @param jobParam     jobParam
     * @return CompletableFuture<ACListOptResult>
     */
    private CompletableFuture<ACListOptResult> normalForEachAccount(
            AutoBotJobRuntimeParam runtimeParam,
            String jobName,
            AutoBotJobParam jobParam,
            AccountJobMethodInvokeHandler handler
    ) {
        Object[] extraParams = runtimeParam.getExtraParams();
        Method jobMethod = runtimeParam.getMethod();
        Object invokeObj = runtimeParam.getTarget();

        if (BooleanUtil.isTrue(jobParam.getSyncExecute())) {
            return syncForACList(
                    accountContext -> handler.invoke(accountContext, null, extraParams, jobMethod, invokeObj),
                    (accountContext, result) -> result,
                    jobName
            );
        } else {
            return asyncForACList(
                    accountContext -> handler.invoke(accountContext, null, extraParams, jobMethod, invokeObj),
                    (accountContext, result) -> result,
                    jobName
            );
        }
    }

    /**
     * 独有账户遍历处理
     *
     * @param runtimeParam runtimeParam
     * @param jobName      jobName
     * @param jobParam     jobParam
     * @return CompletableFuture<ACListOptResult>
     */
    private CompletableFuture<ACListOptResult> uniqueForEachAccount(AutoBotJobRuntimeParam runtimeParam, String jobName, AutoBotJobParam jobParam, AccountJobMethodInvokeHandler handler) {
        Object[] extraParams = runtimeParam.getExtraParams();
        Method jobMethod = runtimeParam.getMethod();
        Object invokeObj = runtimeParam.getTarget();

        if (BooleanUtil.isTrue(jobParam.getSyncExecute())) {
            return uniqueSyncForACList(
                    (accountContext, accountContexts) -> handler.invoke(accountContext, accountContexts, extraParams, jobMethod, invokeObj),
                    (accountContext, result) -> result,
                    jobName
            );
        } else {
            return uniqueAsyncForACList(
                    (accountContext, accountContexts) -> handler.invoke(accountContext, accountContexts, extraParams, jobMethod, invokeObj),
                    (accountContext, result) -> result,
                    jobName
            );
        }
    }


    private @NotNull CompletableFuture<Result> normalInvoke(AccountContext accountContext, List<AccountContext> accountContexts, Object[] extraParams, Method jobMethod, Object invokeObj) {

        return CompletableFuture.supplyAsync(() -> {
            try {
                // 封装参数
                Object[] params;
                if (extraParams == null) {
                    params = new Object[]{accountContext};
                } else {
                    params = new Object[1 + extraParams.length];
                    params[0] = accountContext;
                    System.arraycopy(extraParams, 0, params, 1, extraParams.length);
                }

                // 调用执行的job method
                jobMethod.setAccessible(true);
                Object invoke = jobMethod.invoke(invokeObj, params);
                return Result.ok(invoke);
            } catch (Exception e) {
                logger.error("执行定时任务发生异常", e);
                return Result.fail("执行定时任务发生异常" + e.getCause().getMessage());
            }
        }, getExecutorService());
    }

    private @NotNull CompletableFuture<Result> uniqueInvoke(AccountContext accountContext, List<AccountContext> accountContexts, Object[] extraParams, Method jobMethod, Object invokeObj) {
        return CompletableFuture.supplyAsync(() -> {
            try {
                // 封装参数
                Object[] params;
                if (extraParams == null) {
                    params = new Object[]{accountContext, accountContexts};
                } else {
                    params = new Object[2 + extraParams.length];
                    params[0] = accountContext;
                    params[1] = accountContexts;
                    System.arraycopy(extraParams, 0, params, 1, extraParams.length);
                }

                // 调用执行的job method
                jobMethod.setAccessible(true);
                Object invoke = jobMethod.invoke(invokeObj, params);
                return Result.ok(invoke);
            } catch (Exception e) {
                logger.error("执行定时任务发生异常", e);
                return Result.fail("执行定时任务发生异常" + e.getCause().getMessage());
            }
        });
    }


    /**
     * 根据account context构建新的job
     *
     * @param param          param
     * @param accountContext accountContext
     * @return CompletableFuture<Result>
     */
    private @NotNull CompletableFuture<Result> buildNewJob(
            AutoBotJobParam param,
            AccountContext accountContext
    ) {
        return CompletableFuture.supplyAsync(() -> {
            // Step 1 计算开始时间
            long startAt = System.currentTimeMillis()
                    + (Long.max(1, random.nextInt(param.getDynamicTimeWindowMinute())) * 60 * 1000);

            // Step 2 生成参数
            String newJobName = String.valueOf(accountContext.getId());
            AutoBotJobParam jobParam = AutoBotJobParam
                    .builder()
                    .jobType(ACCOUNT_SPLIT_JOB)
                    .jobName(newJobName)
                    .intervalInSecond(param.getIntervalInSecond())
                    .autoBotJobWSParam(param.getAutoBotJobWSParam())
                    .uniqueAccount(param.getUniqueAccount())
                    .build();

            jobParam.putParam(START_AT, startAt);

            // Step 3 开始job
            getBotApi().getBotJobService().startJob(
                    param.getJobName(),
                    newJobName,
                    jobParam,
                    getInstance(),
                    false
            );
            return Result.ok("job start at " + startAt);
        }, getExecutorService()).exceptionallyAsync(throwable -> {
            logger.error("split job by account, create new job error", throwable);
            return Result.fail("split job by account, create new job error" + throwable.getMessage());
        });
    }

    protected abstract AutoBotJobInvoker getInstance();

    /**
     * 账户列表操作结果处理
     *
     * @param future future
     */
    private void acListOptResultHandler(CompletableFuture<ACListOptResult> future) {
        future.thenAcceptAsync(acListOptResult -> {
            if (!acListOptResult.getSuccess()) {
                logger.info("botId[%s]-botName[%s]-jobName[%s] 定时任务执行失败, %s".formatted(
                        acListOptResult.getBotId(), acListOptResult.getBotName(), acListOptResult.getJobName(), acListOptResult.getErrorMsg()
                ));
            } else {
                logger.info("botId[%s]-botName[%s]-jobName[%s] 定时任务执行成功, %s".formatted(
                        acListOptResult.getBotId(), acListOptResult.getBotName(), acListOptResult.getJobName(), acListOptResult.getErrorMsg()
                ));
            }
        });
    }

    /**
     * 转换BotWSMethodConfig 为 AutoBotJobWSParam
     *
     * @param methodConfig methodConfig
     * @return AutoBotJobWSParam
     */
    private AutoBotJobWSParam convertWSConfigParam(BotWSMethodConfig methodConfig) {
        return new AutoBotJobWSParam(
                methodConfig.isRefreshWSConnection(),
                methodConfig.wsUnlimitedRetry(),
                methodConfig.nioEventLoopGroupThreads(),
                methodConfig.wsConnectCount(),
                methodConfig.reconnectLimit(),
                methodConfig.heartBeatIntervalSecond(),
                methodConfig.reconnectCountDownSecond()
        );
    }

    private interface AccountJobMethodInvokeHandler {

        CompletableFuture<Result> invoke(AccountContext accountContext, List<AccountContext> accountContexts, Object[] extraParams, Method jobMethod, Object invokeObj);

    }
}
package cn.com.vortexa.script_node.config;


import cn.com.vortexa.common.dto.config.ClassInfo;
import cn.com.vortexa.common.dto.config.AutoBotConfig;
import cn.com.vortexa.common.util.FileUtil;
import cn.com.vortexa.common.util.YamlConfigLoadUtil;
import cn.hutool.core.util.StrUtil;
import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Stream;

/**
 * @author helei
 * @since 2025-04-04
 */
@Slf4j
@Data
@Component
@ConfigurationProperties(prefix = "vortexa.script-node")
public class ScriptNodeConfiguration implements InitializingBean {

    public static final String BOT_INSTANCE_CONFIG_FILE_NAME = "bot-instance-config.yaml";
    public static final List<String> BOT_INSTANCE_CONFIG_PREFIX = List.of("vortexa", "botInstance");
    public static final String REACTIVE_PATH_PREFIX = "reactive:";

    /**
     * bot group（Script Node中运行的bot的、
     * ）
     */
    private String botGroup;

    /**
     * bot-instance 配置文件位置
     */
    private String botInstanceLocations;

    /**
     * Script node 基础路径
     */
    private String scriptNodeBasePath;

    /**
     * 解析后的botInstance配置文件绝对路径
     */
    private String resolvedInstanceLocations;

    /**
     * 是否开启命令行菜单
     */
    private boolean commandMenu = true;

    /**
     * botKeyConfigMap, （解析配置文件自动填入）
     */
    private Map<String, AutoBotConfig> botKeyConfigMap;

    /**
     * 自动时自动启动的botKey
     */
    private Set<String> autoLaunchBotKeys;

    @Override
    public void afterPropertiesSet() throws Exception {
        botKeyConfigMap = new HashMap<>();
        // 解析地址，
        scriptNodeBasePath = FileUtil.getBotAppConfigPath() + File.separator + botGroup;

        if (botInstanceLocations.startsWith(REACTIVE_PATH_PREFIX)) {
            resolvedInstanceLocations = botInstanceLocations.replaceFirst(REACTIVE_PATH_PREFIX, scriptNodeBasePath);
        } else {
            resolvedInstanceLocations = botInstanceLocations;
        }

        // 解析文件夹
        log.info("start resolve bot instance config from dir[{}]", resolvedInstanceLocations);
        Path botInstanceDirsPath = Paths.get(resolvedInstanceLocations);
        try (Stream<Path> walk = Files.walk(botInstanceDirsPath, 3)) {
            walk.filter(Files::isDirectory).forEach(dir -> {
                Path configFilePath = dir.resolve(BOT_INSTANCE_CONFIG_FILE_NAME);
                if (Files.exists(configFilePath)) {
                    AutoBotConfig config = YamlConfigLoadUtil.load(configFilePath.toFile(), BOT_INSTANCE_CONFIG_PREFIX, AutoBotConfig.class);
                    // 配置文件校验
                    if (config == null) {
                        throw new IllegalArgumentException("bot instance config file [" + BOT_INSTANCE_CONFIG_FILE_NAME+"] illegal");
                    }
                    if (StrUtil.isBlank(config.getClassFileName()) && StrUtil.isBlank(config.getClassFilePath())) {
                        throw new IllegalArgumentException("bot instance config file [" + BOT_INSTANCE_CONFIG_FILE_NAME+"] class path didn't exist");
                    }
                    if (StrUtil.isBlank(config.getClassFilePath())) {
                        config.setClassFilePath(dir + File.separator + config.getClassFileName());
                    }

                    List<ClassInfo> extraClass = config.getExtraClass();
                    if (extraClass != null && !extraClass.isEmpty()) {
                        for (ClassInfo classInfo : extraClass) {
                            if (classInfo.getClassFilePath() == null) {
                                classInfo.setClassFilePath(dir + File.separator + classInfo.getClassFileName());
                            }
                        }
                    }

                    config.setResourceDir(dir.toString());
                    botKeyConfigMap.put(config.getBotKey(), config);
                    log.info("botKey[{}] config loaded", config.getBotKey());
                }
            });
        }
    }
}
package cn.com.vortexa.script_node.constants;

/**
 * Depin Bot 状态
 */
public enum BotStatus {
    NEW,

    INIT,
    INIT_ERROR,
    INIT_FINISH,

    STARTING,
    RUNNING,

    STOPPING,
    STOPPED,

    SHUTDOWN,
}
package cn.com.vortexa.script_node.util;

import cn.com.vortexa.script_node.anno.BotApplication;
import cn.com.vortexa.script_node.bot.AutoLaunchBot;
import cn.com.vortexa.common.dto.config.AutoBotConfig;
import cn.com.vortexa.script_node.service.BotApi;
import cn.com.vortexa.common.exception.BotInitException;
import cn.com.vortexa.common.exception.BotStartException;
import cn.com.vortexa.common.util.BannerUtil;
import cn.com.vortexa.script_node.view.ScriptNodeCMDLineMenu;
import cn.com.vortexa.script_node.view.commandMenu.DefaultMenuType;
import cn.hutool.core.util.StrUtil;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Function;

@Slf4j
public class ScriptBotLauncher {

    private static final ScriptNodeCMDLineMenu scriptNodeCMDLineMenu = new ScriptNodeCMDLineMenu(List.of(
        DefaultMenuType.START_BOT_TASK, DefaultMenuType.LAUNCH_SCRIPT
    ));

    private static final ConcurrentHashMap<String, ScriptBotMetaInfo> botMetaInfoMap = new ConcurrentHashMap<>();

    /**
     * 启动bot
     *
     * @param botClass botClass
     * @return ApplicationContext
     * @throws BotStartException BotStartException
     * @throws BotInitException BotInitException
     */
    public static AutoLaunchBot<?> launch(
        Class<? extends AutoLaunchBot<?>> botClass,
        AutoBotConfig botConfig,
        BotApi botApi,
        Function<AutoLaunchBot<?>, Boolean> initHandler,
        boolean launch
    ) throws BotStartException, BotInitException {
        BannerUtil.printBanner("");

        String botKey = botConfig.getBotKey();
        if (StrUtil.isBlank(botKey)) {
            throw new BotStartException("bot key is empty");
        }

        System.setProperty("spring.application.name", botKey);

        // 解析注解上的bot name
        BotApplication annotation = botClass.getAnnotation(BotApplication.class);
        String botName = null;
        if (annotation == null || StrUtil.isBlank((botName = annotation.name()))) {
            throw new BotStartException("bot must have @BotApplication annotation and must have name");
        }

        // Step 1 创建bot实例
        Constructor<? extends AutoLaunchBot<?>> constructor = null;
        AutoLaunchBot<?> bot = null;
        try {
            constructor = botClass.getConstructor();
            bot = constructor.newInstance();
        } catch (NoSuchMethodException | InstantiationException | IllegalAccessException |
                 InvocationTargetException e) {
            throw new BotInitException(e);
        }

        bot.setBotName(botName);
        bot.setBotKey(botKey);
        botMetaInfoMap.put(botKey, new ScriptBotMetaInfo(bot, botConfig, botApi, initHandler));

        if (launch) {
            // Step 3 启动bot
            launchResolvedScriptBot(botKey);
        }

        return bot;
    }

    /**
     * 启动命令行菜单
     */
    public static void startCommandLineMenu() {
        scriptNodeCMDLineMenu.start();
    }

    /**
     * 添加Bot到菜单
     *
     * @param botKey botKey
     * @param bot bot
     */
    public static void addBotInMenu(String botKey, AutoLaunchBot<?> bot) {
        scriptNodeCMDLineMenu.getBotKeyMap().put(botKey, bot);
    }


    public static void launchResolvedScriptBot(String botKey) throws BotStartException, BotInitException {
        ScriptBotMetaInfo scriptBotMetaInfo = botMetaInfoMap.get(botKey);
        if (scriptBotMetaInfo == null) {
            throw new BotStartException(botKey + " didn't resolved by ScriptBotLauncher, place invoke ScriptBotLauncher.launch(...) first");
        }

        log.info("bot[{}] start launch", botKey);
        scriptBotMetaInfo.getBot().launch(
            scriptBotMetaInfo.botConfig,
            scriptBotMetaInfo.botApi,
            scriptBotMetaInfo.initHandler
        );
    }

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    public static class ScriptBotMetaInfo {
        private AutoLaunchBot<?> bot;
        private AutoBotConfig botConfig;
        private BotApi botApi;
        Function<AutoLaunchBot<?>, Boolean> initHandler;
    }
}
package cn.com.vortexa.script_node.view.commandMenu;

import lombok.Data;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;

@Data
public class CommandMenuNode {

    private final boolean isEnd;

    /**
     * 当前节点被选择时显示的文本
     */
    private String tittle;

    private Supplier<String> tittleBuilder;

    /**
     * 当前节点进入后的describe
     */
    private String describe;

    /**
     * 当前节点调用的函数, 返回内容会显示在describe 和 子节点选项之间
     */
    private Function<CommandMenuNode, String> action;

    /**
     * 处理输入
     */
    private Consumer<String> resolveInput;

    /**
     * 当前节点的子节点
     */
    private final List<CommandMenuNode> subNodeList = new ArrayList<>();

    public CommandMenuNode(String tittle, String describe) {
        this(false, tittle, describe);
    }

    public CommandMenuNode(String tittle, String describe, Supplier<String> action) {
        this(false, tittle, describe, action);
    }

    public CommandMenuNode(String tittle, String describe, Function<CommandMenuNode, String> action) {
        this(false, tittle, describe, action);
    }

    public CommandMenuNode(boolean isEnd, String tittle, String describe) {
        this.isEnd = isEnd;
        this.tittle = tittle;
        this.describe = describe;
    }

    public CommandMenuNode(boolean isEnd, String tittle, String describe, Supplier<String> action) {
        this.isEnd = isEnd;
        this.tittle = tittle;
        this.describe = describe;
        this.action = node -> action.get();
    }

    public CommandMenuNode(boolean isEnd, String tittle, String describe, Function<CommandMenuNode, String> action) {
        this.isEnd = isEnd;
        this.tittle = tittle;
        this.describe = describe;
        this.action = action;
    }

    public CommandMenuNode addSubMenu(CommandMenuNode subMenu) {
        this.subNodeList.add(subMenu);
        return this;
    }

    public String getTittle() {
        if (tittleBuilder == null) return tittle;

        return tittleBuilder.get();
    }
}
package cn.com.vortexa.script_node.view.commandMenu;

public enum DefaultMenuType {

    @Deprecated
    REGISTER,
    @Deprecated
    VERIFIER,
    @Deprecated
    LOGIN,

    START_BOT_TASK, // 启动Bot任务
    ACCOUNT_LIST,  // 账户列表
    PROXY_LIST, // 代理列表
    BROWSER_ENV_LIST,  // 浏览器环境列表
    IMPORT, // 导入菜单
    LAUNCH_SCRIPT // 启动菜单

}
package cn.com.vortexa.script_node.view.commandMenu;


import cn.com.vortexa.common.dto.PageResult;
import cn.com.vortexa.common.util.tableprinter.CommandLineTablePrintHelper;

import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiFunction;

public class PageMenuNode<T> extends CommandMenuNode {
    private static final String PREFIX_PAGE_NAME = "pre_page";

    private static final String NEXT_PAGE_NAME = "next_page";

    private static final String REFRESH_PAGE_NAME = "refresh_page";

    private static final String PAGE_KEY = "current_page";

    private static final String TOTAL_KEY = "total";

    private final Map<String, Object> params = new HashMap<>();

    private final Field[] fields;

    private final int limit;

    private List<T> cacheList;

    private boolean isQuery = true;

    public PageMenuNode(
            String tittle,
            String describe,
            BiFunction<Integer, Integer, PageResult<T>> pageInvocation,
            Class<T> tClass
    ) {
        this(tittle, describe, 20, pageInvocation, tClass);
    }

    public PageMenuNode(
            String tittle,
            String describe,
            int limit,
            BiFunction<Integer, Integer, PageResult<T>> pageInvocation,
            Class<T> tClass
    ) {
        super(tittle, describe);

        this.fields = tClass.getDeclaredFields();
        this.limit = limit;

        this.setAction((node) -> {
            String print = "";
            if (isQuery) {
                int page = Math.max(1, (Integer) params.getOrDefault(PAGE_KEY, 1));
                PageResult<T> pageResult = pageInvocation.apply(page, limit);

                params.put(TOTAL_KEY, pageResult.getTotal());
                params.put(PAGE_KEY, pageResult.getPageNum());

                cacheList = pageResult.getList();
                isQuery = false;
                print = CommandLineTablePrintHelper.generateTableString(cacheList, tClass);
            }

            return print + printPageInfo();
        });

        this.setResolveInput(input -> {
            String[] split = input.split(":");
            if (split.length != 2) return;

            if ("detail".equals(split[0]) && cacheList != null && !cacheList.isEmpty()) {
                int row = Integer.parseInt(split[1]);
                T item = cacheList.get(row);
                try {
                    System.out.println(printItem(item));
                } catch (IllegalAccessException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        this.addSubMenu(preMenuNode()).addSubMenu(nextMenuNode()).addSubMenu(refreshMenuNode());
    }


    private CommandMenuNode preMenuNode() {
        return new CommandMenuNode(
                true,
                PREFIX_PAGE_NAME,
                "",
                () -> {
                    params.compute(PAGE_KEY, (k, v) -> (int) Math.max(0, (v == null ? 0 : (int) v) - 1));
                    isQuery = true;
                    return "";
                }
        );
    }

    private CommandMenuNode nextMenuNode() {
        return new CommandMenuNode(
                true,
                NEXT_PAGE_NAME,
                "",
                () -> {
                    params.compute(PAGE_KEY, (k, v) -> {
                        Long total = (Long) params.get(TOTAL_KEY);
                        v = v == null ? 0 : v;
                        if (total == null) return (int) v + 1;

                        return (int) Math.min(total, (int) v + 1);
                    });
                    isQuery = true;
                    return "";
                }
        );
    }

    private CommandMenuNode refreshMenuNode() {
        return new CommandMenuNode(
                true,
                REFRESH_PAGE_NAME,
                "",
                () -> {
                    isQuery = true;
                    return "";
                }
        );
    }


    private String printPageInfo() {
        return "\n总数:%s, 当前页: %s, 每页大小: %s\n输入detail:row查看详情".formatted(
                params.get(TOTAL_KEY), params.get(PAGE_KEY), this.limit
        );
    }

    private String printItem(T item) throws IllegalAccessException {
        StringBuilder sb = new StringBuilder();
        for (Field field : fields) {
            field.setAccessible(true);
            sb.append(field.getName()).append(": ").append(field.get(item)).append("\n");
        }

        return sb.toString();
    }
}
package cn.com.vortexa.script_node.view;

import cn.com.vortexa.script_node.bot.AutoLaunchBot;
import cn.com.vortexa.script_node.bot.JobInvokeAutoBot;
import cn.com.vortexa.script_node.view.commandMenu.CommandMenuNode;
import cn.com.vortexa.script_node.view.commandMenu.MenuNodeMethod;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;

import org.jline.reader.LineReader;
import org.jline.reader.LineReaderBuilder;
import org.jline.reader.impl.DefaultParser;
import org.jline.terminal.Terminal;
import org.jline.terminal.TerminalBuilder;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CountDownLatch;

/**
 * 命令行交互的depin机器人
 */
@Slf4j
@Getter
public abstract class CommandLineMenu {

    private final Map<String, AutoLaunchBot<?>> botKeyMap = new ConcurrentHashMap<>();

    private final CommandMenuNode mainManu;

    private AutoLaunchBot<?> bot;

    public CommandLineMenu() {
        this.mainManu = new CommandMenuNode(
                "主菜单",
                "当前可用的Bot"
        );
    }

    /**
     * 构建command菜单
     */
    protected void buildMenuNode(CommandMenuNode mainManu) {
        botKeyMap.forEach((k, v) -> {
            CommandMenuNode botMenu = new CommandMenuNode(
                    k,
                    String.format("欢迎使用[%s]-bot", k),
                    () -> {
                        bot = v;
                        return "current use: [%s], status:[%s]".formatted(
                                bot.getBotKey(),
                                bot.getStatus()
                        );
                    }
            );

            buildBotMenuNode(botMenu, v);

            // 解析MenuNodeMethod注解添加菜单节点
            for (Method method : v.getClass().getDeclaredMethods()) {
                method.setAccessible(true);

                if (method.isAnnotationPresent(MenuNodeMethod.class)) {
                    if (method.getParameterCount() > 0) {
                        throw new IllegalArgumentException("菜单方法参数数量必须为0");
                    }

                    MenuNodeMethod anno = method.getAnnotation(MenuNodeMethod.class);
                    String title = anno.title();
                    String description = anno.description();

                    CommandMenuNode menuNode = new CommandMenuNode(title, description, () -> {
                        try {
                            return method.invoke(v).toString();
                        } catch (IllegalAccessException | InvocationTargetException e) {
                            throw new RuntimeException(e);
                        }
                    });

                    botMenu.addSubMenu(menuNode);
                }
            }

            mainManu.addSubMenu(botMenu);
        });
    }

    protected abstract void buildBotMenuNode(CommandMenuNode botMenu, AutoLaunchBot<?> v);

    /**
     * 异步启动
     */
    private void asyncExecute(CountDownLatch startLatch) {
        Thread commandInputThread = new Thread(() -> {
            try {
                doExecute();
            } catch (Exception e) {
                log.error("启动bot发生错误", e);
            } finally {
                startLatch.countDown();
            }
        }, "depin-bot-main");
        commandInputThread.setDaemon(true);
        commandInputThread.start();
    }

    /**
     * 启动bot
     *
     */
    public void start() {
        try {
            CountDownLatch startLatch = new CountDownLatch(1);
            //启动命令行交互的线程
            asyncExecute(startLatch);

            startLatch.await();
        } catch (Exception e) {
            throw new RuntimeException("command menu start error", e);
        }
    }

    /**
     * 运行机器人
     *
     * @throws IOException IOException
     */
    public void doExecute() throws IOException {
        //Step 1 获取输入
        CommandMenuNode mainMenuNode = getMenuNode();
        Terminal terminal = TerminalBuilder.builder().system(true).build();
        LineReader reader = LineReaderBuilder.builder().terminal(terminal).parser(new DefaultParser()).build();

        Stack<CommandMenuNode> menuNodeStack = new Stack<>();
        CommandMenuNode currentMenuNode = mainMenuNode;

        //Step 2 不断监听控制台输入
        while (true) {
            boolean inputAccept = true;
            //Step 2.1 获取输入
            String choice;
            try {
                choice = reader.readLine("\n<\n" + getInvokeActionAndMenuNodePrintStr(currentMenuNode) + "请选择>")
                        .trim();
            } catch (Exception e) {
                log.error("进入菜单节点[{}]发生异常", currentMenuNode.getTittle(), e);
                currentMenuNode = menuNodeStack.pop();
                continue;
            }

            try {
                //Step 2.2 退出
                if ("exit".equals(choice)) {
                    exitHandler();
                    break;
                }

                //Step 2.3 选择操作
                int option = Integer.parseInt(choice.trim());
                if (option == 0) {
                    //返回上一级菜单
                    if (!menuNodeStack.isEmpty()) {
                        currentMenuNode = menuNodeStack.pop();
                    }
                } else if (option > 0 && option <= currentMenuNode.getSubNodeList().size()) {
                    //进入选择的菜单
                    menuNodeStack.push(currentMenuNode);
                    currentMenuNode = currentMenuNode.getSubNodeList().get(option - 1);
                } else {
                    inputAccept = false;
                }

                //终点节点，不进入，直接返回
                if (currentMenuNode.isEnd()) {
                    System.out.println(getInvokeActionAndMenuNodePrintStr(currentMenuNode));
                    currentMenuNode = menuNodeStack.pop();
                }
            } catch (Exception e) {
                inputAccept = false;
            }

            try {
                if (!inputAccept && currentMenuNode.getResolveInput() != null) {
                    currentMenuNode.getResolveInput().accept(choice);
                }
            } catch (Exception e) {
                System.out.println("系统异常");
            }
        }
    }

    /**
     * 获取菜单， 会放入额外的固定菜单
     *
     * @return CommandMenuNode
     */
    private CommandMenuNode getMenuNode() {

        buildMenuNode(mainManu);

        return mainManu;
    }

    private String printBanner() {

        return "" + bot.printBotRuntimeInfo();
    }

    /**
     * 退出回调
     */
    protected void exitHandler() {
    }

    /**
     * 执行Action回调，获取当前菜单打印的字符串
     *
     * @param currentMenuNode currentMenuNode
     * @return String
     */
    public String getInvokeActionAndMenuNodePrintStr(CommandMenuNode currentMenuNode) {
        StringBuilder sb = new StringBuilder();
        sb.append(currentMenuNode.getDescribe()).append("\n");

        if (currentMenuNode.getAction() != null) {
            sb.append(currentMenuNode.getAction().apply(currentMenuNode)).append("\n");
        }

        if (currentMenuNode.isEnd()) {
            return sb.toString();
        }

        sb.append("选项:\n");
        List<CommandMenuNode> menuNodeList = currentMenuNode.getSubNodeList();
        for (int i = 0; i < menuNodeList.size(); i++) {
            sb.append(i + 1).append(". ").append(menuNodeList.get(i).getTittle()).append("\n");
        }

        sb.append("0. 返回上一级菜单\n");

        return sb.toString();
    }

}
package cn.com.vortexa.script_node.view;

import cn.com.vortexa.common.exception.BotInitException;
import cn.com.vortexa.common.exception.BotStartException;
import cn.com.vortexa.script_node.bot.AutoLaunchBot;
import cn.com.vortexa.script_node.util.AccountInfoPrinter;
import cn.com.vortexa.script_node.util.ScriptBotLauncher;
import cn.com.vortexa.script_node.view.commandMenu.CommandMenuNode;
import cn.com.vortexa.script_node.view.commandMenu.DefaultMenuType;
import cn.com.vortexa.common.dto.config.AutoBotConfig;
import cn.com.vortexa.script_node.view.commandMenu.PageMenuNode;
import cn.com.vortexa.common.dto.ACListOptResult;
import cn.com.vortexa.common.dto.PageResult;
import cn.com.vortexa.common.entity.AccountContext;
import cn.com.vortexa.common.entity.BrowserEnv;
import cn.com.vortexa.common.entity.ProxyInfo;
import cn.com.vortexa.common.entity.RewordInfo;
import cn.com.vortexa.job.constants.JobStatus;

import com.alibaba.fastjson.JSON;

import lombok.Setter;
import lombok.extern.slf4j.Slf4j;

import org.quartz.SchedulerException;

import java.sql.SQLException;
import java.util.*;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.Consumer;

import static cn.com.vortexa.script_node.constants.MapConfigKey.*;

@Slf4j
public class ScriptNodeCMDLineMenu extends CommandLineMenu {
    /**
     * 刷新节点
     */
    public static final CommandMenuNode REFRESH_NODE = new CommandMenuNode(true, "刷新", "当前数据已刷新");

    private final List<DefaultMenuType> defaultMenuTypes;

    @Setter
    private Consumer<CommandMenuNode> addCustomMenuNode;

    public ScriptNodeCMDLineMenu(List<DefaultMenuType> defaultMenuTypes) {
        super();
        this.defaultMenuTypes = new ArrayList<>(defaultMenuTypes);

        this.defaultMenuTypes.add(DefaultMenuType.IMPORT);
        this.defaultMenuTypes.add(DefaultMenuType.ACCOUNT_LIST);
        this.defaultMenuTypes.add(DefaultMenuType.PROXY_LIST);
        this.defaultMenuTypes.add(DefaultMenuType.BROWSER_ENV_LIST);
    }

    @Override
    public final void buildBotMenuNode(CommandMenuNode botMenuNode, AutoLaunchBot<?> bot) {
        if (addCustomMenuNode != null) {
            addCustomMenuNode.accept(botMenuNode);
        }

        for (DefaultMenuType menuType : defaultMenuTypes) {
            botMenuNode.addSubMenu(switch (menuType) {
                case REGISTER -> buildRegisterMenuNode();
                case VERIFIER -> buildVerifierMenuNode();
                case LOGIN -> buildQueryTokenMenuNode();
                case ACCOUNT_LIST -> buildAccountListMenuNode();
                case PROXY_LIST -> buildProxyListMenuNode();
                case BROWSER_ENV_LIST -> buildBrowserListMenuNode();
                case START_BOT_TASK -> buildStartBotTaskMenuNode(bot);
                case IMPORT -> buildImportMenuNode();
                case LAUNCH_SCRIPT -> buildLaunchScriptMenuNode(bot);
            });
        }
    }

    /**
     * 启动bot菜单
     *
     * @return CommandMenuNode
     */
    private CommandMenuNode buildLaunchScriptMenuNode(AutoLaunchBot<?> bot) {
        String botKey = bot.getBotKey();

        CommandMenuNode commandMenuNode = new CommandMenuNode("启动/关闭 Bot", "启动或关闭Bot",
            () -> "当前选择的Bot[%s][%s]\n状态[%s]".formatted(
                bot.getBotName(),
                botKey,
                bot.getStatus()
            ));

        return commandMenuNode.addSubMenu(new CommandMenuNode(true, "启动", null, ()->{
            try {
                ScriptBotLauncher.launchResolvedScriptBot(botKey);
                return botKey + " launch finish...Current status: " + bot.getStatus();
            } catch (BotStartException | BotInitException e) {
                log.error("start bot[{}] error", botKey, e);
                return "";
            }
        })).addSubMenu(new CommandMenuNode(true, "关闭", null, () -> {
            bot.stop();
            return "";
        }));
    }

    /**
     * 构建注册菜单节点
     *
     * @return CommandMenuNode
     */
    private CommandMenuNode buildRegisterMenuNode() {
        CommandMenuNode registerMenu = new CommandMenuNode("注册",
            "请确认设置后运行", this::printCurrentRegisterConfig);

        CommandMenuNode interInvite = new CommandMenuNode(
            "填入邀请码",
            "请输入邀请码：",
            this::printCurrentRegisterConfig
        );
        interInvite.setResolveInput(input -> {
            AutoBotConfig autoBotConfig = getBot().getAutoBotConfig();
            log.info("邀请码修改[{}]->[{}]", autoBotConfig.getConfig(INVITE_CODE_KEY), input);
            autoBotConfig.setConfig(INVITE_CODE_KEY, input);
        });

        return registerMenu
            .addSubMenu(interInvite)
            .addSubMenu(new CommandMenuNode(
                true,
                "开始注册",
                "开始注册所有账号...",
                () -> {
                    try {

                        return getBot().registerAccount().get().toString();
                    } catch (Exception e) {
                        return "registry error, " + e.getMessage();
                    }
                }
            ));
    }

    private CommandMenuNode buildVerifierMenuNode() {
        return new CommandMenuNode("验证邮箱", "请选择验证的账户类型",
            () -> "当前的邮箱类型：" + getBot().getAutoBotConfig().getConfig(EMAIL_VERIFIER_TYPE));
    }

    /**
     * 获取token
     *
     * @return CommandMenuNode
     */
    private CommandMenuNode buildQueryTokenMenuNode() {
        return new CommandMenuNode("获取token", "开始获取token", () -> {
            CompletableFuture<ACListOptResult> getToken = getBot().loginAndTakeTokenAccount();
            try {
                ACListOptResult acListOptResult = getToken.get();

                return acListOptResult.printStr();
            } catch (InterruptedException | ExecutionException e) {
                getBot().logger.error("获取token异常, " +
                    (e.getCause() != null ? e.getCause().getMessage() : e.getMessage()), e);
                return "";
            }
        });
    }

    /**
     * 构建查看代理列表的菜单节点
     *
     * @return 查看代理列表菜单节点
     */
    private CommandMenuNode buildProxyListMenuNode() {
        return new PageMenuNode<>("查看代理列表", "当前代理列表:", (pageNum, pageSize) -> {
            try {
                return getBot().getBotApi().getProxyInfoRPC().conditionPageQueryRPC(pageNum, pageSize, new HashMap<>());
            } catch (SQLException e) {
                getBot().logger.error(
                    "查询代理列表出错, " + (e.getCause() == null ? e.getMessage() : e.getCause().getMessage()));
                return null;
            }
        }, ProxyInfo.class);
    }

    /**
     * 构建查看浏览器环境列表的菜单节点
     *
     * @return 查看浏览器环境列表菜单节点
     */
    private CommandMenuNode buildBrowserListMenuNode() {
        return new PageMenuNode<>("查看浏览器环境列表", "当前浏览器环境:", (pageNum, pageSize) -> {
            try {
                return getBot().getBotApi()
                    .getBrowserEnvRPC()
                    .conditionPageQueryRPC(pageNum, pageSize, new HashMap<>());
            } catch (SQLException e) {
                getBot().logger.error(
                    "查询浏览器环境列表出错, " + (e.getCause() == null ? e.getMessage() : e.getCause().getMessage()));
                return null;
            }
        }, BrowserEnv.class);
    }

    /**
     * 账户列表菜单节点
     *
     * @return 账户列表节点
     */
    private CommandMenuNode buildAccountListMenuNode() {
        CommandMenuNode accountListMenuNode = new PageMenuNode<>("查看账号", "当前账户详情列表:",
            (pageNum, pageSize) -> {
                try {
                    HashMap<String, Object> filter = new HashMap<>();
                    filter.put("botId", getBot().getBotInstance().getBotId());
                    filter.put("botKey", getBot().getAutoBotConfig().getBotKey());

                    PageResult<AccountContext> pageResult = getBot().getBotApi()
                        .getBotAccountService()
                        .conditionPageQuery(pageNum, pageSize, filter);
                    getBot().getPersistenceManager().fillAccountInfos(pageResult.getList());
                    return pageResult;
                } catch (Exception e) {
                    getBot().logger.error(
                        "查询账号列表出错, " + (e.getCause() == null ? e.getMessage() : e.getCause().getMessage()));
                    return null;
                }
            }, AccountContext.class);

        return accountListMenuNode
            .addSubMenu(buildAccountRewardMenuNode())
            .addSubMenu(buildAccountConnectStatusMenuNode())
            .addSubMenu(REFRESH_NODE);
    }

    /**
     * 查看账户收益菜单节点
     *
     * @return 账户收益节点
     */
    private CommandMenuNode buildAccountRewardMenuNode() {
        return new PageMenuNode<>("查看账号收益", "账号收益详情列表:", (pageNum, pageSize) -> {
            try {
                return getBot().getBotApi()
                    .getRewordInfoService()
                    .conditionPageQuery(pageNum, pageSize, new HashMap<>());
            } catch (SQLException e) {
                getBot().logger.error(
                    "查询账号收益列表出错, " + (e.getCause() == null ? e.getMessage() : e.getCause().getMessage()));
                return null;
            }
        }, RewordInfo.class);
    }

    /**
     * 查看账户连接情况菜单节点
     *
     * @return 账户收益节点
     */
    private CommandMenuNode buildAccountConnectStatusMenuNode() {
        return new CommandMenuNode(
            "查看账号连接情况",
            "账号连接情况列表:",
            () -> AccountInfoPrinter.printAccountConnectStatusList(getBot().getAccountContexts())
        ).addSubMenu(REFRESH_NODE);
    }

    /**
     * 开始账户连接菜单节点
     *
     * @return 连接账户菜单节点
     */
    private CommandMenuNode buildStartBotTaskMenuNode(AutoLaunchBot<?> bot) {

        CommandMenuNode menuNode = new CommandMenuNode(
            "启动任务",
            "选择任务类型",
            node ->{
                for (String jobName : bot.botJobNameList()) {

                    CommandMenuNode typeInput = new CommandMenuNode(true, null, "type",
                        () -> JSON.toJSONString(bot.startBotJob(jobName))
                    );

                    typeInput.setTittleBuilder(() -> {
                        JobStatus status = null;
                        try {
                            status = getBot().getBotApi()
                                .getBotJobService()
                                .queryJobStatus(getBot().getAutoBotConfig().getBotKey(), jobName);
                            return "%s 任务 (%s)".formatted(jobName, status);
                        } catch (SchedulerException e) {
                            throw new RuntimeException(e);
                        }
                    });

                    node.addSubMenu(typeInput);
                }
                return "";
            }
        );
        return menuNode;
    }

    /**
     * 导入菜单节点
     *
     * @return CommandMenuNode
     */
    private CommandMenuNode buildImportMenuNode() {

        return new CommandMenuNode("导入", "请选择要导入的数据")
            .addSubMenu(buildImportBotAccountContextMenuNode())
            // .addSubMenu(buildImportBaseAccountMenuNode())
            // .addSubMenu(buildImportProxyMenuNode())
            // .addSubMenu(buildImportBrowserEnvMenuNode())
            // .addSubMenu(buildImportTwitterMenuNode())
            // .addSubMenu(buildImportDiscordMenuNode())
            // .addSubMenu(buildImportTelegramMenuNode())
            ;
    }

    // /**
    //  * 导入浏览器环境菜单节点
    //  *
    //  * @return CommandMenuNode
    //  */
    // private CommandMenuNode buildImportBrowserEnvMenuNode() {
    //
    //     return new CommandMenuNode(true, "导入浏览器环境", null, () -> {
    //         String filePath = getBotConfig().getFilePathConfig().getBrowserEnvFileBotConfigPath();
    //
    //         try {
    //             getBot().getBotApi().getBrowserEnvRPC().importFromExcel(filePath);
    //         } catch (SQLException e) {
    //             throw new RuntimeException(e);
    //         }
    //
    //         return "浏览器环境导入完成";
    //     });
    // }
    //
    // /**
    //  * 导入代理信息
    //  *
    //  * @return CommandMenuNode
    //  */
    // private CommandMenuNode buildImportProxyMenuNode() {
    //     return new CommandMenuNode(true, "导入代理", null, () -> {
    //
    //         try {
    //             getBot().getBotApi().getProxyInfoRPC()
    //                     .importFromExcel(getBotConfig().getFilePathConfig().getProxyFileBotConfigPath());
    //         } catch (SQLException e) {
    //             throw new RuntimeException(e);
    //         }
    //
    //         return "代理导入完成";
    //     });
    // }
    //
    // /**
    //  * 导入账号基本信息
    //  *
    //  * @return CommandMenuNode
    //  */
    // private CommandMenuNode buildImportBaseAccountMenuNode() {
    //     return new CommandMenuNode(true, "导入账号基本信息", null, () -> {
    //
    //         try {
    //             Integer integer = getBot().getBotApi().getAccountBaseInfoRPC()
    //                     .importFromExcel(getBotConfig().getFilePathConfig().getBaseAccountFileBotConfigPath());
    //             return "账号基本信息导入完成，" + integer;
    //         } catch (SQLException e) {
    //             throw new RuntimeException(e);
    //         }
    //     });
    // }
    //
    //
    // /**
    //  * 导入twitter账号基本信息
    //  *
    //  * @return CommandMenuNode
    //  */
    // private CommandMenuNode buildImportTwitterMenuNode() {
    //     return new CommandMenuNode(true, "导入twitter账号", null, () -> {
    //         try {
    //             Integer i = getBot().getBotApi().getTwitterAccountRPC()
    //                     .importFromExcel(getBotConfig().getFilePathConfig().getTwitterFileBotConfigPath());
    //             return "twitter导入完成, " + i;
    //         } catch (SQLException e) {
    //             throw new RuntimeException(e);
    //         }
    //     });
    // }
    //
    //
    // /**
    //  * 导入discord账号基本信息
    //  *
    //  * @return CommandMenuNode
    //  */
    // private CommandMenuNode buildImportDiscordMenuNode() {
    //     return new CommandMenuNode(true, "导入discord账号", null, () -> {
    //
    //         try {
    //             Integer i = getBot().getBotApi().getDiscordAccountRPC().importFromExcel(getBotConfig().getFilePathConfig().getDiscordFileBotConfigPath());
    //             return "discord导入完成," + i;
    //         } catch (SQLException e) {
    //             throw new RuntimeException(e);
    //         }
    //     });
    // }
    //
    // /**
    //  * 导入Telegram账号基本信息
    //  *
    //  * @return CommandMenuNode
    //  */
    // private CommandMenuNode buildImportTelegramMenuNode() {
    //     return new CommandMenuNode(true, "导入Telegram账号", null, () -> {
    //
    //         try {
    //             Integer i = getBot().getBotApi().getTelegramAccountRPC().importFromExcel(getBotConfig().getFilePathConfig().getTelegramFileBotConfigPath());
    //
    //             return "Telegram导入完成" + i;
    //         } catch (SQLException e) {
    //             throw new RuntimeException(e);
    //         }
    //     });
    // }

    /**
     * 导入bot使用的账号菜单节点
     *
     * @return CommandMenuNode
     */
    private CommandMenuNode buildImportBotAccountContextMenuNode() {
        return new CommandMenuNode(true, "导入bot运行账号", null, () -> {

            try {
                Integer i = getBot().getBotApi().getBotAccountService().importFromExcel(
                    getBot().getBotInfo().getId(),
                    getBot().getBotInstance().getBotKey(),
                    getBot().getAutoBotConfig().getAccountConfig().getConfigFilePath()
                );
                getBot().initAccounts();
                return "bot运行账号导入完成," + i;
            } catch (Exception e) {
                return "import bot account context error," + e.getMessage();
            }
        });
    }

    /**
     * 打印当前的邀请码
     *
     * @return 邀请码
     */
    private String printCurrentRegisterConfig() {
        String inviteCode = (String) getBot().getAutoBotConfig().getCustomConfig().get(INVITE_CODE_KEY);
        String registerType = (String) getBot().getAutoBotConfig().getCustomConfig().get(REGISTER_TYPE_KEY);

        return "(当前邀请码为:" + inviteCode + ")\n"
            + "(当前注册类型为:" + registerType + ")\n";
    }
}
