package com.helei.dto.request;

import cn.hutool.core.lang.Pair;
import com.alibaba.fastjson.JSONObject;
import com.helei.constants.CEXType;
import com.helei.constants.RunEnv;
import com.helei.constants.trade.KLineInterval;
import com.helei.constants.trade.TradeType;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.ArrayList;
import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class AddKLineRequest {

    private RunEnv runEnv;

    private TradeType tradeType;

    private CEXType cexType;

    private List<Pair<String, KLineInterval>> klineList;


    public static void main(String[] args) {
        AddKLineRequest addKLineRequest = new AddKLineRequest(RunEnv.TEST_NET, TradeType.CONTRACT, CEXType.BINANCE, new ArrayList<>());
        addKLineRequest.getKlineList().add(new Pair<>("aw1", KLineInterval.M_1));

        String string = JSONObject.toJSONString(addKLineRequest);
        System.out.println(string);
        System.out.println(JSONObject.parseObject(string, AddKLineRequest.class));
    }
}

package com.helei.realtimedatacenter.controller;


import com.helei.constants.CEXType;
import com.helei.dto.base.Result;
import com.helei.dto.request.AddKLineRequest;
import com.helei.realtimedatacenter.service.impl.market.BinanceMarketRTDataService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.Set;

@RestController
@RequestMapping("/realtime")
public class RealtimeDataCenterController {


    @Autowired
    private BinanceMarketRTDataService binanceMarketRTDataService;

    @GetMapping("/addKLine")
    public Result addKLine(AddKLineRequest request) {
        CEXType cexType = request.getCexType();

        switch (cexType) {
            case BINANCE -> {
                Set<String> set = binanceMarketRTDataService.startSyncEnvSymbolIntervalsKLine(request.getRunEnv(), request.getTradeType(), request.getKlineList());
                return Result.ok(set);
            }
            default -> {
                return Result.fail("不支持的请求参数");
            }
        }
    }

}


package com.helei.realtimedatacenter.realtime.impl;

import cn.hutool.core.lang.Pair;
import com.helei.binanceapi.BinanceWSMarketStreamClient;
import com.helei.binanceapi.api.ws.BinanceWSStreamApi;
import com.helei.binanceapi.base.SubscribeResultInvocationHandler;
import com.helei.binanceapi.constants.WebSocketStreamType;
import com.helei.binanceapi.dto.StreamSubscribeEntity;
import com.helei.constants.RunEnv;
import com.helei.constants.WebsocketClientStatus;
import com.helei.constants.trade.KLineInterval;
import com.helei.constants.WebSocketStreamParamKey;
import com.helei.constants.trade.TradeType;
import com.helei.realtimedatacenter.realtime.KLineRTDataSyncTask;
import lombok.extern.slf4j.Slf4j;

import java.util.List;
import java.util.concurrent.ExecutorService;


@Slf4j
public class BinanceKLineRTDataSyncTask extends KLineRTDataSyncTask<BinanceWSStreamApi.StreamCommandBuilder> {

    private final RunEnv runEnv;

    private final TradeType tradeType;

    /**
     * 流api 获取流实时数据
     */
    private final BinanceWSMarketStreamClient marketStreamClient;

    /**
     * 是否注册k线
     */
    private final SyncKLineFilter kLineFilter;


    /**
     * 币安k线数据同步任务
     *
     * @param marketStreamClient marketStreamClient
     * @param listenKLines       监听的k线列表
     */
    public BinanceKLineRTDataSyncTask(
            BinanceWSMarketStreamClient marketStreamClient,
            List<Pair<String, KLineInterval>> listenKLines,
            SyncKLineFilter kLineFilter
    ) {
        super(listenKLines);
        this.runEnv = marketStreamClient.getRunEnv();
        this.tradeType = marketStreamClient.getTradeType();
        this.marketStreamClient = marketStreamClient;
        this.kLineFilter = kLineFilter;
    }


    @Override
    protected BinanceWSStreamApi.StreamCommandBuilder startRegistryKLine() {
        String clientName = marketStreamClient.getName();
        // 1 连接
        if (!WebsocketClientStatus.RUNNING.equals(marketStreamClient.getClientStatus())) {

            throw new RuntimeException(String.format("ws客户端[%s]未连接", clientName));
        }

        return marketStreamClient.getStreamApi().builder();
    }

    @Override
    protected String whenRegistryKLine(
            String symbol,
            KLineInterval kLineInterval,
            SubscribeResultInvocationHandler whenReceiveKLineData,
            ExecutorService taskExecutor,
            BinanceWSStreamApi.StreamCommandBuilder commandBuilder
    ) {

        String key = generateSyncKLineKey(runEnv, tradeType, symbol, kLineInterval);
        if (kLineFilter.filter(runEnv, tradeType, symbol, kLineInterval, key)) {
            log.warn("过滤掉K线[{}]", key);
            return null;
        }

        log.debug("注册k线[{}]", key);
        // 2 构建请求
        commandBuilder.addSubscribeEntity(
                StreamSubscribeEntity
                        .builder()
                        .symbol(symbol)
                        .subscribeType(WebSocketStreamType.KLINE)
                        .invocationHandler(whenReceiveKLineData)
                        .callbackExecutor(taskExecutor)
                        .build()
                        .addParam(WebSocketStreamParamKey.KLINE_INTERVAL, kLineInterval)
        );

        return key;
    }

    @Override
    protected void endRegistryKLine(BinanceWSStreamApi.StreamCommandBuilder commandBuilder) {
        // 3 请求订阅
        commandBuilder.subscribe();
        log.info("已发送k线获取请求到api client [{}] ", marketStreamClient.getName());
    }


    /**
     * 获取当前同步了多少种k线信息
     *
     * @param runEnv        运行环境
     * @param tradeType     交易类型
     * @param symbol        交易对
     * @param kLineInterval k线频率
     * @return key
     */
    private String generateSyncKLineKey(RunEnv runEnv, TradeType tradeType, String symbol, KLineInterval kLineInterval) {
        return String.format("%s.%s.%s.%s", runEnv.name(), tradeType.name(), symbol, kLineInterval.name());
    }


    public interface SyncKLineFilter {
        boolean filter(RunEnv runEnv, TradeType tradeType, String symbol, KLineInterval kLineInterval, String key);
    }
}


package com.helei.realtimedatacenter.realtime;

import cn.hutool.core.lang.Pair;
import com.helei.binanceapi.base.SubscribeResultInvocationHandler;
import com.helei.constants.trade.KLineInterval;
import lombok.extern.slf4j.Slf4j;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;

@Slf4j
public abstract class KLineRTDataSyncTask<T> {

    protected final List<Pair<String, KLineInterval>> listenKLines;

    protected KLineRTDataSyncTask(List<Pair<String, KLineInterval>> listenKLines) {
        this.listenKLines = listenKLines;
    }

    /**
     * 开始同步
     *
     * @param whenReceiveKLineData 当websocket收到消息时的回调，
     * @param taskExecutor         执行的线程池，回调也会通过这个线程池执行
     * @return CompletableFuture<Void>
     */
    public CompletableFuture<Set<String>> startSync(
            SubscribeResultInvocationHandler whenReceiveKLineData,
            ExecutorService taskExecutor
    ) {
        return CompletableFuture.supplyAsync(() -> {
            HashSet<String> set = new HashSet<>();

            T requestSender = startRegistryKLine();

            try {
                for (Pair<String, KLineInterval> kLine : listenKLines) {
                    String key = whenRegistryKLine(kLine.getKey(), kLine.getValue(), whenReceiveKLineData, taskExecutor, requestSender);

                    set.add(key);
                }

                endRegistryKLine(requestSender);
                return set;
            } catch (Exception e) {
                throw new RuntimeException("同步k线数据发生错误", e);
            }
        }, taskExecutor);
    }

    /**
     * 开始同步k显示数据
     */
    protected abstract T startRegistryKLine();

    /**
     * 注册监听k线时调用
     *
     * @param symbol               交易对
     * @param kLineInterval        k线频率
     * @param whenReceiveKLineData 收到k线数据的回调
     * @param taskExecutor         执行的线程池
     */
    protected abstract String whenRegistryKLine(
            String symbol,
            KLineInterval kLineInterval,
            SubscribeResultInvocationHandler whenReceiveKLineData,
            ExecutorService taskExecutor,
            T requestSender
    );

    /**
     * k线数据同步结束
     */
    protected abstract void endRegistryKLine(T requestSender);
}


package com.helei.realtimedatacenter.service.impl.market;

import cn.hutool.core.collection.ListUtil;
import cn.hutool.core.lang.Pair;
import com.alibaba.fastjson.JSONObject;
import com.helei.binanceapi.base.SubscribeResultInvocationHandler;
import com.helei.binanceapi.config.BinanceApiConfig;
import com.helei.constants.CEXType;
import com.helei.constants.RunEnv;
import com.helei.constants.WebSocketStreamParamKey;
import com.helei.constants.trade.KLineInterval;
import com.helei.constants.trade.TradeType;
import com.helei.dto.base.KeyValue;
import com.helei.realtimedatacenter.config.RealtimeConfig;
import com.helei.realtimedatacenter.dto.SymbolKLineInfo;
import com.helei.realtimedatacenter.service.MarketRealtimeDataService;
import com.helei.realtimedatacenter.service.impl.KafkaProducerService;
import com.helei.util.KafkaUtil;
import lombok.extern.slf4j.Slf4j;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.*;


/**
 * 市场实时数据服务的抽象类
 * <P>能够将市场数据推送至kafka，会根据配置文件中的run_type来加载需要使用的环境。只需关注实现registryKLineDataLoader(*)方法</P>
 */
@Slf4j
public abstract class AbstractKafkaMarketRTDataService implements MarketRealtimeDataService {

    protected final ExecutorService taskExecutor;

    public final KafkaProducerService kafkaProducerService;

    protected final RealtimeConfig realtimeConfig;

    protected final BinanceApiConfig binanceApiConfig;

    protected final CEXType cexType;

    public AbstractKafkaMarketRTDataService(ExecutorService taskExecutor, KafkaProducerService kafkaProducerService, CEXType cexType) {
        this.taskExecutor = taskExecutor;
        this.kafkaProducerService = kafkaProducerService;
        this.cexType = cexType;
        this.realtimeConfig = RealtimeConfig.INSTANCE;
        this.binanceApiConfig = BinanceApiConfig.INSTANCE;
    }

    @Override
    public Set<String> startSyncRealTimeKLine() {
        Set<String> all = new HashSet<>();
        List<CompletableFuture<Set<String>>> futures = new ArrayList<>();

        for (KeyValue<RunEnv, TradeType> keyValue : realtimeConfig.getRun_type().getRunTypeList()) {
            futures.add(CompletableFuture.supplyAsync(() -> startSyncEnvRealTimeKLine(keyValue.getKey(), keyValue.getValue()), taskExecutor));
        }

        for (CompletableFuture<Set<String>> future : futures) {
            try {
                Set<String> oneEnvKLineSet = future.get();
                all.addAll(oneEnvKLineSet);
            } catch (InterruptedException | ExecutionException e) {
                throw new RuntimeException(e);
            }
        }
        return all;
    }

    @Override
    public Set<String> startSyncEnvRealTimeKLine(RunEnv runEnv, TradeType tradeType) {
        log.info("开始同步env[{}]-tradeType[{}]的实时k线", runEnv, tradeType);

        RealtimeConfig.RealtimeKLineDataConfig realtimeKLineDataConfig = realtimeConfig.getEnvKLineDataConfig(runEnv, tradeType);

        //Step 1: 解析k线
        List<SymbolKLineInfo> realtimeKLineList = realtimeKLineDataConfig.getRealtimeKLineList();

        if (realtimeKLineList == null || realtimeKLineList.isEmpty()) {
            log.warn("runEnv[{}]-tradeType[{}] 没有设置要实时获取的k线", runEnv, tradeType);
            return Set.of();
        }

        List<Pair<String, KLineInterval>> intervals = new ArrayList<>();

        for (SymbolKLineInfo symbolKLineInfo : realtimeKLineList) {
            symbolKLineInfo.getIntervals().forEach(interval -> {
                intervals.add(new Pair<>(symbolKLineInfo.getSymbol(), interval));
            });
        }

        return startSyncEnvSymbolIntervalsKLine(runEnv, tradeType, intervals);
    }


    /**
     * 开始同步指定环境的k线信息
     *
     * @param runEnv                     运行环境
     * @param tradeType                  交易类型
     * @param intervals                  k线symbol、频率
     * @return 个数
     */
    public Set<String> startSyncEnvSymbolIntervalsKLine(RunEnv runEnv, TradeType tradeType, List<Pair<String, KLineInterval>> intervals) {
        //Step 2: 创建topic
        log.info("开始检查并创建所需topic");
        createTopic(intervals, runEnv, tradeType);
        log.info("topic创建完毕");


        //Step 3: 分片执行
        List<List<Pair<String, KLineInterval>>> partition = ListUtil.partition(intervals,
                realtimeConfig.getEnvKLineDataConfig(runEnv, tradeType).getClient_listen_kline_max_count());


        try {
            List<CompletableFuture<Set<String>>> futures = new ArrayList<>();
            for (List<Pair<String, KLineInterval>> list : partition) {

                //Step 4: 创建task执行获取
                CompletableFuture<Set<String>> future = registryKLineDataLoader(
                        runEnv,
                        tradeType,
                        list,
                        (s, p, k) -> klineDataSyncToKafka(s, (KLineInterval) p.get(WebSocketStreamParamKey.KLINE_INTERVAL), k, runEnv, tradeType),
                        taskExecutor
                );

                futures.add(future);
            }


            Set<String> all = new HashSet<>();

            CompletableFuture
                    .allOf(futures.toArray(new CompletableFuture[0]))
                    .whenCompleteAsync((unused, throwable) -> {
                        for (CompletableFuture<Set<String>> future : futures) {
                            try {
                                all.addAll(future.get());
                            } catch (InterruptedException | ExecutionException e) {
                                throw new RuntimeException(e);
                            }
                        }
                    });

            log.info("所有k线开始实时同步, [{}}", all);
            return all;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }


    /**
     * 注册k线数据加载器
     *
     * @param runEnv               运行环境
     * @param tradeType            交易类型
     * @param listenKLines         k线
     * @param whenReceiveKLineData 回调，需要在whenReceiveKLineData.invoke()时传入symbol、interval、json格式的k线数据
     * @param executorService      执行的线程池
     * @return CompletableFuture
     */
    protected abstract CompletableFuture<Set<String>> registryKLineDataLoader(
            RunEnv runEnv,
            TradeType tradeType,
            List<Pair<String, KLineInterval>> listenKLines,
            SubscribeResultInvocationHandler whenReceiveKLineData,
            ExecutorService executorService
    ) throws ExecutionException, InterruptedException;

    /**
     * 把k线发到kafka
     *
     * @param symbol symbol
     * @param data   data
     */
    public void klineDataSyncToKafka(String symbol, KLineInterval kLineInterval, JSONObject data, RunEnv runEnv, TradeType tradeType) {
        String topic = KafkaUtil.resolveKafkaTopic(cexType, KafkaUtil.getKLineStreamName(symbol, kLineInterval), runEnv, tradeType);

        log.info("收到k线信息 - {}, - {} - {} - {} send to topic[{}]", symbol, data, runEnv, tradeType, topic);
        try {
            kafkaProducerService.sendMessage(
                    topic,
                    data.toJSONString()
            ).get();
        } catch (InterruptedException | ExecutionException e) {
            log.error("保持k线信息到kafka出错，symbol[{}]", symbol, e);
        }
    }

    /**
     * 创建topic
     *
     * @param kLines    k线list
     * @param runEnv    运行环境
     * @param tradeType 交易类型
     */
    private void createTopic(List<Pair<String, KLineInterval>> kLines, RunEnv runEnv, TradeType tradeType) {
        for (Pair<String, KLineInterval> kLine : kLines) {
            String topic = KafkaUtil.resolveKafkaTopic(CEXType.BINANCE, KafkaUtil.getKLineStreamName(kLine.getKey(), kLine.getValue()), runEnv, tradeType);

            kafkaProducerService.checkAndCreateTopic(
                    topic,
                    realtimeConfig.getKafka().getKafka_num_partitions(),
                    realtimeConfig.getKafka().getKafka_replication_factor()
            );
        }
    }
}


package com.helei.realtimedatacenter.service.impl.market;

import cn.hutool.core.collection.ConcurrentHashSet;
import cn.hutool.core.lang.Pair;
import com.helei.binanceapi.BinanceWSMarketStreamClient;
import com.helei.binanceapi.base.AbstractBinanceWSApiClient;
import com.helei.binanceapi.base.SubscribeResultInvocationHandler;
import com.helei.binanceapi.constants.BinanceWSClientType;
import com.helei.cexapi.manager.BinanceBaseClientManager;
import com.helei.constants.CEXType;
import com.helei.constants.trade.KLineInterval;
import com.helei.constants.RunEnv;
import com.helei.constants.trade.TradeType;
import com.helei.realtimedatacenter.manager.ExecutorServiceManager;
import com.helei.realtimedatacenter.realtime.impl.BinanceKLineRTDataSyncTask;
import com.helei.realtimedatacenter.service.impl.KafkaProducerService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;


/**
 * 币安市场数据服务
 */
@Slf4j
@Service
public class BinanceMarketRTDataService extends AbstractKafkaMarketRTDataService {

    /**
     * 用于计数当前同步了多少种k线
     */
    private final Set<String> syncKLineSet = new ConcurrentHashSet<>();

    @Autowired
    private BinanceBaseClientManager binanceBaseClientManager;


    @Autowired
    public BinanceMarketRTDataService(ExecutorServiceManager executorServiceManager, KafkaProducerService kafkaProducerService) {
        super(executorServiceManager.getKlineTaskExecutor(), kafkaProducerService, CEXType.BINANCE);
    }

    @Override
    protected CompletableFuture<Set<String>> registryKLineDataLoader(
            RunEnv runEnv,
            TradeType tradeType,
            List<Pair<String, KLineInterval>> listenKLines,
            SubscribeResultInvocationHandler whenReceiveKLineData,
            ExecutorService executorService
    ) throws ExecutionException, InterruptedException {

        AbstractBinanceWSApiClient client = binanceBaseClientManager
                .getEnvTypedApiClient(
                        runEnv,
                        tradeType,
                        BinanceWSClientType.MARKET_STREAM,
                        "klineLoadClient-" + syncKLineSet.size() / realtimeConfig.getEnvKLineDataConfig(runEnv, tradeType).getClient_listen_kline_max_count()
                ).get();
        BinanceWSMarketStreamClient marketStreamClient = (BinanceWSMarketStreamClient) client;

        return new BinanceKLineRTDataSyncTask(
                marketStreamClient,
                listenKLines,
                this::filterKLine
        )
                .startSync(whenReceiveKLineData, taskExecutor)
                .thenApplyAsync(set -> {
                    syncKLineSet.addAll(set);
                    return set;
                }, executorService);
    }


    /**
     * 过滤注册的k线
     *
     * @return 是否过滤
     */
    private boolean filterKLine(RunEnv runEnv, TradeType tradeType, String symbol, KLineInterval kLineInterval, String key) {

        if (syncKLineSet.contains(key)) {
            return true;
        }
        syncKLineSet.add(key);

        return false;
    }

}




package com.helei.realtimedatacenter.service.impl.market;

import cn.hutool.core.lang.Pair;
import com.alibaba.fastjson.JSONObject;
import com.helei.binanceapi.base.SubscribeResultInvocationHandler;
import com.helei.constants.CEXType;
import com.helei.constants.RunEnv;
import com.helei.constants.WebSocketStreamParamKey;
import com.helei.constants.trade.KLineInterval;
import com.helei.constants.trade.TradeType;
import com.helei.realtimedatacenter.manager.ExecutorServiceManager;
import com.helei.realtimedatacenter.service.impl.KafkaProducerService;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.*;
import java.util.concurrent.*;


/**
 * 随机市场数据服务
 */
@Service
public class RandomMarketRTDataService extends AbstractKafkaMarketRTDataService {

    private final Random random = new Random();

    private final Double maxPrice = 99999.09;

    private final Double minPrice = 111.229;

    private final ConcurrentHashMap<String, ConcurrentHashMap<KLineInterval, Long>> startTimeStampMap;

    private final ConcurrentHashMap<String, ConcurrentHashMap<KLineInterval, Long>> realTimerMap;

    private final LocalDateTime startTimeStamp = LocalDateTime.of(2022, 1, 1, 1, 1);

    private long epochMilli;


    public RandomMarketRTDataService(
            ExecutorServiceManager executorServiceManager, KafkaProducerService kafkaProducerService
    ) {
        super(executorServiceManager.getKlineTaskExecutor(), kafkaProducerService, CEXType.BINANCE);

        epochMilli = startTimeStamp.toInstant(ZoneOffset.UTC).toEpochMilli();

        if (epochMilli > System.currentTimeMillis()) {
            epochMilli = System.currentTimeMillis();
        }
        this.startTimeStampMap = new ConcurrentHashMap<>();
        this.realTimerMap = new ConcurrentHashMap<>();
    }

    @Override
    protected CompletableFuture<Set<String>> registryKLineDataLoader(
            RunEnv runEnv,
            TradeType tradeType,
            List<Pair<String, KLineInterval>> listenKLines,
            SubscribeResultInvocationHandler whenReceiveKLineData,
            ExecutorService executorService
    ) {
        return CompletableFuture.supplyAsync(() -> {
            Set<String> set = new HashSet<>();
            String key = getKey(runEnv, tradeType);
            set.add(key);
            for (Pair<String, KLineInterval> listenKLine : listenKLines) {
                String symbol = listenKLine.getKey();
                KLineInterval interval = listenKLine.getValue();

                startTimeStampMap.putIfAbsent(key, new ConcurrentHashMap<>());
                realTimerMap.putIfAbsent(key, new ConcurrentHashMap<>());

                startTimeStampMap.get(key).putIfAbsent(interval, epochMilli);
                realTimerMap.get(key).putIfAbsent(interval, epochMilli);

                executorService.execute(() -> {
                    Map<String, Object> map = new HashMap<>();
                    map.put(WebSocketStreamParamKey.KLINE_INTERVAL, interval);
                    while (true) {
                        try {
                            JSONObject kLine = loadKLine(runEnv, tradeType, symbol, interval);
                            whenReceiveKLineData.invoke(symbol, map, kLine);
                            TimeUnit.SECONDS.sleep(10);
                        } catch (InterruptedException e) {
                            throw new RuntimeException(e);
                        }
                    }
                });
            }

            return set;
        }, executorService);
    }


    protected JSONObject loadKLine(
            RunEnv runEnv,
            TradeType tradeType,
            String symbol,
            KLineInterval kLineInterval
    ) {

        double nextLow = minPrice + (maxPrice - minPrice) * random.nextDouble();
        double nextHigh = nextLow + (maxPrice - nextLow) * random.nextDouble();
        double nextOpen = nextLow + (nextHigh - nextLow) * random.nextDouble();
        double nextClose = nextLow + (nextHigh - nextLow) * random.nextDouble();

        double volume = 10 + (Double.MAX_VALUE / 2 - 10) * random.nextDouble();
        long plus = kLineInterval.getSecond() * 1000;
        String key = getKey(runEnv, tradeType);
        long openTime = startTimeStampMap.get(key).get(kLineInterval);

        realTimerMap.get(key).computeIfPresent(kLineInterval, (k, v) -> v + 200);
        long curTime = realTimerMap.get(key).get(kLineInterval);

        boolean isRealTime = curTime > System.currentTimeMillis() - kLineInterval.getSecond() * 1000;
        if (isRealTime) {
            if (curTime >= openTime + plus) {
                openTime += plus;
                startTimeStampMap.get(key).put(kLineInterval, openTime);
            }
        } else {
            openTime += plus;
            startTimeStampMap.get(key).put(kLineInterval, openTime);
        }

        JSONObject jb = new JSONObject();
        jb.put("t", openTime);
        jb.put("T", openTime + plus - 1000);
        jb.put("s", symbol);
        jb.put("h", nextHigh);
        jb.put("l", nextLow);
        jb.put("o", nextOpen);
        jb.put("c", nextClose);
        jb.put("v", volume);
        jb.put("x", !isRealTime);
        jb.put("i", kLineInterval.name());

        return jb;
    }

    private String getKey(RunEnv runEnv, TradeType tradeType) {
        return runEnv.name() + " - " + tradeType.name();
    }
}



package com.helei.realtimedatacenter.service;


import com.helei.constants.RunEnv;
import com.helei.constants.trade.TradeType;

import java.util.Set;

public interface MarketRealtimeDataService {


    /**
     * 同步实时k线
     *
     * @return k线种类
     */
    Set<String> startSyncRealTimeKLine();

    /**
     * 开始同步实时k线
     * @param runEnv runEnv
     * @param tradeType tradeType
     * @return k线种数
     */
    Set<String> startSyncEnvRealTimeKLine(RunEnv runEnv, TradeType tradeType);

}


package com.helei.realtimedatacenter;

import com.helei.realtimedatacenter.service.AccountEventStreamService;
import com.helei.realtimedatacenter.service.MarketRealtimeDataService;
import com.helei.realtimedatacenter.service.UserService;
import com.helei.realtimedatacenter.service.impl.market.RandomMarketRTDataService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ConfigurableApplicationContext;

import java.util.Set;

/**
 * 实时数据中心
 */
@SpringBootApplication
public class RealtimeDataCenter {
    private static final Logger log = LoggerFactory.getLogger(RealtimeDataCenter.class);

    public static void main(String[] args) {
        ConfigurableApplicationContext applicationContext = SpringApplication.run(RealtimeDataCenter.class, args);


        startRTDataStream(applicationContext);

//        updateAllUserInfo2Redis(applicationContext);
//
//        startAccountEventStream(applicationContext);
    }

    /**
     * 开启账户事件流监听
     *
     * @param applicationContext applicationContext
     */
    private static void startAccountEventStream(ConfigurableApplicationContext applicationContext) {
        AccountEventStreamService accountEventStreamService = applicationContext.getBean(AccountEventStreamService.class);
        accountEventStreamService.startAllUserInfoEventStream();
    }

    /**
     * 开启实时数据流
     *
     * @param applicationContext applicationContext
     */
    private static void startRTDataStream(ConfigurableApplicationContext applicationContext) {
        MarketRealtimeDataService marketRealtimeDataService = applicationContext.getBean(RandomMarketRTDataService.class);
        Set<String> set = marketRealtimeDataService.startSyncRealTimeKLine();
        log.info("开始同步实时k线:\n");
        for (String s : set) {
            log.info("[{}]\n", s);
        }
    }

    /**
     * 更新用户信息到redis
     *
     * @param applicationContext applicationContext
     */
    private static void updateAllUserInfo2Redis(ConfigurableApplicationContext applicationContext) {
        UserService userService = applicationContext.getBean(UserService.class);
        userService.updateAllUserInfo();
    }
}


package com.helei.service.impl;

import com.helei.constants.RunEnv;
import com.helei.constants.trade.TradeType;
import com.helei.realtimedatacenter.service.impl.market.BinanceMarketRTDataService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.concurrent.TimeUnit;

@SpringBootTest
class BinanceMarketRTDataServiceTest {

    @Autowired
    private BinanceMarketRTDataService binanceMarketRTDataService;



    @Test
    void startSyncRealTimeKLine() throws InterruptedException {
        binanceMarketRTDataService.startSyncEnvRealTimeKLine(RunEnv.TEST_NET, TradeType.SPOT);

        TimeUnit.MINUTES.sleep(1000);
    }
}


