<template>
  <div>

    <!--    头部搜索、添加、上传 bar-->
    <div class="filter-container">
      <el-select v-for="headerName in headers"
                 v-model="headerFilterFieldValues[headerName]"
                 @clear="headerFilterFieldValues[headerName] = undefined"
                 :placeholder="headerName" clearable style="width: 90px" class="filter-item">
        <el-option v-for="item in getFieldOptions(headerName)" :key="item" :label="item" :value="item"/>
      </el-select>

      <el-button v-waves class="filter-item" type="primary" icon="el-icon-search" @click="handleFilter">
        Search
      </el-button>
      <el-button class="filter-item" style="margin-left: 10px;" type="primary" icon="el-icon-edit"
                 @click="addBatchRowData">
        Add
      </el-button>
      <el-button v-waves class="filter-item" type="success" icon="el-icon-upload" @click="handleUpload">
        Upload
      </el-button>
    </div>

    <!--    表格-->
    <el-table
      :data="filteredTableData()"
      border
      stripe
      fit
      highlight-current-row
      style="width: 100%;"
      @selection-change="handleSelectionChange"
    >
      <el-table-column type="selection" width="55"/>

      <el-table-column type="index" class-name="status-col" min-width="75">
      </el-table-column>

      <el-table-column v-for="headName in fullHeaders" :label="headName" class-name="status-col" min-width="100">
        <template slot-scope="{row}">
          <el-tag v-if="'email' === headName">{{ row[headName] }}</el-tag>
          <el-tag v-else-if="'type' === headName" type="success">
            {{ row[headName] }}
          </el-tag>
          <div v-else>{{ row[headName] }}</div>
        </template>
      </el-table-column>

      <el-table-column align="right" width="200">
        <template #header>
          <el-input v-model="newHeaderName" size="small" placeholder="输入新列名"
                    style="display: inline-block;width: 60%"/>
          <el-button type="primary" size="small" @click="addNewHeaderField">
            Add
          </el-button>
        </template>

        <template #default="scope">
          <el-button size="small" @click="handleEdit(scope.$index, scope.row)">
            Edit
          </el-button>
          <el-button
            size="small"
            type="danger"
            @click="handleDelete(scope.$index, scope.row)"
          >
            Delete
          </el-button>
        </template>
      </el-table-column>
    </el-table>

    <!--分页条-->
    <pagination v-show="data !== null && data.length >0"
                :total="data.length"
                :page.sync="listQuery.page"
                :limit.sync="listQuery.limit"
    />

    <!--    表格单行编辑弹框-->
    <el-dialog :title="'编辑第 ' + editRowIndex + '行数据'" :visible.sync="editRowFromVisible">

      <el-form ref="dataForm" :rules="rules" :model="editRowData" label-position="left"
               style="width: 400px; margin-left:50px;">
        <el-form-item v-for="headName in fullHeaders" :label="headName" prop="headName">
          <el-input v-if="editRowData !== null" v-model="editRowData[headName]"/>
        </el-form-item>
      </el-form>

      <div slot="footer" class="dialog-footer">
        <el-button @click="editRowFromVisible = false">
          Cancel
        </el-button>
        <el-button type="primary" @click="confirmEditRow">
          Confirm
        </el-button>
      </div>
    </el-dialog>

    <!--    添加界面-->
    <dynamic-field-load-from
      :ref="fieldLoadFromRef"
      :field-names="fullHeaders"
      :visible="addRowDataFromVisible"
      @batch-data-import="batchDataImportHandler"
    />
  </div>
</template>

<script>
import waves from '@/directive/waves' // waves directive
import Pagination from '@/components/Pagination'
import DynamicFieldLoadFrom from '@/views/custom/import/components/dynamic-field-load-from'

export default {
  name: 'DynamicAddColTable',
  components: {Pagination, DynamicFieldLoadFrom},
  directives: {waves},
  filters: {},
  props: {
    title: {
      type: String,
      default() {
        return ''
      }
    },
    headers: {
      type: Array,
      default() {
        return []
      }
    },
    customHeaders: {
      type: Array,
      default() {
        return []
      }
    },
    data: {
      type: Array,
      default() {
        return []
      }
    },

  },
  data() {
    return {
      newHeaderName: '',
      editRowIndex: null,
      editRowData: null,
      editRowFromVisible: false,
      addRowDataFromVisible: false,
      listQuery: {
        page: 1,
        limit: 20
      },
      headerFilterFieldValues: {},
      rules: {
        type: [{required: true, message: 'type is required', trigger: 'change'}],
        timestamp: [{type: 'date', required: true, message: 'timestamp is required', trigger: 'change'}],
        title: [{required: true, message: 'title is required', trigger: 'blur'}]
      },
      filteredTableDataIdxes: new Set(),
      selectedDataList: []
    }
  },
  created() {
  },
  computed: {
    fullHeaders() {
      return this.headers.concat(this.customHeaders)
    },
    fieldLoadFromRef() {
      return 'dynamicFieldLoadFrom[' + this.headers + ']'
    }
  },
  methods: {
    handleDelete(idx, row) {
      this.data.splice(idx, 1)
    },
    handleEdit(idx, row) {
      this.editRowIndex = idx
      this.editRowData = JSON.parse(JSON.stringify(row))

      this.editRowFromVisible = true
    },
    handleSelectionChange(rows) {
      this.selectedDataList = rows
    },
    handleFilter() {
      this.filteredTableDataIdxes.clear()

      console.log(this.headerFilterFieldValues)
      for (let i = 0; i < this.data.length; i++) {
        let line = this.data[i]
        let flag = true
        for (let headName of this.fullHeaders) {
          let targetValue = this.headerFilterFieldValues[headName];
          let currentValue = line[headName]

          if (targetValue !== undefined && targetValue !== currentValue) {
            flag = false
            break;
          }
        }

        if (!flag) this.filteredTableDataIdxes.add(i)
      }

      this.$forceUpdate()
      console.log(this.filteredTableDataIdxes)
    },
    addBatchRowData() {
      this.$refs[this.fieldLoadFromRef].toggleVisible()
    },
    handleUpload() {
      let emitData = this.data
      if (this.selectedDataList !== null && this.selectedDataList.length > 0) {
        emitData = this.selectedDataList
      }
      this.$emit("upload-data-list", emitData)
    },
    confirmEditRow() {
      this.$set(this.data, this.editRowIndex, this.editRowData)

      this.editRowIndex = null
      this.editRowData = null

      this.editRowFromVisible = false
    },
    addNewHeaderField() {
      if (this.newHeaderName === null
        || this.newHeaderName === undefined
        || this.newHeaderName === ''
      ) {
        return
      }

      this.customHeaders.push(this.newHeaderName)
      this.newHeaderName = ''
    },
    /**
     * 批量添加数据
     * @param newDataArray
     */
    batchDataImportHandler(newDataArray) {
      this.data.push(...newDataArray)
    },
    getFieldOptions(headerName) {
      let set = new Set()

      if (this.data === undefined || this.data === null) return {}

      for (let line of this.data) {
        let fieldValue = line[headerName];

        if (fieldValue !== undefined) {
          set.add(fieldValue == null ? 'null' : fieldValue)
        }
      }

      return set
    },
    filteredTableData() {
      let res = []
      for (let i = 0; i < this.data.length; i++) {
        if (!this.filteredTableDataIdxes.has(i)) {
          res.push(this.data[i])
        }
      }
      return res
    }
  }
}
</script>
<template>
  <el-dialog :close-on-click-modal="false"
             :visible.sync="isVisible">

    <div class="components-container" slot="title">

      <h3>请按照下方输入框中模板填入需导入的数据</h3>

      <el-switch
        style="display: block;float: right"
        v-model="isJsonType"
        active-color="#13ce66"
        inactive-color="#ff4949"
        active-text="JSON格式"
        :active-value="true"
        inactive-text="Excel格式"
        :inactive-value="false">
      </el-switch>

    </div>

    <div v-if="isJsonType" class="components-container">
      <aside>
        注意, 格式为一个JSON数组, 数组里的元素为每一条数据
        <br/>
        需包含 {{ fieldNames }} 字段
      </aside>

      <div class="editor-container">
        <json-editor ref="jsonEditor" v-model="jsonValue"/>
      </div>
    </div>
    <div v-else class="components-container">
      <upload-excel-component :on-success="handleExcelUploadSuccess" :before-upload="beforeExcelUpload" />
      <el-table :data="excelValue" border highlight-current-row style="width: 100%;margin-top:20px;">
        <el-table-column v-for="item of []" :key="item" :prop="item" :label="item" />
      </el-table>
    </div>

    <div slot="footer" class="dialog-footer">
      <el-button @click="isVisible = false">
        Cancel
      </el-button>
      <el-button type="primary" @click="addBatchData">
        Confirm
      </el-button>
    </div>
  </el-dialog>
</template>

<script>
import JsonEditor from "@/components/JsonEditor/index.vue";
import ElMessageBox from "dropzone";
import UploadExcelComponent from "@/components/UploadExcel/index.vue";

export default {
  name: "DynamicFieldLoadFrom",
  components: {UploadExcelComponent, JsonEditor, ElMessageBox},
  props: {
    fieldNames: {
      type: Array,
      default() {
        return []
      }
    },
    fieldExamples: {
      type: Array,
      default() {
        return []
      }
    },
    visible: {
      type: Boolean,
      default() {
        return false
      }
    }
  },
  data() {
    return {
      jsonValue: [],
      excelValue: [],
      isVisible: this.visible,
      isJsonType: true
    }
  },
  created() {
    let template = {}

    this.fieldNames.forEach(name => {
      let fieldExample = this.fieldExamples[name];
      template[name] = fieldExample === undefined ? null : fieldExample
    })

    this.jsonValue.push(template)
  },
  methods: {
    toggleVisible() {
      // 修改 data 属性
      this.isVisible = !this.isVisible;
    },
    addBatchData() {
      if (this.isJsonType) {
        this.jsonTypeAddBatchData()
      } else {

      }
    },
    beforeExcelUpload(file) {
      const isLt1M = file.size / 1024 / 1024 < 1
      console.log(file)
      if (isLt1M) {
        return true
      }

      this.$message({
        message: 'Please do not upload files larger than 1m in size.',
        type: 'warning'
      })
      return false
    },
    handleExcelUploadSuccess({ results, header }) {
      this.tableData = results
      this.tableHeader = header
    },
    jsonTypeAddBatchData() {
      let isError = false
      let errorMsg = ''

      if (this.jsonValue instanceof Array) {
        isError = true
        errorMsg = '你还未输入内容'
      }

      if (!isError) {
        try {
          let jsonArray = JSON.parse(this.jsonValue);

          if (jsonArray instanceof Array) {
            //逐条检查数据格式对不对
            for (let item of jsonArray) {
              if (isError) break

              for (let fieldName of this.fieldNames) {
                var itemElement = item[fieldName];

                if (itemElement === undefined) {
                  isError = true
                  errorMsg = '元素没有包含所有需要的字段 <' + fieldName + '>'
                }
              }
            }

            // 数据正确
          } else {
            // 警告数据格式不对
            errorMsg = 'json 格式错误'
            isError = true
          }

          if (!isError) {
            console.log('success', jsonArray)
            this.$emit('batch-data-import', jsonArray)
            this.isVisible = false
          }
        } catch (e) {
          errorMsg = '系统异常'
          isError = true
        }
      }

      if (isError) {
        // 弹框提示，
        this.$msgbox(
          '导入数据发生错误,' + errorMsg + ', 请检查输入内容再点击确定',
          '提示',
          {
            confirmButtonText: '确定',
            type: 'error'
          }
        )
      }
    }
  }
}
</script>

<style scoped lang="scss">

</style>
<template>
  <div class="app-container">
    <DynamicAddColTable
      :headers="accountBaseInfoFields"
      :data="accountBaseInfoList"
      @upload-data-list="uploadDataListHandler"
    />
  </div>
</template>

<script>
import waves from '@/directive/waves' // waves directive
import Pagination from '@/components/Pagination' // secondary package based on el-pagination
import DynamicAddColTable from "@/views/custom/import/components/dynamic-add-col-table.vue";

export default {
  name: 'ImportAccountBaseInfo',
  components: {DynamicAddColTable, Pagination},
  directives: {waves},
  filters: {},
  data() {
    return {
      accountBaseInfoFields: [
        'type', 'username', 'email', 'password'
      ],
      accountBaseInfoList: [
        {id: 1, type: 'google', username: 'test1', email: 'test1231awnkj3@qq.com', password: '12321312312'},
        {id: 2, type: 'google', username: 'test0', email: 'test12wanjd123@qq.com', password: '12321312312'},
        {id: 3, type: 'google', username: 'test2', email: 'test123asjd@qq.com', password: '12321312312'},
        {id: 4, type: 'google', username: 'test3', email: 'test1awdwa123@qq.com', password: '12321312312'},
        {type: 'google', username: 'test4', email: 'test123wad123@qq.com', password: '12321312312'},
        {type: 'google', username: 'test5', email: 'test123123awdwa@qq.com', password: '12321312312'}
      ]
    }
  },
  created() {
  },
  methods: {
    uploadDataListHandler(uploadAccountBaseInfoDataList) {
      console.log(uploadAccountBaseInfoDataList)
      this.$message('保存账户基本信息...' + uploadAccountBaseInfoDataList)
    }
  }
}
</script>
<template>
  <li :class="{ completed: todo.done, editing: editing }" class="todo">
    <div class="view">
      <input
        :checked="todo.done"
        class="toggle"
        type="checkbox"
        @change="toggleTodo( todo)"
      >
      <label @dblclick="editing = true" v-text="todo.text" />
      <button class="destroy" @click="deleteTodo( todo )" />
    </div>
    <input
      v-show="editing"
      v-focus="editing"
      :value="todo.text"
      class="edit"
      @keyup.enter="doneEdit"
      @keyup.esc="cancelEdit"
      @blur="doneEdit"
    >
  </li>
</template>

<script>
export default {
  name: 'Todo',
  directives: {
    focus(el, { value }, { context }) {
      if (value) {
        context.$nextTick(() => {
          el.focus()
        })
      }
    }
  },
  props: {
    todo: {
      type: Object,
      default: function() {
        return {}
      }
    }
  },
  data() {
    return {
      editing: false
    }
  },
  methods: {
    deleteTodo(todo) {
      this.$emit('deleteTodo', todo)
    },
    editTodo({ todo, value }) {
      this.$emit('editTodo', { todo, value })
    },
    toggleTodo(todo) {
      this.$emit('toggleTodo', todo)
    },
    doneEdit(e) {
      const value = e.target.value.trim()
      const { todo } = this
      if (!value) {
        this.deleteTodo({
          todo
        })
      } else if (this.editing) {
        this.editTodo({
          todo,
          value: jsonValue
        })
        this.editing = false
      }
    },
    cancelEdit(e) {
      e.target.value = this.todo.text
      this.editing = false
    }
  }
}
</script>
