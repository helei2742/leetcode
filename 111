<script setup lang="ts">
import DynamicAddFieldTable from "@/components/dynamic-add-field-table.vue";
import {ref} from "vue";





const accountBaseInfoList = ref(
  [
    {
      'id': '123123',
      'email': '123213@qq.com',
      'name': '123213',
      'password': '123123123'
    },
    {
      'id': '123123',
      'email': '123213@qq.com',
      'name': '123213',
      'password': '123123123'
    },
    {
      'id': '123123',
      'email': '123213@qq.com',
      'name': '123213',
      'password': '123123123'
    },
    {
      'id': '123123',
      'email': '123213@qq.com',
      'name': '123213',
      'password': '123123123'
    }
  ]
)
</script>

<template>
  <div>
    <dynamic-add-field-table
      :headers="['id', 'name', 'password']"
      id-field="id"
      :data="accountBaseInfoList"
    >

    </dynamic-add-field-table>
  </div>
</template>

<style scoped>

</style>
<script setup lang="ts">
import {ArrowDown, Upload} from '@element-plus/icons-vue'
import {computed, ref,} from "vue";
import type {TableColumnCtx, UploadInstance} from "element-plus";

interface Props {
  headers: string[],
  idField: string,
  data: object[]
}

const props = defineProps<Props>();

const extraFieldList = computed(() => {
  if (props.data.length > 0) {
    const keys: string[] = Object.keys(props.data[0]);
    return keys.filter(key => key != '$$edit' && props.headers.indexOf(key) === -1)
  }
  return []
})

const selectFieldList = ref([...props.headers])
const searchValue = ref('')

function getFieldValueList(field): Array<{ text: string, value: string }> {
  if (props.data.length > 0) {
    const unique = [...new Set(props.data.map(item => item[field]))]
    return unique.map(obj => {
      return {text: obj, value: obj}
    })
  }
  return []
}

const filterHandler = (
  value: string,
  row: object,
  column: TableColumnCtx<object>
) => {
  const property = column['property']
  return row[property] === value
}


const multipleSelection = ref([])

function handleSelectionChange(lineData) {
  multipleSelection.value = lineData
}


// editable table
const editState = ref({
  row: -1
})
function handleUpdateRaw(raw, index, column) {
  editState.value.row = -1
}

function cellClickHandler(scope) {
  if (editState.value.row == scope.$index) {
    editState.value.row = -1
  } else {
    editState.value.row = scope.$index
  }
}

// upload
const isCanUpdate = ref(false)
const uploadRef = ref<UploadInstance>()
const submitUpload = () => {
  uploadRef.value!.submit()
}
</script>

<template>
  <div class="dynamic-add-field-table">
    <div class="select-bar-list">
      <el-dropdown trigger="click">
        <el-button>
          <el-icon class="el-icon--left">
            <arrow-down/>
          </el-icon>
          Field
        </el-button>
        <template #dropdown>
          <el-dropdown-menu>
            <el-dropdown-item v-for="item in headers" :key="item">
              <el-checkbox :label="item" disabled/>
            </el-dropdown-item>
            <el-dropdown-item v-for="item in extraFieldList" :key="item">
              <el-checkbox-group v-model="selectFieldList">
                <el-checkbox :label="item"/>
              </el-checkbox-group>
            </el-dropdown-item>
          </el-dropdown-menu>
        </template>
      </el-dropdown>

      <el-upload
        class="upload-demo"
        :show-file-list="false"
        :limit="1"
        :auto-upload="false"
      >
        <el-button v-if="isCanUpdate" type="success" @click="submitUpload" disabled>
          Upload
          <el-icon class="el-icon--right">
            <Upload/>
          </el-icon>
        </el-button>
        <el-button v-else>select file</el-button>
      </el-upload>

      <slot name="toolbar"></slot>
    </div>

    <div class="add-field-table">
      <el-table ref="tableRef"
                :data="data"
                :height="600"
                highlight-current-row
                stripe
                size="large"
                @selection-change="handleSelectionChange"
                style="width: 100%"
      >
        <el-table-column type="selection" width="55"/>

        <el-table-column
          v-for="item in selectFieldList"
          :key="item"
          :prop="item"
          :label="item"
          show-overflow-tooltip
          :filters="getFieldValueList(item)"
          :filter-method="filterHandler"
        >
          <template #default="scope">
            <el-input
              v-if="editState.row==scope.$index"
              v-model="scope.row[item]"
              size="small"
            />
            <div
              v-else
              @click="cellClickHandler(scope)"
            >
              {{ scope.row[item] }}
            </div>
          </template>
        </el-table-column>

        <el-table-column fixed="right" width="180">
          <template #header>
            <el-button size="small" type="danger">Delete</el-button>
          </template>
          <template #default="scope">
            <el-button
              v-if="editState.row==scope.$index"
              size="small"
              type="success"
              @click="handleUpdateRaw(scope.row, scope.$index, scope.column)">
              Save
            </el-button>
            <el-button v-else size="small" @click="editState.row=scope.$index">
              Edit
            </el-button>
          </template>
        </el-table-column>
      </el-table>
    </div>
  </div>
</template>

<style scoped>
.dynamic-add-field-table {
}

.select-bar-list {
  display: flex;
  gap: 6px;
  margin-bottom: 10px;
}

.add-field-table {
  position: relative;
  height: 600px;
  background-color: #fff;
  border-radius: 10px;
}

.add-field-table > .el-table {
  position: absolute;
}


::v-deep .el-table,
.el-table__expanded-cell {
  padding: 20px !important;
  background-color: transparent !important;
}

::v-deep .el-table th {
  background-color: transparent !important;
  border-bottom: 1px solid rgba(100, 100, 100, 0.3) !important;
}

::v-deep .el-table tr {
  background-color: transparent !important;
}

::v-deep .el-table--enable-row-transition .el-table__body td,
::v-deep .el-table .cell {
  //background-color: transparent !important;
  border: none !important;
}

:deep(.select-bar-list .el-button:hover) {
  background-color: azure !important;
}

:deep(.select-bar-list .el-button:active) {
  background-color: azure !important;
}

:deep(.el-table .el-table__cell) {
  padding: 0 !important;
  height: 30px;
}

:deep(.el-table .el-input__inner ) {
  height: 30px;
  font-size: 16px;
}
</style>
<script setup lang="ts">
import {ref, onMounted, onUnmounted} from 'vue';
import VortexaMenu from "@/views/homepage/components/vortexa-menu/vortexa-menu.vue";
import VortexaHeader from "@/views/homepage/components/vortexa-header/vortexa-header.vue";
import VortexaBanner from "@/views/homepage/components/vortexa-banner-tool/vortexa-banner-tool.vue";
import {useWindowSizeStore} from "@/stores/windowSize.ts";

const windowSizeStore = useWindowSizeStore()

const isDesktop = ref(window.innerWidth > 780);

const updateLayout = () => {
  isDesktop.value = window.innerWidth > 780;
  windowSizeStore.updateWindowSize(window.innerWidth, window.innerHeight)
};

onMounted(() => {
  window.addEventListener('resize', updateLayout);
});

onUnmounted(() => {
  window.removeEventListener('resize', updateLayout);
});
</script>

<template>
  <div class="vortexa-app">
    <div style="display: flex;">
      <div v-if="isDesktop" class="sidebar">
        <vortexa-banner/>
        <vortexa-menu :is-horizontal="!isDesktop"/>
      </div>

      <div class="vortexa-main">
        <vortexa-header style="margin-bottom: 14px"/>
        <router-view/>
      </div>
    </div>

    <div class="bottom-menu">
      <vortexa-menu v-if="!isDesktop" :is-horizontal="!isDesktop"/>
    </div>
  </div>
</template>

<style scoped>
.vortexa-app {
  min-height: 100vh;
  background-color: #fafaf9;
  max-width: 1980px;
  padding: 20px;
  margin: auto;
}

.vortexa-app > .sidebar {
  width: 208px;
  padding: 24px 16px;
}

.vortexa-main {
  flex: 1;
}

.bottom-menu {
  position: fixed;
  bottom: 0;
  height: 60px;
  width: 100%;
}
</style>
