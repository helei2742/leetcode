CREATE TABLE `t_chat_wallet`
(
    `id`              bigint                                                        NOT NULL AUTO_INCREMENT,
    `chat_id`         varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT 'chatId',
    `private_key`     varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '私钥',
    `public_key`      varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '公匙',
    `secret_key`      varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '密匙\r\n',
    `solAmount` double DEFAULT NULL COMMENT 'sol数量',
    `create_datetime` datetime DEFAULT NULL COMMENT '创建时间',
    `update_datetime` datetime DEFAULT NULL COMMENT '更新时间',
    `is_valid`        tinyint(1) DEFAULT NULL COMMENT '是否可用',
    PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

CREATE TABLE `t_chat_default_wallet`
(
    `chat_id`    varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT 'chatId',
    `public_key` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '钱包公匙（地址）',
    PRIMARY KEY (`chat_id` DESC)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;


package com.helei.solanarpc.util;


import cn.hutool.core.codec.Base58;
import cn.hutool.core.lang.Pair;
import com.portto.solana.web3.Account;
import com.portto.solana.web3.util.TweetNaclFast;

public class SolanaKeyAddressUtil {


    /**
     * 从私匙中获取公匙和密匙
     *
     * @param privateKey privateKey
     * @return (publicKey, secretKey)
     */
    public static Pair<String, String> getPSKeyFromPrivateKey(String privateKey) {
        byte[] decode = Base58.decode(privateKey);
        Account account = new Account(TweetNaclFast.Signature.keyPair_fromSecretKey(decode));
        return new Pair<>(account.getPublicKey().toBase58(), Base58.encode(account.getSecretKey()));
    }

}


<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.helei</groupId>
        <artifactId>ShinanoQuanti</artifactId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>

    <artifactId>SolanaRPC</artifactId>
    <packaging>jar</packaging>

    <name>SolanaRPC</name>
    <url>http://maven.apache.org</url>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.helei</groupId>
            <artifactId>Base</artifactId>
            <version>0.0.1-SNAPSHOT</version>
        </dependency>

        <dependency>
            <groupId>com.portto.solana</groupId>
            <artifactId>web3</artifactId>
            <version>0.1.3</version>
        </dependency>

        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
        </dependency>

        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>


        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>


package com.helei.telegramebot.bot.impl;

import com.helei.dto.base.Result;
import com.helei.solanarpc.dto.SolanaAddress;
import com.helei.telegramebot.bot.MenuBaseTelegramBot;
import com.helei.telegramebot.bot.SolanaTelegramBot;
import com.helei.telegramebot.bot.menu.solana.SolanaBotMenu;

import com.helei.telegramebot.config.command.SolanaBotCommand;
import com.helei.telegramebot.config.command.TelegramBotNameSpaceCommand;
import com.helei.telegramebot.service.ISolanaATBotPersistenceService;
import com.helei.telegramebot.service.ITelegramPersistenceService;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import org.telegram.telegrambots.meta.api.objects.Message;

import java.util.List;
import java.util.concurrent.ExecutorService;


@Setter
@Slf4j
public class SolanaAutoTradeTelegramBot extends MenuBaseTelegramBot implements SolanaTelegramBot {


    private ISolanaATBotPersistenceService solanaATBotPersistenceService;


    public SolanaAutoTradeTelegramBot(
            String botUsername,
            String token,
            ISolanaATBotPersistenceService solanaATBotPersistenceService,
            ITelegramPersistenceService telegramPersistenceService,
            ExecutorService executor
    ) {
        super(botUsername, token, telegramPersistenceService, executor);
        super.init(new SolanaBotMenu(this, getTelegramPersistenceService(), solanaATBotPersistenceService));
    }


    @Override
    public Result commandMessageHandler(TelegramBotNameSpaceCommand.NameSpace nameSpace, String nameSpaceCommand, List<?> params, Message message) {
        SolanaBotCommand solanaBotCommand = SolanaBotCommand.valueOf(nameSpaceCommand);

        return switch (solanaBotCommand) {
            case BIND_WALLET_ADDRESS -> bindWalletAddress(params, message);
            case ADD_LISTEN_ACCOUNT -> updateTransactionListenAccount(params, message);
            case CANCEL_LISTEN_ACCOUNT -> cancelTransactionListenAccount(params, message);
        };
    }


    @Override
    public Result normalMessageHandler(String messageText, Message message) {
        return null;
    }

    @Override
    public Result bindWalletAddress(List<?> params, Message message) {
        //Step 1 参数校验
        if (params.isEmpty()) return Result.fail("参数错误");

        //Step 2 解析参数
        String privateKey = (String) params.getFirst();

        return solanaATBotPersistenceService.bindWalletByPrivateKey(getBotUsername(), String.valueOf(message.getChatId()), privateKey);
    }


    @Override
    public Result updateTransactionListenAccount(List<?> params, Message message) {
        //Step 1 参数校验
        if (params.isEmpty()) return Result.fail("参数错误");

        //Step 2 解析参数
        String address = (String) params.getFirst();
        String name = "";
        if (params.size() >= 2) {
            name = (String) params.get(1);
        }
        String description = "";
        if (params.size() >= 3) {
            description = (String) params.get(2);
        }

        SolanaAddress solanaAddress = SolanaAddress
                .builder()
                .accountAddress(address)
                .name(name)
                .description(description)
                .build();

        //Step 3 保存
        return solanaATBotPersistenceService.updateChatListenAddress(getBotUsername(), String.valueOf(message.getChatId()), solanaAddress);
    }

    @Override
    public Result cancelTransactionListenAccount(List<?> params, Message message) {
        //Step 1 参数校验
        if (params.isEmpty()) return Result.fail("参数错误");

        //Step 2 解析参数
        String address = (String) params.getFirst();

        //Step 3 删除
        return solanaATBotPersistenceService.deleteChatListenAddress(getBotUsername(), String.valueOf(message.getChatId()), address);
    }
}

package com.helei.telegramebot.bot.menu.solana.wallet;

import com.helei.telegramebot.bot.MenuBaseTelegramBot;
import com.helei.telegramebot.bot.menu.TGMenuNode;
import com.helei.telegramebot.bot.menu.TGMenuNodeEnd;
import com.helei.telegramebot.entity.ChatWallet;
import com.helei.telegramebot.service.ISolanaATBotPersistenceService;
import org.jetbrains.annotations.NotNull;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public abstract class AbstractWalletMenuNode extends TGMenuNodeEnd {


    private MenuBaseTelegramBot bot;

    protected ISolanaATBotPersistenceService persistenceService;

    public AbstractWalletMenuNode(
            TGMenuNode parentMenu,
            String buttonText,
            String callbackData
    ) {
        super(parentMenu, buttonText, callbackData);
    }

    @Override
    public SendMessage menuCommandHandler(List<String> params, Message message) {
        return menuCommandHandler(bot, params, message);
    }

    protected abstract SendMessage menuCommandHandler(MenuBaseTelegramBot bot, List<String> params, Message message);

    /**
     * 构建选择钱包的动态菜单
     *
     * @param text    文字
     * @param nodeEnd 菜单节点
     * @param chatId  chatId
     * @return 菜单
     */
    protected @NotNull SendMessage buildWalletSelectDynamicMenu(String text, TGMenuNodeEnd nodeEnd, String chatId) {
        SendMessage dynamicMenu = new SendMessage();
        dynamicMenu.setChatId(chatId);

        //Step 1 查默认钱包公匙
        String pubKey = persistenceService.queryChatIdDefaultWalletAddress(bot.getBotUsername(), chatId);

        //Step 2 查询所有钱包
        List<ChatWallet> chatWallets = persistenceService.queryChatIdAllWallet(bot.getBotUsername(), chatId);

        //Step 3 分出默认钱包
        dispatchDefaultWallet(chatWallets, pubKey);

        //Step 4 构建消息文字
        dynamicMenu.setText(text);

        //Step 5 构建动态键盘
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboardRows = new ArrayList<>();

        for (int i = 0; i < chatWallets.size(); i++) {
            ChatWallet chatWallet = chatWallets.get(i);

            InlineKeyboardButton inlineKeyboardButton = new InlineKeyboardButton("钱包 - " + i + 1);
            inlineKeyboardButton.setCallbackData(nodeEnd.getCallbackData() + " " + chatWallet.getPublicKey() + " end");
            keyboardRows.add(List.of(inlineKeyboardButton));
        }
        markup.setKeyboard(keyboardRows);
        dynamicMenu.setReplyMarkup(markup);
        return dynamicMenu;
    }

    /**
     * 分出默认钱包，会减少chatWallets
     *
     * @param chatWallets 钱包list
     * @param pubKey      默认钱包的公钥
     * @return 默认钱包
     */
    private ChatWallet dispatchDefaultWallet(List<ChatWallet> chatWallets, String pubKey) {
        ChatWallet defaultWallet = null;
        Optional<ChatWallet> first = chatWallets.stream().filter(c -> !pubKey.equals(c.getPublicKey())).findFirst();
        if (first.isPresent()) {
            defaultWallet = first.get();
            chatWallets.remove(defaultWallet);
        }
        return defaultWallet;
    }

    public void init(MenuBaseTelegramBot bot, ISolanaATBotPersistenceService solanaATBotPersistenceService) {
        this.bot = bot;
        this.persistenceService = solanaATBotPersistenceService;
    }
}


package com.helei.telegramebot.bot.menu.solana.wallet;

import cn.hutool.core.util.StrUtil;
import com.helei.telegramebot.bot.MenuBaseTelegramBot;
import com.helei.telegramebot.bot.menu.TGMenuNode;
import lombok.extern.slf4j.Slf4j;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ForceReplyKeyboard;

import java.util.List;

@Slf4j
public class BindWalletMenuNode extends AbstractWalletMenuNode{


    public BindWalletMenuNode(TGMenuNode parentMenu) {
        super(parentMenu, "绑定钱包", "BIND_WALLET");
    }

    @Override
    public SendMessage buildDynamicMenu(String chatId) {
        SendMessage dynamicMenu = new SendMessage();
        dynamicMenu.setChatId(chatId);
        dynamicMenu.setText("请输入需要绑定的钱包私匙");

        ForceReplyKeyboard forceReplyKeyboard = new ForceReplyKeyboard();
        forceReplyKeyboard.setSelective(true);

        dynamicMenu.setReplyMarkup(forceReplyKeyboard);

        return dynamicMenu;
    }

    @Override
    protected SendMessage menuCommandHandler(MenuBaseTelegramBot bot, List<String> params, Message message) {
        String chatId = String.valueOf(message.getChatId());

        //Step 1 参数校验
        String privateKey = params.getFirst();
        if (StrUtil.isBlank(privateKey)) {
            log.error("chatId[{}] - [{}]命令参数为空", getButtonText(), chatId);
            return null;
        }


        return null;
    }
}



package com.helei.telegramebot.bot.menu.solana.wallet;

import com.helei.telegramebot.bot.MenuBaseTelegramBot;
import com.helei.telegramebot.bot.menu.TGMenuNode;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;

import java.util.List;

public class CancelBindWalletMenuNode extends AbstractWalletMenuNode{

    public CancelBindWalletMenuNode(TGMenuNode parentMenu) {
        super(parentMenu,"解除绑定", "CANCEL_BIND_WALLET");
    }

    @Override
    public SendMessage buildDynamicMenu(String chatId) {
        return buildWalletSelectDynamicMenu("请选择希望解除绑定的钱包\n注意,解绑操作无法撤回，请确保已保存好私匙,否则无法恢复钱包，可能会造成资产损失", this, chatId);
    }

    @Override
    protected SendMessage menuCommandHandler(MenuBaseTelegramBot bot, List<String> params, Message message) {
        return null;
    }
}




package com.helei.telegramebot.bot.menu.solana.wallet;

import cn.hutool.core.util.StrUtil;
import com.helei.telegramebot.bot.MenuBaseTelegramBot;
import com.helei.telegramebot.bot.menu.TGMenuNode;
import com.helei.telegramebot.entity.ChatWallet;
import lombok.extern.slf4j.Slf4j;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.List;



/**
 * 修改默认钱包菜单
 */
@Slf4j
public class ChangeDefaultWalletMenuNode extends AbstractWalletMenuNode {


    public ChangeDefaultWalletMenuNode(TGMenuNode parentMenu) {
        super(parentMenu,  "切换默认钱包", "CHANGE_DEFAULT_WALLET");
    }

    @Override
    public SendMessage buildDynamicMenu(String chatId) {
        return buildWalletSelectDynamicMenu("请点击键盘选择要更换的默认钱包", this, chatId);
    }

    @Override
    public SendMessage menuCommandHandler(MenuBaseTelegramBot bot, List<String> params, Message message) {
        String chatId = String.valueOf(message.getChatId());

        //Step 1 参数校验
        String pubKey = params.getFirst();
        if (StrUtil.isBlank(pubKey)) {
            log.error("chatId[{}] - [{}]命令参数为空", getButtonText(), chatId);
            return null;
        }

        //Step 2 公钥校验
        ChatWallet query = new ChatWallet();
        query.setPublicKey(pubKey);
        query.setChatId(chatId);

        ChatWallet chatWallet = persistenceService.queryChatIdWallet(query);
        if (chatWallet == null) {
            log.error("chatId[{}]不存在publicKey[{}]的钱包", chatId, pubKey);
            return null;
        }

        //Step 3 更新数据
        persistenceService.updateDefaultWalletAddress(bot.getBotUsername(), chatId, pubKey, true);


        //Step 4 删除之前的选择消息
        DeleteMessage deleteMessage = new DeleteMessage();
        deleteMessage.setChatId(chatId);
        deleteMessage.setMessageId(message.getMessageId());
        try {
            bot.execute(deleteMessage);
        } catch (TelegramApiException e) {
            log.error("删除消息[{}}执行失败", deleteMessage);
        }

        //Step 5 发送消息提示
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(String.format("默认钱包已更改为[%s]-[%s...]", chatWallet.getId(), pubKey.substring(0, 8)));
        return sendMessage;
    }
}


package com.helei.telegramebot.bot.menu.solana.wallet;

import com.helei.telegramebot.bot.MenuBaseTelegramBot;
import com.helei.telegramebot.bot.menu.TGMenuNode;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;

import java.util.List;

public class ExportPrivateKeyMenuNode extends AbstractWalletMenuNode{

    public ExportPrivateKeyMenuNode(TGMenuNode parentMenu) {
        super(parentMenu,"导出私匙", "EXPORT_PRIVATE_KEY");
    }

    @Override
    public SendMessage buildDynamicMenu(String chatId) {
        return buildWalletSelectDynamicMenu("请选择希望导出私匙的钱包", this, chatId);
    }

    @Override
    protected SendMessage menuCommandHandler(MenuBaseTelegramBot bot, List<String> params, Message message) {
        return null;
    }
}



package com.helei.telegramebot.bot.menu.solana.wallet;

import com.helei.telegramebot.bot.MenuBaseTelegramBot;
import com.helei.telegramebot.bot.menu.TGMenuNode;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;

import java.util.List;

public class SendSolMenuNode extends AbstractWalletMenuNode{

    public SendSolMenuNode(TGMenuNode parentMenu) {
        super(parentMenu,"转出sol", "SEND_SOL");
    }

    @Override
    public SendMessage buildDynamicMenu(String chatId) {
        return buildWalletSelectDynamicMenu("请选择希望转出sol的钱包", this, chatId);
    }

    @Override
    protected SendMessage menuCommandHandler(MenuBaseTelegramBot bot, List<String> params, Message message) {
        return null;
    }
}


package com.helei.telegramebot.bot.menu.solana.wallet;

import com.helei.telegramebot.bot.MenuBaseTelegramBot;
import com.helei.telegramebot.bot.menu.TGMenuNode;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;

import java.util.List;


/**
 * 设置钱包名称菜单节点
 */
public class SetWalletNameMenuNode extends AbstractWalletMenuNode{


    public SetWalletNameMenuNode(TGMenuNode parentMenu) {
        super(parentMenu, "设置钱包名称", "SET_WALLET_NAME");
    }

    @Override
    public SendMessage buildDynamicMenu(String chatId) {
        return buildWalletSelectDynamicMenu("请选择希望设置名称的钱包", this, chatId);
    }

    @Override
    protected SendMessage menuCommandHandler(MenuBaseTelegramBot bot, List<String> params, Message message) {
        return null;
    }
}


package com.helei.telegramebot.bot.menu.solana;


import com.helei.telegramebot.entity.ChatWallet;
import com.helei.telegramebot.service.ISolanaATBotPersistenceService;
import com.helei.telegramebot.template.SolanaBotWalletTittleTemplate;
import lombok.extern.slf4j.Slf4j;
import org.jetbrains.annotations.NotNull;

import java.util.List;
import java.util.Optional;

@Slf4j
public class SolanaBotDynamicMenuSupporter {

    private final String botUsername;

    private final ISolanaATBotPersistenceService persistenceService;

    public SolanaBotDynamicMenuSupporter(String botUsername, ISolanaATBotPersistenceService persistenceService) {
        this.botUsername = botUsername;
        this.persistenceService = persistenceService;
    }


//<==================================================================================   主菜单    ========================================================================================================================================>

    /**
     * 主菜单的tittle
     *
     * @param chatId chatId
     * @return tittle
     */
    public String mainMenuTittle(String chatId) {

        return "欢迎来到tg机器人";
    }

//<==================================================================================   设置    ========================================================================================================================================>

    /**
     * 设置菜单的tittle
     *
     * @param chatId chatId
     * @return tittle
     */
    public String settingMenuTittle(String chatId) {
        return "我的设置";
    }
//<==================================================================================   地址追踪    ========================================================================================================================================>

    /**
     * 追踪地址菜单标题
     *
     * @param chatId chatId
     * @return tittle
     */
    public String tranceAddressMenuTittle(String chatId) {
        return "地址追踪 - 未完成";
    }
//<==================================================================================   交易    ========================================================================================================================================>


    /**
     * 交易菜单标题
     *
     * @param chatId chatId
     * @return tittle
     */
    public String transactionMenuTittle(String chatId) {
        return "交易 - 未完成";
    }


//<==================================================================================   钱包    ========================================================================================================================================>

    /**
     * 钱包菜单标题
     *
     * @param chatId chatId
     * @return tittle
     */
    public String walletMenuTittle(String chatId) {
        //Step 1 查默认钱包公匙
        String pubKey = persistenceService.queryChatIdDefaultWalletAddress(botUsername, chatId);

        //Step 2 查询所有钱包
        List<ChatWallet> chatWallets = persistenceService.queryChatIdAllWallet(botUsername, chatId);

        //Step 3 找到默认钱包
        ChatWallet defaultWallet = dispatchDefaultWallet(chatWallets, pubKey);

        //Step 3 生成title

        return buildAllWalletInfoStr(defaultWallet, chatWallets);
    }


    /**
     * 分出默认钱包，会减少chatWallets
     *
     * @param chatWallets 钱包list
     * @param pubKey      默认钱包的公钥
     * @return 默认钱包
     */
    private ChatWallet dispatchDefaultWallet(List<ChatWallet> chatWallets, String pubKey) {
        ChatWallet defaultWallet = null;
        Optional<ChatWallet> first = chatWallets.stream().filter(c -> !pubKey.equals(c.getPublicKey())).findFirst();
        if (first.isPresent()) {
            defaultWallet = first.get();
            chatWallets.remove(defaultWallet);
        }
        return defaultWallet;
    }

    /**
     * 构建所有钱包信息字符串
     *
     * @param defaultWallet defaultWallet
     * @param chatWallets   chatWallets
     * @return string
     */
    private static @NotNull String buildAllWalletInfoStr(ChatWallet defaultWallet, List<ChatWallet> chatWallets) {
        StringBuilder tittle = new StringBuilder();

        if (defaultWallet != null) {
            tittle.append("默认钱包:\n").append(SolanaBotWalletTittleTemplate.aChatWalletPrintStr(defaultWallet, defaultWallet.getId()));
        }

        tittle.append("其它钱包:\n");
        for (ChatWallet chatWallet : chatWallets) {
            tittle.append(SolanaBotWalletTittleTemplate.aChatWalletPrintStr(chatWallet, chatWallet.getId())).append("\n");
        }

        return tittle.toString();
    }
    /**
     * 绑定钱包菜单标题
     *
     * @param chatId chatId
     * @return tittle
     */
    public String walletBindWalletMenuTittle(String chatId) {
        return "绑定钱包";
    }

    /**
     * 创建钱包菜单标题
     *
     * @param chatId chatId
     * @return tittle
     */
    public String walletCreateWalletMenuTittle(String chatId) {
        return "创建钱包";
    }
}



package com.helei.telegramebot.bot.menu.solana;


import com.helei.dto.base.Result;
import com.helei.telegramebot.bot.impl.SolanaAutoTradeTelegramBot;
import com.helei.telegramebot.bot.menu.TGMenuNode;
import com.helei.telegramebot.bot.menu.TelegramBotMenu;
import com.helei.telegramebot.bot.menu.solana.wallet.*;
import com.helei.telegramebot.service.ISolanaATBotPersistenceService;
import com.helei.telegramebot.service.ITelegramPersistenceService;
import lombok.extern.slf4j.Slf4j;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


/**
 * 机器人菜单
 */
@Slf4j
public class SolanaBotMenu implements Serializable, TelegramBotMenu {

    /**
     * 机器人的username
     */
    private final SolanaAutoTradeTelegramBot bot;

    /**
     * 持久化服务
     */
    private final ITelegramPersistenceService telegramPersistenceService;


    /**
     * 持久化服务
     */
    private final ISolanaATBotPersistenceService solanaATBotPersistenceService;


    /**
     * 标题创建相关的
     */
    private final SolanaBotDynamicMenuSupporter dynamicMenuSupporter;

    /**
     * 菜单根节点
     */
    private final TGMenuNode menuRoot;

    public SolanaBotMenu(SolanaAutoTradeTelegramBot bot, ITelegramPersistenceService telegramPersistenceService, ISolanaATBotPersistenceService solanaATBotPersistenceService) {
        this.bot = bot;
        this.telegramPersistenceService = telegramPersistenceService;
        this.solanaATBotPersistenceService = solanaATBotPersistenceService;
        this.dynamicMenuSupporter = new SolanaBotDynamicMenuSupporter(bot.getBotUsername(), solanaATBotPersistenceService);
        this.menuRoot = initMenuGraph();
    }


    @Override
    public SendMessage initChatMenu(String chatId) {
        Result result = telegramPersistenceService.saveChatMenuState(bot.getBotUsername(), chatId, menuRoot);

        if (result.getSuccess()) {
            Integer id = (Integer) result.getData();
            TGMenuNode tgMenuNode = TGMenuNode.nodeIdMap.get(id);

            return tgMenuNode.getMenu(chatId);
        } else {
            SendMessage sendMessage = new SendMessage();
            sendMessage.setChatId(chatId);
            sendMessage.setText(result.getErrorMsg());
            return sendMessage;
        }
    }

    @Override
    public TGMenuNode getCurrentMenuState(String chatId) {
        Result result = telegramPersistenceService.getChatMenuState(bot.getBotUsername(), chatId);

        if (result.getSuccess()) {
            return TGMenuNode.nodeIdMap.get((Integer) result.getData());
        } else {
            return menuRoot;
        }
    }

    @Override
    public TGMenuNode getPrefer(String chatId) {

        return getCurrentMenuState(chatId).getParentMenu();
    }


    @Override
    public SendMessage getCurrentMenu(String chatId) {
        TGMenuNode currentMenu = getCurrentMenuState(chatId);
        SendMessage menu = currentMenu.getMenu(chatId);
        return menu;
    }


    @Override
    public SendMessage menuCommandHandler(String menuCommand, Message message) {
        //末端菜单选择时的消息
        String[] split = menuCommand.split(" ");
        String command = split[0];
        List<String> params = new ArrayList<>();

        if (split.length > 1) {
            params.addAll(Arrays.asList(split).subList(1, split.length));
        }

        TGMenuNode tgMenuNode = TGMenuNode.commandMap.get(command);
        log.info("收到菜单信息[{}], params[{}] menuNode[{}]", command, params, tgMenuNode);

        if (!params.isEmpty()) {
            return tgMenuNode.menuCommandHandler(params, message);
        } else {
            return tgMenuNode.getMenu(String.valueOf(message.getChatId()));
        }
    }


    /**
     * 初始化菜单图
     *
     * @return TGMenuNode
     */
    private TGMenuNode initMenuGraph() {
        // 1,主菜单
        TGMenuNode menuRoot = new TGMenuNode(null, dynamicMenuSupporter::mainMenuTittle, "主菜单", "MAIN");

        // 2.钱包菜单
        TGMenuNode walletMenu = createWalletMenu(menuRoot);

        // 3.交易菜单
        TGMenuNode transaction = createTransactionMenu(menuRoot);

        // 4,追踪地址菜单
        TGMenuNode tranceAddress = createTranceAddressMenu(menuRoot);

        // 5.设置菜单
        TGMenuNode setting = createSettingMenu(menuRoot);


        menuRoot.getSubMenu().add(walletMenu);
        menuRoot.getSubMenu().add(transaction);
        menuRoot.getSubMenu().add(tranceAddress);
        menuRoot.getSubMenu().add(setting);

        return menuRoot;
    }

    /**
     * 创建设置菜单
     *
     * @param menuRoot menuRoot
     * @return TGMenuNode
     */
    private TGMenuNode createSettingMenu(TGMenuNode menuRoot) {
        TGMenuNode setting = new TGMenuNode(menuRoot, dynamicMenuSupporter::settingMenuTittle, "设置", "SETTING");


        return setting;
    }

    /**
     * 交易菜单
     *
     * @param menuRoot menuRoot
     * @return TGMenuNode
     */
    private TGMenuNode createTranceAddressMenu(TGMenuNode menuRoot) {
        TGMenuNode trance = new TGMenuNode(menuRoot, dynamicMenuSupporter::tranceAddressMenuTittle, "跟踪地址", "TRANCE_ADDRESS");


        return trance;
    }


    /**
     * 交易菜单
     *
     * @param menuRoot menuRoot
     * @return TGMenuNode
     */
    private TGMenuNode createTransactionMenu(TGMenuNode menuRoot) {
        TGMenuNode transactionMenu = new TGMenuNode(menuRoot, dynamicMenuSupporter::transactionMenuTittle, "交易", "TRANSACTION");

        return transactionMenu;
    }


    /**
     * 钱包菜单，包括钱包菜单下的子菜单
     *
     * @param menuRoot menuRoot
     * @return TGMenuNode
     */
    private TGMenuNode createWalletMenu(TGMenuNode menuRoot) {
        TGMenuNode walletMenu = new TGMenuNode(menuRoot, dynamicMenuSupporter::walletMenuTittle, "我的钱包", "WALLET");

        AbstractWalletMenuNode BIND_WALLET = new BindWalletMenuNode(walletMenu);
        AbstractWalletMenuNode CHANGE_DEFAULT_WALLET = new ChangeDefaultWalletMenuNode(walletMenu);

        AbstractWalletMenuNode SET_WALLET_NAME = new SetWalletNameMenuNode(walletMenu);
        AbstractWalletMenuNode CANCEL_BIND_WALLET = new CancelBindWalletMenuNode(walletMenu);
        AbstractWalletMenuNode EXPORT_PRIVATE_KEY = new ExportPrivateKeyMenuNode(walletMenu);
        AbstractWalletMenuNode SEND_SOL = new SendSolMenuNode(walletMenu);


        TGMenuNode CREATE_WALLET = new TGMenuNode(walletMenu, dynamicMenuSupporter::walletCreateWalletMenuTittle, "生成钱包", "CREATE_WALLET");

        BIND_WALLET.init(bot, solanaATBotPersistenceService);
        CHANGE_DEFAULT_WALLET.init(bot, solanaATBotPersistenceService);
        SET_WALLET_NAME.init(bot, solanaATBotPersistenceService);
        CANCEL_BIND_WALLET.init(bot, solanaATBotPersistenceService);
        EXPORT_PRIVATE_KEY.init(bot, solanaATBotPersistenceService);
        SEND_SOL.init(bot, solanaATBotPersistenceService);


        walletMenu.getSubMenu().add(CHANGE_DEFAULT_WALLET);
        walletMenu.getSubMenu().add(SET_WALLET_NAME);
        walletMenu.getSubMenu().add(BIND_WALLET);
        walletMenu.getSubMenu().add(CREATE_WALLET);
        walletMenu.getSubMenu().add(CANCEL_BIND_WALLET);
        walletMenu.getSubMenu().add(EXPORT_PRIVATE_KEY);
        walletMenu.getSubMenu().add(SEND_SOL);

        return walletMenu;
    }


}



package com.helei.telegramebot.bot.menu;

import com.google.common.collect.Lists;
import lombok.Data;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.Function;

@Data
public class TGMenuNode {

    private static final AtomicInteger idGenerator = new AtomicInteger();

    public static final Map<Integer, TGMenuNode> nodeIdMap = new HashMap<>();

    public static final Map<String, TGMenuNode> commandMap = new HashMap<>();
    private static final Logger log = LoggerFactory.getLogger(TGMenuNode.class);

    private final int id;

    private final TGMenuNode parentMenu;

    private final Function<String, String> titleCreator;

    private final String buttonText;

    private final String callbackData;

    private final List<TGMenuNode> subMenu = new ArrayList<>();

    public TGMenuNode(TGMenuNode parentMenu, Function<String, String> titleCreator, String buttonText, String callbackData) {
        this.parentMenu = parentMenu;
        this.titleCreator = titleCreator;
        this.buttonText = buttonText;
        this.callbackData = callbackData;
        this.id = idGenerator.incrementAndGet();

        nodeIdMap.put(id, this);

        commandMap.put(getCallbackData(), this);
    }

    public String getCallbackData() {
        if (parentMenu == null) {
            return "/menu." + callbackData;
        }
        return parentMenu.getCallbackData() + "." + callbackData;
    }

    public SendMessage getMenu(String chatId) {

        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(titleCreator.apply(chatId));

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboardRows = new ArrayList<>();

        List<List<TGMenuNode>> partitions = Lists.partition(new ArrayList<>(subMenu), 2);

        for (List<TGMenuNode> partition : partitions) {
            keyboardRows.add(createKeyboardRow(partition));
        }

        if (parentMenu != null) {
            keyboardRows.add(createKeyboardRow(List.of(parentMenu)));
        }

        markup.setKeyboard(keyboardRows);
        message.setReplyMarkup(markup);
        return message;
    }

    private List<InlineKeyboardButton> createKeyboardRow(List<TGMenuNode> list) {
        return list.stream().map(kv -> {
            InlineKeyboardButton inlineKeyboardButton = new InlineKeyboardButton(kv.getButtonText());
            inlineKeyboardButton.setCallbackData(kv.getCallbackData());
            return inlineKeyboardButton;
        }).toList();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof TGMenuNode that)) return false;
        return id == that.id;
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(id);
    }

    @Override
    public String toString() {
        return "TGMenuNode{" +
                "callbackData='" + callbackData + '\'' +
                ", buttonText='" + buttonText + '\'' +
                ", parentMenu=" + parentMenu +
                ", id=" + id +
                ", subMenu=" + subMenu.stream().map(TGMenuNode::getId).toList() +
                '}';
    }

    public SendMessage menuCommandHandler(List<String> params, Message message) {
        log.info("收到chatId[{}]菜单命令[{}] params[{}]", message.getChatId(), this, params);

        return null;
    }
}


package com.helei.telegramebot.bot.menu;

import org.telegram.telegrambots.meta.api.methods.send.SendMessage;


public abstract class TGMenuNodeEnd extends TGMenuNode {

    public TGMenuNodeEnd(
            TGMenuNode parentMenu,
            String buttonText,
            String callbackData
    ) {
        super(parentMenu, null, buttonText, callbackData);
    }


    @Override
    public SendMessage getMenu(String chatId) {
        return buildDynamicMenu(chatId);
    }

    public abstract SendMessage buildDynamicMenu(String chatId);
}



package com.helei.telegramebot.bot;

import com.helei.dto.base.Result;
import com.helei.telegramebot.bot.menu.TelegramBotMenu;
import com.helei.telegramebot.config.command.TelegramBotNameSpaceCommand;
import com.helei.telegramebot.service.ITelegramPersistenceService;
import lombok.extern.slf4j.Slf4j;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.User;

import java.util.List;
import java.util.concurrent.ExecutorService;


@Slf4j
public abstract class MenuBaseTelegramBot extends AbstractTelegramBot {

    /**
     * 菜单
     */
    protected TelegramBotMenu telegramBotMenu;


    protected MenuBaseTelegramBot(String botUsername, String token, ITelegramPersistenceService telegramPersistenceService, ExecutorService executor) {
        super(botUsername, token, telegramPersistenceService, executor);
    }


    public void init(TelegramBotMenu telegramBotMenu) {
        this.telegramBotMenu = telegramBotMenu;
    }


    @Override
    public boolean commandMessageFilter(TelegramBotNameSpaceCommand.NameSpace nameSpace, String nameSpaceCommand, List<String> params, Message message) {
        Result result = getTelegramPersistenceService().isSavedChatInBot(getBotUsername(), message.getChatId());

        // 过滤掉没初始化的chat
        if (!result.getSuccess()) {
            sendMessageToChat(String.valueOf(message.getChatId()), result.getErrorMsg());
            return true;
        }

        return false;
    }

    @Override
    public Result menuCommandHandler(String menuCommand, Message message) {
        BotApiMethod<?> botApiMethod = telegramBotMenu.menuCommandHandler(menuCommand, message);
        try {
            if (botApiMethod != null) {
                execute(botApiMethod);
            }
            return Result.ok();
        } catch (Exception e) {
            return Result.fail(String.format("[%s]处理菜单命令[%s]失败, %s", message.getChatId(), menuCommand, e.getMessage()));
        }
    }


    @Override
    public void startCommandHandler(Message message) {
        Long chatId = message.getChatId();

        // chatId持久化，连同用户信息
        User from = message.getFrom();

        Result result = getTelegramPersistenceService().saveChatInBot(getBotUsername(), chatId, from);
        if (!result.getSuccess()) {
            log.error("保存聊天[{}]用户[{}]信息失败", chatId, from.getUserName());
            sendMessageToChat(String.valueOf(chatId), result.getErrorMsg());
        } else {
            sendMessageToChat(String.valueOf(chatId), getBotUsername() + " 注册聊天信息成功");
        }


        try {
            SendMessage sendMessage = telegramBotMenu.initChatMenu(String.valueOf(chatId));
            execute(sendMessage);
        } catch (Exception e) {
            log.error("[{}]创建菜单失败", chatId, e);
            sendMessageToChat(String.valueOf(chatId), "创建菜单失败");
        }
    }
}



package com.helei.telegramebot.controller;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * <p>
 *  前端控制器
 * </p>
 *
 * @author com.helei
 * @since 2024-11-21
 */
@RestController
@RequestMapping("/mpdemo/chatDefaultWallet")
public class ChatDefaultWalletController {

}





package com.helei.telegramebot.controller;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * <p>
 *  前端控制器
 * </p>
 *
 * @author com.helei
 * @since 2024-11-21
 */
@RestController
@RequestMapping("/mpdemo/chatWallet")
public class ChatWalletController {

}


package com.helei.telegramebot.entity;

import com.baomidou.mybatisplus.annotation.IdType;
import com.baomidou.mybatisplus.annotation.TableField;
import com.baomidou.mybatisplus.annotation.TableId;
import com.baomidou.mybatisplus.annotation.TableName;

import java.io.Serial;
import java.io.Serializable;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * <p>
 * 
 * </p>
 *
 * @author com.helei
 * @since 2024-11-21
 */
@Getter
@Setter
@TableName("t_chat_default_wallet")
@AllArgsConstructor
@NoArgsConstructor
public class ChatDefaultWallet implements Serializable {

    @Serial
    private static final long serialVersionUID = 21321212121212121L;

    /**
     * chatId
     */
    @TableId(value = "chat_id", type = IdType.INPUT)
    private String chatId;

    /**
     * 钱包公匙（地址）
     */
    @TableField("public_key")
    private String publicKey;
}


package com.helei.telegramebot.entity;

import com.baomidou.mybatisplus.annotation.IdType;
import com.baomidou.mybatisplus.annotation.TableField;
import com.baomidou.mybatisplus.annotation.TableId;
import com.baomidou.mybatisplus.annotation.TableName;

import java.io.Serial;
import java.io.Serializable;
import java.time.LocalDateTime;

import lombok.*;

/**
 * <p>
 * 
 * </p>
 *
 * @author com.helei
 * @since 2024-11-21
 */
@Getter
@Setter
@TableName("t_chat_wallet")
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class ChatWallet implements Serializable {

    @Serial
    private static final long serialVersionUID = 213928773627186442L;

    @TableId(value = "id", type = IdType.AUTO)
    private Long id;

    /**
     * chatId
     */
    @TableField("chat_id")
    private String chatId;

    /**
     * name
     */
    @TableField("name")
    private String name;


    /**
     * 私钥
     */
    @TableField("private_key")
    private String privateKey;

    /**
     * 公匙
     */
    @TableField("public_key")
    private String publicKey;

    /**
     * 密匙	
     */
    @TableField("secret_key")
    private String secretKey;

    /**
     * sol数量
     */
    @TableField("solAmount")
    private Double solAmount;

    /**
     * 创建时间
     */
    @TableField("create_datetime")
    private LocalDateTime createDatetime;

    /**
     * 更新时间
     */
    @TableField("update_datetime")
    private LocalDateTime updateDatetime;

    /**
     * 是否可用
     */
    @TableField("is_valid")
    private Boolean isValid;
}



<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mp.mpdemo.mapper.ChatDefaultWalletMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.example.mp.mpdemo.entity.ChatDefaultWallet">
        <id column="chat_id" property="chatId" />
        <result column="public_key" property="publicKey" />
    </resultMap>

</mapper>




<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mp.mpdemo.mapper.ChatWalletMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.example.mp.mpdemo.entity.ChatWallet">
        <id column="id" property="id" />
        <result column="chat_id" property="chatId" />
        <result column="private_key" property="privateKey" />
        <result column="public_key" property="publicKey" />
        <result column="secret_key" property="secretKey" />
        <result column="solAmount" property="solAmount" />
        <result column="create_datetime" property="createDatetime" />
        <result column="update_datetime" property="updateDatetime" />
        <result column="is_valid" property="isValid" />
    </resultMap>

</mapper>




package com.helei.telegramebot.mapper;


import com.baomidou.mybatisplus.core.mapper.BaseMapper;
import com.helei.telegramebot.entity.ChatDefaultWallet;

/**
 * <p>
 *  Mapper 接口
 * </p>
 *
 * @author com.helei
 * @since 2024-11-21
 */
public interface ChatDefaultWalletMapper extends BaseMapper<ChatDefaultWallet> {

}





package com.helei.telegramebot.mapper;


import com.baomidou.mybatisplus.core.mapper.BaseMapper;
import com.helei.telegramebot.entity.ChatWallet;

/**
 * <p>
 *  Mapper 接口
 * </p>
 *
 * @author com.helei
 * @since 2024-11-21
 */
public interface ChatWalletMapper extends BaseMapper<ChatWallet> {

}

package com.helei.telegramebot.service.impl;

import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import com.helei.telegramebot.entity.ChatDefaultWallet;
import com.helei.telegramebot.mapper.ChatDefaultWalletMapper;
import com.helei.telegramebot.service.IChatDefaultWalletService;
import org.springframework.stereotype.Service;

/**
 * <p>
 *  服务实现类
 * </p>
 *
 * @author com.helei
 * @since 2024-11-21
 */
@Service
public class ChatDefaultWalletServiceImpl extends ServiceImpl<ChatDefaultWalletMapper, ChatDefaultWallet> implements IChatDefaultWalletService {

}

package com.helei.telegramebot.service.impl;

import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import com.helei.telegramebot.entity.ChatWallet;
import com.helei.telegramebot.mapper.ChatWalletMapper;
import com.helei.telegramebot.service.IChatWalletService;
import org.springframework.stereotype.Service;

/**
 * <p>
 *  服务实现类
 * </p>
 *
 * @author com.helei
 * @since 2024-11-21
 */
@Service
public class ChatWalletServiceImpl extends ServiceImpl<ChatWalletMapper, ChatWallet> implements IChatWalletService {

}




package com.helei.telegramebot.service.impl;

import cn.hutool.core.lang.Pair;
import com.alibaba.fastjson.JSONObject;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.helei.dto.base.Result;
import com.helei.solanarpc.dto.SolanaAddress;
import com.helei.solanarpc.util.SolanaKeyAddressUtil;
import com.helei.telegramebot.entity.ChatDefaultWallet;
import com.helei.telegramebot.entity.ChatWallet;
import com.helei.telegramebot.service.IChatDefaultWalletService;
import com.helei.telegramebot.service.IChatWalletService;
import com.helei.telegramebot.service.ISolanaATBotPersistenceService;
import com.helei.telegramebot.util.TelegramRedisUtil;
import lombok.extern.slf4j.Slf4j;
import org.redisson.api.RMap;
import org.redisson.api.RedissonClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;


/**
 * TODO 加redis缓存！
 */
@Slf4j
@Service
public class SolanaATBotPersistenceServiceImpl implements ISolanaATBotPersistenceService {

    @Lazy
    @Autowired
    private RedissonClient redissonClient;


    @Autowired
    private ISolanaATBotPersistenceService solanaATBotPersistenceService;

    @Autowired
    private IChatWalletService chatWalletService;


    @Autowired
    private IChatDefaultWalletService chatDefaultWalletService;


    @Override
    @Transactional
    public Result bindWalletByPrivateKey(String botUsername, String chatId, String privateKey) {
        try {
            // 1.计算获取公匙和密匙
            Pair<String, String> psKeyPair = SolanaKeyAddressUtil.getPSKeyFromPrivateKey(privateKey);
            String pubKey = psKeyPair.getKey();
            String secretKey = psKeyPair.getValue();

            ChatWallet query = new ChatWallet();
            query.setChatId(chatId);
            query.setPublicKey(pubKey);
            ChatWallet one = chatWalletService.getBaseMapper().selectOne(new QueryWrapper<>(query));

            // 2.1绑定过该地址
            if (one != null) {
                return Result.fail("已绑定过钱包地址[" + pubKey.substring(0, 8) + "...]");
            } else {
                // 2.2 没有绑定过
                ChatWallet chatWallet = ChatWallet.builder().publicKey(pubKey).privateKey(privateKey).secretKey(secretKey).chatId(chatId).build();

                // 保存数据库
                chatWalletService.save(chatWallet);

                // 更新默认钱包地址
                solanaATBotPersistenceService.updateDefaultWalletAddress(botUsername, chatId, pubKey, false);

                return Result.ok();
            }
        } catch (Exception e) {
            String format = String.format("绑定chatId[%s]的钱包失败, %s", chatId, e.getMessage());
            log.error(format, e);
            return Result.fail(format);
        }
    }

    @Override
    @Transactional
    public void updateDefaultWalletAddress(String botUsername, String chatId, String pubKey, boolean isCover) {
        ChatDefaultWallet byId = chatDefaultWalletService.getById(chatId);
        if (byId == null || isCover) {
            ChatDefaultWallet chatDefaultWallet = new ChatDefaultWallet(chatId, pubKey);
            chatDefaultWalletService.save(chatDefaultWallet);
        }
    }


    @Override
    public Result updateChatListenAddress(String botUsername, String chatId, SolanaAddress solanaAddress) {
        try {
            String key = TelegramRedisUtil.chatIdSolanaWalletTraceHashKey(chatId, botUsername);

            RMap<String, String> map = redissonClient.getMap(key);

            map.put(solanaAddress.getAccountAddress(), JSONObject.toJSONString(solanaAddress));

            return Result.ok();
        } catch (Exception e) {
            String format = String.format("更新chatId[%s]跟踪的地址信息失败, %s", chatId, e.getMessage());
            log.error(format, e);
            return Result.fail(format);
        }
    }

    @Override
    public Result deleteChatListenAddress(String botUsername, String chatId, String solanaAddress) {

        try {
            String key = TelegramRedisUtil.chatIdSolanaWalletTraceHashKey(chatId, botUsername);
            RMap<String, String> map = redissonClient.getMap(key);
            map.remove(solanaAddress);
            return Result.ok();
        } catch (Exception e) {
            String format = String.format("删除chatId[%s]跟踪的地址信息失败, %s", chatId, e.getMessage());
            log.error(format, e);
            return Result.fail(format);
        }
    }

    @Override
    public String queryChatIdDefaultWalletAddress(String botUsername, String chatId) {
        ChatDefaultWallet byId = chatDefaultWalletService.getById(chatId);

        if (byId == null) return null;

        return byId.getPublicKey();
    }

    @Override
    public List<ChatWallet> queryChatIdAllWallet(String botUsername, String chatId) {
        ChatWallet query = new ChatWallet();
        query.setChatId(chatId);

        return chatWalletService.getBaseMapper().selectList(new QueryWrapper<>(query));
    }

    @Override
    public ChatWallet queryChatIdWallet(ChatWallet query) {

        return chatWalletService.getBaseMapper().selectOne(new QueryWrapper<>(query));
    }
}



package com.helei.telegramebot.service;


import com.baomidou.mybatisplus.extension.service.IService;
import com.helei.telegramebot.entity.ChatDefaultWallet;

/**
 * <p>
 *  服务类
 * </p>
 *
 * @author com.helei
 * @since 2024-11-21
 */
public interface IChatDefaultWalletService extends IService<ChatDefaultWallet> {

}


package com.helei.telegramebot.service;


import com.baomidou.mybatisplus.extension.service.IService;
import com.helei.telegramebot.entity.ChatWallet;

/**
 * <p>
 *  服务类
 * </p>
 *
 * @author com.helei
 * @since 2024-11-21
 */
public interface IChatWalletService extends IService<ChatWallet> {

}

package com.helei.telegramebot.service;

import com.helei.dto.base.Result;
import com.helei.solanarpc.dto.SolanaAddress;
import com.helei.telegramebot.entity.ChatWallet;

import java.util.List;

public interface ISolanaATBotPersistenceService {


    /**
     * 绑定钱包地址
     *
     * @param chatId     chatId
     * @param privateKey privateKey
     * @return Result
     */
    Result bindWalletByPrivateKey(String botUsername, String chatId, String privateKey);


    /**
     * 更新默认钱包地址
     *
     * @param botUsername botUsername
     * @param chatId      chatId
     * @param pubKey      pubKey
     */
    void updateDefaultWalletAddress(String botUsername, String chatId, String pubKey, boolean isCover);

    /**
     * 保存chatId跟踪的钱包地址
     *
     * @param chatId        chatId
     * @param solanaAddress 钱包地址
     * @return Result
     */
    Result updateChatListenAddress(String botUsername, String chatId, SolanaAddress solanaAddress);


    /**
     * 删除chatId跟踪的钱包地址
     *
     * @param chatId  chatId
     * @param address 钱包地址
     * @return Result
     */
    Result deleteChatListenAddress(String botUsername, String chatId, String address);


    /**
     * 查默认钱包地址
     *
     * @param botUsername botUsername
     * @param chatId      chatId
     * @return publicKey （address）
     */
    String queryChatIdDefaultWalletAddress(String botUsername, String chatId);


    /**
     * 查询chatId绑定的所有钱包
     *
     * @param botUsername botUsername
     * @param chatId      chatId
     * @return List<ChatWallet>
     */
    List<ChatWallet> queryChatIdAllWallet(String botUsername, String chatId);


    /**
     * 查询钱包信息
     *
     * @param query query
     * @return ChatWallet
     */
    ChatWallet queryChatIdWallet(ChatWallet query);
}

package com.helei.telegramebot.template;

import com.helei.telegramebot.entity.ChatWallet;

public class SolanaBotWalletTittleTemplate {
    private static final String A_CHAT_WALLET_TEMPLATE = """
                钱包 %d: %s
                地址: %s
                钱包余额: %f SOL
            """;


    public static String aChatWalletPrintStr(ChatWallet chatWallet, Long idx) {
        return String.format(A_CHAT_WALLET_TEMPLATE, idx, chatWallet.getName(), chatWallet.getPublicKey(), chatWallet.getSolAmount());
    }
    
}
package com.helei.telegramebot.util;

import com.helei.constants.CEXType;
import com.helei.constants.RunEnv;
import com.helei.constants.trade.TradeType;

public class TelegramRedisUtil {

    private static final String REDIS_KEY_PREFIX = "telegram:bot:";

    /**
     * 监听交易信号的chatId的redis key，set类型
     *
     * @param botUsername 机器人用户名
     * @param runEnv      runEnv
     * @param tradeType   tradeType
     * @param cexType     cexType
     * @param symbol      symbol
     * @return key
     */
    public static String tradeSignalListenChatIdSetKey(String botUsername, RunEnv runEnv, TradeType tradeType, CEXType cexType, String symbol, String signalName) {
        return REDIS_KEY_PREFIX + botUsername + ":signal:" + cexType.name() + ":" + runEnv.name() + ":" + tradeType.name() + ":" + symbol + ":" + signalName;
    }


    /**
     * bot关注的chatId的redis key， set类型
     *
     * @param botUsername 机器人名字
     * @return key
     */
    public static String botListenChatIdSetKey(String botUsername) {
        return REDIS_KEY_PREFIX + botUsername + ":listenChatIdSet";
    }

    /**
     * chatId solana钱包信息的前缀
     *
     * @param botUsername botUsername
     * @param chatId      chatId
     * @return key
     */
    public static String chatIdSolanaWalletPrefix(String botUsername, String chatId) {
        return REDIS_KEY_PREFIX + botUsername + "solana:wallet:" + chatId + ":";
    }

    /**
     * chatId solana钱包，追踪地址的key
     *
     * @param botUsername botUsername
     * @param chatId      chatId
     * @return key
     */
    public static String chatIdSolanaWalletTraceHashKey(String botUsername, String chatId) {
        return chatIdSolanaWalletPrefix(botUsername, chatId) + "trace";
    }


    /**
     * chatId solana钱包地址
     *
     * @param botUsername botUsername
     * @param chatId      chatId
     * @return key
     */
    public static String chatIdSolanaWalletInfoHashKey(String botUsername, String chatId) {
        return chatIdSolanaWalletPrefix(botUsername, chatId) + "info";
    }


    /**
     * chatId 默认的搜懒啊钱包地址
     *
     * @param botUsername botUsername
     * @param chatId      chatId
     * @return key
     */
    public static String chatIdSolanaWalletDefaultAddressKey(String botUsername, String chatId) {
        return chatIdSolanaWalletPrefix(botUsername, chatId) + "defaultWallet";
    }

    /**
     * 获取菜单状态
     *
     * @param botUsername botUsername
     * @param chatId      chatId
     * @return key
     */
    public static String chatIdSolanaBotMenuKey(String botUsername, String chatId) {
        return chatIdSolanaWalletPrefix(botUsername, chatId) + "menu";
    }


    /**
     * chatId的分布式锁
     *
     * @param botUsername botUsername
     * @param chatId      chatId
     * @return key
     */
    public static String chatIdLockKey(String botUsername, String chatId) {
        return chatIdSolanaWalletPrefix(botUsername, chatId) + "lock";
    }
}

package com.helei;

import com.baomidou.mybatisplus.annotation.IdType;
import com.baomidou.mybatisplus.generator.FastAutoGenerator;
import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;
import com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;

import java.util.List;

public class Generator {
    public static void main(String[] args) {
        FastAutoGenerator
                //数据库配置
                .create("jdbc:mysql://127.0.0.1:3306/shinanoquanti?useSSL=false&allowPublicKeyRetrieval=true&autoReconnect=true&failOverReadOnly=false&maxReconnects=10"
                        , "root"
                        , "123456")
                //全局配置
                .globalConfig(builder -> {
                    //设置作者
                    builder.author("com.helei")
                            //开启swagger模式，这里就不开了
//                        .enableSwagger()
                            //设置最终的代码输出路径，这边是输出到D盘目录下
                            .outputDir("D:\\workspace\\ideaworkspace\\ShinanoQuanti-main");
                })
                //包设置，也就是设置代码生成后的包名
                .packageConfig(builder -> {
                    //设置父包名
                    builder.parent("com.example.mp")
                            //设置模块名
                            .moduleName("mpdemo");
                })
                //设置生成策略
                .strategyConfig(builder -> {
                    //设置要生成代码的表名，可以设置多个，这里设置一个
                    builder.addInclude(List.of("t_chat_default_wallet", "t_chat_wallet"))
                            //设置要过滤的表前缀，在生成实体类的时候可以自动去除
                            .addTablePrefix("t_")
                            //设置要过滤的字段前缀
                            .addFieldPrefix("t_")

                            /**
                             * entityBuilder()
                             * Entity策略配置
                             */

                            .entityBuilder()
                            //开启Lombok
                            .enableLombok()
                            //开启生成实体时生成字段注解
                            .enableTableFieldAnnotation()
                            //默认下划线转驼峰命名:NamingStrategy.underline_to_camel
                            //数据库表映射到实体的命名策略
                            .naming(NamingStrategy.underline_to_camel)
                            //数据库表字段映射到实体的命名策略
                            .columnNaming(NamingStrategy.underline_to_camel)
                            //配置id生成策略,这里采用自增策略
                            .idType(IdType.INPUT)
                            //逻辑删除属性名（实体类）
                            .logicDeletePropertyName("deleted")
                            //乐观锁属性名(实体)
                            .versionPropertyName("version")
                            //开启覆盖已有文件策略
                            .enableFileOverride()

                            /**
                             * controllerBuilder()
                             * Controller生成策略
                             */

                            .controllerBuilder()
                            //开启Rest风格
                            .enableRestStyle()
                            //开启覆盖已有文件
                            .enableFileOverride()

                            /**
                             * serviceBuilder()
                             * Service生成策略
                             */

                            .serviceBuilder()
                            //开启覆盖已有文件
                            .enableFileOverride()

                            /**
                             * mapperBuilder()
                             * Mapper生成策略
                             */

                            .mapperBuilder()
                            //启用 BaseResultMap 生成
                            .enableBaseResultMap()
                            //开启覆盖已有文件
                            .enableFileOverride();
                })
                //设置引擎模板Freemarker，默认的是Velocity引擎模板
                .templateEngine(new FreemarkerTemplateEngine())
                .execute();
    }
}


package com.helei;

import com.helei.telegramebot.bot.AbstractTelegramBot;
import com.helei.telegramebot.bot.impl.SolanaAutoTradeTelegramBot;
import com.helei.telegramebot.config.TelegramBotConfig;
import com.helei.telegramebot.service.impl.KafkaConsumerService;
import com.helei.telegramebot.service.impl.SolanaATBotPersistenceServiceImpl;
import com.helei.telegramebot.service.impl.TelegramPersistenceServiceImpl;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ConfigurableApplicationContext;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.List;
import java.util.concurrent.Executors;

@Slf4j
@SpringBootApplication
public class TelegramBotApp {
    public static void main(String[] args) throws TelegramApiException {
        ConfigurableApplicationContext applicationContext = SpringApplication.run(TelegramBotApp.class, args);


//        startAllEnvTradeSignalConsumer(applicationContext);
//
//        startAllTGBot(applicationContext);
        startSolanaBot(applicationContext);
    }


    private static void startSolanaBot(ConfigurableApplicationContext applicationContext) throws TelegramApiException {
        TelegramBotConfig telegramBotConfig = TelegramBotConfig.INSTANCE;

        SolanaATBotPersistenceServiceImpl bean = applicationContext.getBean(SolanaATBotPersistenceServiceImpl.class);
        TelegramPersistenceServiceImpl telegramPersistenceService = applicationContext.getBean(TelegramPersistenceServiceImpl.class);
        TelegramBotConfig.TelegramBotBaseConfig first = telegramBotConfig.getBots().getFirst();

        SolanaAutoTradeTelegramBot bot = new SolanaAutoTradeTelegramBot(
                first.getBotUsername(),
                first.getToken(),
                bean,
                telegramPersistenceService,
                Executors.newVirtualThreadPerTaskExecutor()
        );


        TelegramBotsApi telegramBotsApi = applicationContext.getBean(TelegramBotsApi.class);

        telegramBotsApi.registerBot(bot);
    }


    /**
     * 开启所有信号消费
     *
     * @param applicationContext app
     */
    private static void startAllEnvTradeSignalConsumer(ApplicationContext applicationContext) {
        log.info("开始消费交易信号.....");
        KafkaConsumerService kafkaConsumerService = applicationContext.getBean(KafkaConsumerService.class);
        kafkaConsumerService.startAllTradeSignalConsumer();
        log.info("交易信号消费启动完成.....");
    }

    /**
     * 开启所有的tg机器人
     *
     * @param applicationContext app
     */
    private static void startAllTGBot(ApplicationContext applicationContext) {
        try {
            log.info("开始启动tg机器人.....");
            TelegramBotsApi telegramBotsApi = applicationContext.getBean(TelegramBotsApi.class);

            List<AbstractTelegramBot> tgBots = (List<AbstractTelegramBot>) applicationContext.getBean("tgBots");

            for (AbstractTelegramBot tgBot : tgBots) {
                log.info("启动[{}}机器人", tgBot.getBotUsername());
                telegramBotsApi.registerBot(tgBot);
            }

            log.info("tg机器人启动完成");
        } catch (Exception e) {
            log.error("开启Telegram Bot发生异常", e);
        }
    }
}

server:
  port: 10010

spring:
  datasource:
    #    url: jdbc:mysql://192.168.1.3:3306/shinano_quanti?useSSL=false&allowPublicKeyRetrieval=true&autoReconnect=true&failOverReadOnly=false&maxReconnects=10&connectTimeout=30000&socketTimeout=30000&tcpKeepAlive=true
    url: jdbc:mysql://127.0.0.1:3306/shinanoquanti?useSSL=false&allowPublicKeyRetrieval=true&autoReconnect=true&failOverReadOnly=false&maxReconnects=10
    username: root
    password: 123456
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource

    druid:
      initial-size: 5
      max-active: 20
      min-idle: 5
      max-wait: 60000
      time-between-eviction-runs-millis: 60000
      min-evictable-idle-time-millis: 300000
      validation-query: SELECT 1
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false

  mybatis-plus:
    configuration:
      log-impl: org.apache.ibatis.logging.stdout.StdOutImpl  # 输出 SQL 日志



<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.helei</groupId>
        <artifactId>ShinanoQuanti</artifactId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>

    <artifactId>TelegramBot</artifactId>
    <packaging>jar</packaging>

    <name>TelegramBot</name>
    <url>http://maven.apache.org</url>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.helei</groupId>
            <artifactId>Base</artifactId>
            <version>0.0.1-SNAPSHOT</version>
        </dependency>

        <dependency>
            <groupId>com.helei</groupId>
            <artifactId>SolanaRPC</artifactId>
            <version>0.0.1-SNAPSHOT</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>

        <dependency>
            <groupId>org.telegram</groupId>
            <artifactId>telegrambots</artifactId>
            <version>6.0.1</version>
        </dependency>

        <dependency>
            <groupId>org.twitter4j</groupId>
            <artifactId>twitter4j-core</artifactId>
            <version>4.1.2</version>
        </dependency>


        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-spring-boot3-starter</artifactId>
        </dependency>

        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-generator</artifactId>
        </dependency>
        <!--velocity模板引擎-->
        <dependency>
            <groupId>org.apache.velocity</groupId>
            <artifactId>velocity-engine-core</artifactId>
            <version>2.3</version>
        </dependency>

        <!--freemarker模板引擎-->
        <dependency>
            <groupId>org.freemarker</groupId>
            <artifactId>freemarker</artifactId>
        </dependency>

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>

        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
        </dependency>


        <dependency>
            <groupId>org.redisson</groupId>
            <artifactId>redisson-spring-boot-starter</artifactId>
        </dependency>


        <dependency>
            <groupId>org.springframework.kafka</groupId>
            <artifactId>spring-kafka</artifactId>
        </dependency>

        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
        </dependency>

        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>



