package com.helei.solanarpc;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.helei.solanarpc.constants.SolanaConstants;
import com.helei.solanarpc.constants.SolanaSwapType;
import com.helei.solanarpc.constants.SolanaTransactionType;
import com.helei.solanarpc.dto.SolanaTransactionDetail;
import lombok.extern.slf4j.Slf4j;

import javax.net.ssl.SSLException;
import java.net.InetSocketAddress;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.function.Consumer;

@Slf4j
public class SolanaApiService {

    private final SolanaWebsocketClient solanaWebsocketClient;

    private final SolanaRestHttpClient solanaRestHttpClient;

    private final ExecutorService executor;

    public SolanaApiService(String wsUrl, String httpUrl, InetSocketAddress proxy, ExecutorService executorService) {
        this.solanaRestHttpClient = new SolanaRestHttpClient(proxy, httpUrl, executorService);
        this.solanaWebsocketClient = new SolanaWebsocketClient(wsUrl);
        this.solanaWebsocketClient.setProxy(proxy);
        this.executor = executorService;
    }


    public void init() throws URISyntaxException, SSLException, ExecutionException, InterruptedException {
        this.solanaWebsocketClient.connect().get();
    }


    /**
     * 监听地址的交易
     *
     * @param address        address
     * @param detailConsumer detailConsumer
     * @return CompletableFuture<Long>
     */
    public CompletableFuture<Long> listenAddressTransition(String address, Consumer<SolanaTransactionDetail> detailConsumer) {
        //Step 1 监听 地址的log
        return solanaWebsocketClient.logsSubscribe(address, (eventType, context, event) -> {
            JSONObject value = event.getJSONObject("params").getJSONObject("value");

            //Step 2.从监听事件中获取签名
            String signature = value.getString("signature");

            //Step 3 根据签名获取交易信息
            solanaRestHttpClient.getTransaction(signature).thenAcceptAsync(response -> {
                //Step 4 解析交易消息
                SolanaTransactionDetail detail = getSolanaTransactionDetail(response);

                log.info("地址[{}]收到交易信息[{}]", address, detail);

                // Step 5 调用回调方法
                detailConsumer.accept(detail);
            }, executor).exceptionally(throwable -> {
                log.error("处理地址[{}]交易信息发生错误", address, throwable);
                return null;
            });
        }).exceptionally(throwable -> {
            log.error("监听地址[{}]的log信息发生错误", address, throwable);
            return null;
        });
    }


    /**
     * 解析交易信息
     *
     * @param response response
     * @return SolanaTransactionDetail
     */
    private static SolanaTransactionDetail getSolanaTransactionDetail(JSONObject response) {
        JSONObject result = response.getJSONObject("result");

        JSONObject meta = result.getJSONObject("meta");

        JSONObject transaction = result.getJSONObject("transaction");
        JSONArray addressArray = transaction.getJSONObject("message").getJSONArray("accountKeys");


        // token 交易信息
        JSONArray preTokenBalances = meta.getJSONArray("preTokenBalances");
        JSONArray postTokenBalances = meta.getJSONArray("postTokenBalances");

        // 账户sol信息
        JSONArray preBalancesLamports = meta.getJSONArray("preBalances");
        JSONArray postBalancesLamports = meta.getJSONArray("postBalances");


        Long fee = meta.getLong("fee");

        SolanaTransactionDetail.SolanaTransactionDetailBuilder builder = SolanaTransactionDetail
                .builder()
                .fee(fee / SolanaConstants.lamports);

        SolanaTransactionType transactionType = SolanaTransactionType.SEND_SPL_TOKEN;
        if (!preTokenBalances.isEmpty()) {
            // 代币swap，sol换其它币，或其它币换sol， 或者其它代币换其它代币

            // token 变化信息
            List<SolanaTransactionDetail.SolanaTokenAmountChangeInfo> tokenAmountChangeInfos = new ArrayList<>();
            for (int i = 0; i < preTokenBalances.size(); i++) {
                JSONObject preBalance = preTokenBalances.getJSONObject(i);
                JSONObject postBalance = postTokenBalances.getJSONObject(i);

                int accountIndex = preBalance.getInteger("accountIndex");
                String accountAddress = addressArray.getString(accountIndex);

                // 获取 Token Mint 地址 (币种)
                String tokenMint = preBalance.getString("mint");

                // 获取token数量变化
                double preAmount = preBalance.getJSONObject("uiTokenAmount").getDoubleValue("uiAmount");
                double postAmount = postBalance.getJSONObject("uiTokenAmount").getDoubleValue("uiAmount");
                double amountTransferred = preAmount - postAmount;

                // 获取token数量变化
                long preLamports = preBalancesLamports.getLongValue(accountIndex);
                long postLamports = postBalancesLamports.getLongValue(accountIndex);
                long solTransferred = preLamports - postLamports;


                tokenAmountChangeInfos.add(new SolanaTransactionDetail.SolanaTokenAmountChangeInfo(
                        accountAddress,
                        tokenMint,
                        amountTransferred,
                        solTransferred,
                        postAmount,
                        postLamports / SolanaConstants.lamports
                ));
            }

            builder.tokenAmountChangeInfos(tokenAmountChangeInfos);

            JSONArray instructions = transaction.getJSONObject("message").getJSONArray("instructions");

            // 解析swap类型
            SolanaSwapType solanaSwapType = null;
            for (int i = 0; i < instructions.size(); i++) {
                if (solanaSwapType != null) break;

                String programId = instructions.getJSONObject(i).getString("programId");
                for (SolanaSwapType type : SolanaSwapType.values()) {
                    if (programId.contains(type.name())) {
                        solanaSwapType = type;
                        break;
                    }
                }
            }
            if (solanaSwapType != null) {
                transactionType = SolanaTransactionType.SWAP;
            }
            builder.solanaSwapType(solanaSwapType);
        } else {
            // sol转账
            transactionType = SolanaTransactionType.SEND_SOL;

            List<SolanaTransactionDetail.SolanaAmountChangeInfo> solanaAmountChangeInfos = new ArrayList<>();

            for (int i = 0; i < preBalancesLamports.size(); i++) {
                long preLamports = preBalancesLamports.getLongValue(i);
                long postLamports = postBalancesLamports.getLongValue(i);
                long solTransferred = preLamports - postLamports;
                String accountAddress = addressArray.getString(i);


                solanaAmountChangeInfos.add(new SolanaTransactionDetail.SolanaAmountChangeInfo(
                        accountAddress,
                        solTransferred / SolanaConstants.lamports,
                        postLamports
                ));
            }

            builder.solanaAmountChangeInfos(solanaAmountChangeInfos);
        }

        return builder.solanaTransactionType(transactionType).build();
    }

}
