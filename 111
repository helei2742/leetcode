package cn.com.vortexa.script_node.bot.selenium;

import cn.com.vortexa.browser_control.OptSeleniumInstance;
import cn.com.vortexa.browser_control.dto.SeleniumParams;
import cn.com.vortexa.browser_control.execute.ExecuteGroup;
import cn.com.vortexa.common.entity.AccountContext;
import cn.com.vortexa.script_node.dto.selenium.ACBotTypedSeleniumExecuteInfo;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.remote.RemoteWebDriver;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.*;
import java.util.concurrent.locks.ReentrantLock;

@Slf4j
public class AccountFingerBrowserSelenium extends OptSeleniumInstance {

    private final ReentrantLock lock = new ReentrantLock();

    @Override
    protected void addDefaultChromeOptions(ChromeOptions chromeOptions) {

    }

    /**
     * 添加过的bot执行链的key set
     */
    private final Set<String> addedBotExecutionSet = new HashSet<>();
    /**
     * 执行链信息
     */
    private final List<ACBotTypedSeleniumExecuteInfo> executeInfoList = new ArrayList<>();

    @Getter
    private volatile boolean running = false;

    public AccountFingerBrowserSelenium(AccountContext accountContext, SeleniumParams params) throws IOException {
        super(accountContext.getSimpleInfo(), params);
    }

    @Override
    protected WebDriver createWebDriver(ChromeOptions chromeOptions) {
        if (getWebDriver() != null) return getWebDriver();

        try {
            URL remoteWebDriverUrl = new URL(getParams().getDriverPath());
            chromeOptions.setCapability("timeouts", new HashMap<String, Integer>() {{
                put("script", 30000);  // 设置脚本执行超时
                put("pageLoad", 30000);  // 设置页面加载超时
                put("implicit", 30000);  // 设置隐式等待超时
            }});
            return new RemoteWebDriver(remoteWebDriverUrl, chromeOptions);
        } catch (MalformedURLException e) {
            log.error("[{}] create remote web driver error", getInstanceId(), e);
            throw new RuntimeException(e);
        }
    }

    /**
     * 开始账户指纹浏览器selenium控制
     */
    public void startACFBSelenium() {
        lock.lock();
        try {
            running = true;
            log.info("[{}] start all added bot selenium execute...", getInstanceId());

            for (ACBotTypedSeleniumExecuteInfo executeInfo : executeInfoList) {
                try {
                    log.info("[{}]-[{}] start selenium execute...", getInstanceId(), executeInfo.getBotKey());
                    List<ExecuteGroup> seleniumExecuteChain = super.getSeleniumExecuteChain();
                    seleniumExecuteChain.clear();
                    seleniumExecuteChain.addAll(executeInfo.getSeleniumExecuteChain());

                    syncStart();
                    log.info("[{}]-[{}] selenium execute finish", getInstanceId(), executeInfo.getBotKey());
                } catch (Exception e) {
                    log.error("[{}]-[{}] selenium execute error", getInstanceId(), executeInfo.getBotKey(), e);
                    randomWait(3);
                }
            }

            log.info("[{}] all selenium execute finish", getInstanceId());
        } finally {
            log.info("[{}] closing webDriver", getInstanceId());
            close();
            log.info("[{}] close webDriver finish", getInstanceId());

            running = false;
            lock.unlock();
        }
    }

    /**
     * 添加执行链
     *
     * @param executeInfo executeInfo
     */
    public void addExecuteInfo(ACBotTypedSeleniumExecuteInfo executeInfo) {
        log.info("[{}]-[{}] adding execute info...", getInstanceId(), executeInfo.getBotKey());
        lock.lock();
        try {
            executeInfoList.add(executeInfo);
            addedBotExecutionSet.add(executeInfo.getBotKey());
            log.info("[{}]-[{}] add execute info finish", getInstanceId(), executeInfo.getBotKey());
        } finally {
            lock.unlock();
        }
    }

    @Override
    protected void doClose() {
        super.doClose();
        executeInfoList.clear();
        addedBotExecutionSet.clear();
    }
}
package cn.com.vortexa.script_node.bot.selenium;

import cn.com.vortexa.browser_control.SeleniumInstance;
import cn.com.vortexa.browser_control.constants.BrowserDriverType;
import cn.com.vortexa.browser_control.driver.BitBrowserDriver;
import cn.com.vortexa.browser_control.driver.FingerprintBrowserDriver;
import cn.com.vortexa.browser_control.dto.SeleniumParams;
import cn.com.vortexa.common.constants.BotJobType;
import cn.com.vortexa.common.dto.config.AutoBotConfig;
import cn.com.vortexa.common.entity.AccountContext;
import cn.com.vortexa.script_node.anno.BotMethod;
import cn.com.vortexa.script_node.bot.AutoLaunchBot;
import cn.com.vortexa.script_node.dto.selenium.ACBotTypedSeleniumExecuteInfo;
import cn.com.vortexa.script_node.service.BotApi;
import cn.hutool.core.lang.Pair;
import lombok.extern.slf4j.Slf4j;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

/**
 * @author h30069248
 * @since 2025/4/9 14:35
 */
@Slf4j
public abstract class FingerBrowserBot extends AutoLaunchBot<FingerBrowserBot> {

    public static final int BROWSER_BATCH_SIZE = 6; //  浏览器批大小
    public static final String DEFAULT_WEB_SITE_URL = "http://www.google.com";   // 默认打开地址Key
    public static final String DEFAULT_WEB_SITE_URL_KEY = "default_web_site_url";   // 默认打开地址Key
    public static final String FINGER_BROWSER_API_URL_KEY = "finger_browser_api_url"; // 指纹浏览器api地址Key
    public static final String CHROME_DRIVER_URL_KEY = "chrome_driver_url"; // chromedriver连接地址Key
    public static final String FINGER_BROWSER_SEQ_KEY = "finger_browser_seq";   //  指纹浏览器序号Key

    private static final Set<Integer> currentWindowSeq = new HashSet<>();
    private static final ConcurrentHashMap<AccountContext, AccountFingerBrowserSelenium> accountFBSeleniumMap = new ConcurrentHashMap<>();
    private static final List<ACBotTypedSeleniumExecuteInfo> acExecuteInfos = new ArrayList<>();
    private static volatile FingerprintBrowserDriver browserDriver;
    private static String chromeDriverUrl;
    private static String fingerBrowserApiUrl;

    private String openUrl = DEFAULT_WEB_SITE_URL;

    @Override
    protected void botStopped() {
        super.botStopped();
        Iterator<Map.Entry<AccountContext, AccountFingerBrowserSelenium>> iterator = accountFBSeleniumMap.entrySet()
            .iterator();
        while (iterator.hasNext()) {
            Map.Entry<AccountContext, AccountFingerBrowserSelenium> entry = iterator.next();
            entry.getValue().close();
            iterator.remove();
        }
        acExecuteInfos.clear();
    }

    @Override
    protected void botInitialized(AutoBotConfig botConfig, BotApi botApi) {
        if (chromeDriverUrl == null) {
            chromeDriverUrl = (String) botConfig.getCustomConfig().get(CHROME_DRIVER_URL_KEY);
        }
        if (fingerBrowserApiUrl == null) {
            fingerBrowserApiUrl = (String) botConfig.getCustomConfig().get(FINGER_BROWSER_API_URL_KEY);
        }

        openUrl = getDefaultWebSiteUrl(botConfig);
        initBrowserDriver();

        synchronized (acExecuteInfos) {
            ACBotTypedSeleniumExecuteInfo executeInfo = buildExecuteGroupChain();
            for (ACBotTypedSeleniumExecuteInfo acExecuteInfo : acExecuteInfos) {
                String botKey = botConfig.getBotKey();
                if (acExecuteInfo.getBotKey().equals(botKey)) {
                    logger.warn(botKey + " execute info almost added...");
                    return;
                }
            }
            acExecuteInfos.add(executeInfo);
        }
    }

    @Override
    protected FingerBrowserBot getInstance() {
        return this;
    }

    @BotMethod(jobType = BotJobType.ONCE_TASK, concurrentCount = BROWSER_BATCH_SIZE)
    public void accountBrowserTask(AccountContext accountContext) {
        int seq = Integer.parseInt((String) accountContext.getParams().get(FINGER_BROWSER_SEQ_KEY));

        try {
            currentWindowSeq.add(seq);
            AccountFingerBrowserSelenium browserSelenium = accountFBSeleniumMap.compute(accountContext, (k, v) -> {
                if (v == null) {
                    try {
                        v = new AccountFingerBrowserSelenium(
                                accountContext,
                                buildSeleniumParams(seq)
                        );

                        for (ACBotTypedSeleniumExecuteInfo acExecuteInfo : acExecuteInfos) {
                            v.addExecuteInfo(acExecuteInfo);
                        }
                    } catch (IOException e) {
                        throw new RuntimeException("create account selenium error", e);
                    }
                }
                return v;
            });

            if (!browserSelenium.isRunning()) {
                browserDriver.flexAbleWindowBounds(new ArrayList<>(currentWindowSeq));
                browserSelenium.startACFBSelenium();
            } else {
                logger.warn(accountContext.getSimpleInfo() + " selenium is running...cancel new start");
            }
        } catch (Exception e) {
            logger.error(accountContext.getSimpleInfo() + " - start selenium task error", e);
        } finally {
            currentWindowSeq.remove(seq);
        }
    }

    /**
     * 构建selenium参数
     *
     * @return SeleniumParams
     */
    private SeleniumParams buildSeleniumParams(Integer seq) {
        String debuggerAddress = browserDriver.startWebDriverBySeq(seq);

        return SeleniumParams
                .builder()
                .driverPath(chromeDriverUrl)
                .experimentalOptions(List.of(new Pair<>("debuggerAddress", debuggerAddress)))
                .targetWebSite(openUrl)
                .build();
    }

    /**
     * 构建指纹浏览器driver
     */
    private void initBrowserDriver() {
        if (browserDriver == null) {
            synchronized (FingerBrowserBot.class) {
                if (browserDriver == null) {
                    browserDriver = switch (browserDriverType()) {
                        case BIT_BROWSER -> new BitBrowserDriver(fingerBrowserApiUrl);
                    };
                }
            }
        }
    }

    /**
     * 指纹浏览器类型
     *
     * @return BrowserDriverType
     */
    protected abstract BrowserDriverType browserDriverType();

    /**
     * 构建执行链
     *
     * @return List<ExecuteGroup>
     */
    protected abstract ACBotTypedSeleniumExecuteInfo buildExecuteGroupChain();

    /**
     * 获取默认打开的url
     *
     * @param botConfig botConfig
     * @return String
     */
    private String getDefaultWebSiteUrl(AutoBotConfig botConfig) {
        return (String) botConfig.getCustomConfig().getOrDefault(DEFAULT_WEB_SITE_URL_KEY, DEFAULT_WEB_SITE_URL);
    }
}
package cn.com.vortexa.script_node.util;

import cn.com.vortexa.common.util.FileUtil;
import cn.com.vortexa.common.util.classloader.DynamicJavaLoader;
import cn.com.vortexa.script_node.anno.BotApplication;
import cn.com.vortexa.script_node.bot.AutoLaunchBot;
import cn.com.vortexa.common.dto.config.AutoBotConfig;
import cn.com.vortexa.script_node.config.ScriptNodeConfiguration;
import cn.com.vortexa.script_node.constants.BotStatus;
import cn.com.vortexa.script_node.scriptagent.BotScriptAgent;
import cn.com.vortexa.script_node.service.BotApi;
import cn.com.vortexa.common.exception.BotInitException;
import cn.com.vortexa.common.exception.BotStartException;
import cn.com.vortexa.script_node.view.ScriptNodeCMDLineMenu;
import cn.com.vortexa.script_node.view.commandMenu.DefaultMenuType;
import cn.hutool.core.util.StrUtil;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Function;

@Slf4j
public class ScriptBotLauncher {
    private static final ScriptNodeCMDLineMenu scriptNodeCMDLineMenu = new ScriptNodeCMDLineMenu(List.of(
            DefaultMenuType.START_BOT_TASK, DefaultMenuType.LAUNCH_SCRIPT
    ));
    private static final ConcurrentHashMap<String, ScriptBotMetaInfo> botMetaInfoMap = new ConcurrentHashMap<>();
    public volatile static ScriptBotLauncher INSTANCE;

    private final ScriptNodeConfiguration scriptNodeConfiguration;
    private final BotApi botApi;
    private final BotScriptAgent botScriptAgent;

    public static ScriptBotLauncher buildScriptBotLauncher(ScriptNodeConfiguration scriptNodeConfiguration, BotApi botApi, BotScriptAgent botScriptAgent) {
        if (INSTANCE == null) {
            synchronized (ScriptBotLauncher.class) {
                if (INSTANCE == null) {
                    INSTANCE = new ScriptBotLauncher(scriptNodeConfiguration, botApi, botScriptAgent);
                }
            }
        }
        return INSTANCE;
    }

    protected ScriptBotLauncher(ScriptNodeConfiguration scriptNodeConfiguration, BotApi botApi, BotScriptAgent botScriptAgent) {
        this.scriptNodeConfiguration = scriptNodeConfiguration;
        this.botApi = botApi;
        this.botScriptAgent = botScriptAgent;
    }

    /**
     * 加载并启动bot
     *
     * @param botKey botKey
     */
    public void loadAndLaunchBot(String botKey) {
        AutoBotConfig botConfig = scriptNodeConfiguration.getBotKeyConfigMap().get(botKey);
        if (botConfig == null) {
            throw new IllegalArgumentException("no bot in script node" + botKey);
        }
        loadAndLaunchBot(botConfig);
    }

    /**
     * 加载并启动bot
     *
     * @param botConfig botConfig
     */
    public void loadAndLaunchBot(AutoBotConfig botConfig) {
        String botKey = botConfig.getBotKey();
        ScriptBotMetaInfo rowBotMetaInfo = botMetaInfoMap.get(botKey);
        if (rowBotMetaInfo != null) {
            if (rowBotMetaInfo.getBot().getStatus() == BotStatus.RUNNING) {
                throw new IllegalArgumentException(botKey + " in running..please stop it first");
            }
        }

        log.info("[{}] start launch...", botKey);
        String className = botConfig.getClassName();
        if (StrUtil.isBlank(className)) {
            throw new IllegalArgumentException(botKey + " config class name is null");
        }
        try {
            // 加载 class
            // 1 编译为class
            // 2 加载class
            Class<?> aClass = loadScriptNodeResourceClass(
                    botConfig.getResourceDir(),
                    className,
                    botConfig.getExtraClassNameList(),
                    botKey
            );

            log.info("[{}] class load success ", botKey);
            if (isClassInInheritanceChain(aClass, AutoLaunchBot.class)) {
                Class<AutoLaunchBot<?>> botClass = (Class<AutoLaunchBot<?>>) aClass;
                // Step 3 启动bot
                AutoLaunchBot<?> autoLaunchBot = launch(botClass, botConfig, bot -> {
                    bot.setBotStatusChangeHandler((oldStatus, newStatus) -> {
                        // 3.1 添加监听， bot状态改变时上报
                        if (newStatus == BotStatus.RUNNING) {
                            botScriptAgent.addRunningBot(bot.getBotInfo().getName(), botKey, bot);
                        }

                        if (newStatus == BotStatus.STOPPED || newStatus == BotStatus.SHUTDOWN) {
                            botScriptAgent.removeRunningBot(bot.getBotInfo().getName(), botKey);
                        }
                    });
                    return true;
                });

                // Step 4 添加进菜单
                setLoadedBotInMenu(botKey, autoLaunchBot);
            } else {
                log.info("[{}] class[{}} illegal, must extends AutoLaunchBot.class", botKey, className);
            }
        } catch (BotStartException | BotInitException e) {
            log.error("script botKey[{}] auto launch error", botKey, e);
        } catch (Exception e) {
            log.error("script botKey[{}] auto launch error", botKey, e);
            throw new RuntimeException("load class error", e);
        }
    }


    /**
     * 启动bot
     *
     * @param botClass botClass
     * @return ApplicationContext
     * @throws BotStartException BotStartException
     * @throws BotInitException  BotInitException
     */
    public AutoLaunchBot<?> launch(
            Class<? extends AutoLaunchBot<?>> botClass,
            AutoBotConfig botConfig,
            Function<AutoLaunchBot<?>, Boolean> initHandler
    ) throws BotStartException, BotInitException {
        String botKey = botConfig.getBotKey();
        if (StrUtil.isBlank(botKey)) {
            throw new BotStartException("bot key is empty");
        }

        System.setProperty("spring.application.name", botKey);

        // 解析注解上的bot name
        BotApplication annotation = botClass.getAnnotation(BotApplication.class);
        String botName = null;
        if (annotation == null || StrUtil.isBlank((botName = annotation.name()))) {
            throw new BotStartException("bot must have @BotApplication annotation and must have name");
        }

        // Step 1 创建bot实例
        Constructor<? extends AutoLaunchBot<?>> constructor = null;
        AutoLaunchBot<?> bot = null;
        try {
            constructor = botClass.getConstructor();
            bot = constructor.newInstance();
        } catch (NoSuchMethodException | InstantiationException | IllegalAccessException |
                 InvocationTargetException e) {
            throw new BotInitException(e);
        }

        botConfig.setBotName(botName);
        bot.setBotName(botName);
        bot.setBotKey(botKey);
        botMetaInfoMap.put(botKey, new ScriptBotMetaInfo(
                bot,
                botConfig,
                initHandler
        ));

        // Step 3 启动bot
        launchResolvedScriptBot(botKey);

        return bot;
    }

    /**
     * 启动命令行菜单
     */
    public static void startCommandLineMenu() {
        scriptNodeCMDLineMenu.start();
    }

    /**
     * 添加Bot到菜单
     *
     * @param botKey botKey
     */
    public void addBotInMenu(String botKey) {
        scriptNodeCMDLineMenu.getUsableBotKeySet().add(botKey);
    }

    /**
     * 添加加载完成的bot到菜单
     *
     * @param botKey botKey
     * @param bot    bot
     */
    public void setLoadedBotInMenu(String botKey, AutoLaunchBot<?> bot) {
        scriptNodeCMDLineMenu.getLoadedBotMap().put(botKey, bot);
    }

    private void launchResolvedScriptBot(String botKey) throws BotStartException, BotInitException {
        ScriptBotMetaInfo scriptBotMetaInfo = botMetaInfoMap.get(botKey);
        if (scriptBotMetaInfo == null) {
            throw new BotStartException(botKey + " didn't resolved by ScriptBotLauncher, place invoke ScriptBotLauncher.launch(...) first");
        }

        log.info("bot[{}] start launch", botKey);
        scriptBotMetaInfo.getBot().launch(
                scriptNodeConfiguration,
                scriptBotMetaInfo.botConfig,
                botApi,
                scriptBotMetaInfo.initHandler
        );
    }

    /**
     * 加载script bot的class文件
     *
     * @param sourceDir sourceDir
     * @param className className
     * @return 已加载的BotClass文件
     * @throws Exception Exception
     */
    private static Class<?> loadScriptNodeResourceClass(
            String sourceDir, String className, List<String> extraClassName, String botKey
    ) throws Exception {
        String classOutputDir = FileUtil.getCompileClassResource(botKey);
        if (!DynamicJavaLoader.compileJavaDir(sourceDir, classOutputDir)) {
            throw new RuntimeException(sourceDir + " compile to class error");
        }
        log.info("{} compile finish, start output dir {}", sourceDir, classOutputDir);
        return DynamicJavaLoader.loadClassFromDir(classOutputDir, className, extraClassName);
    }

    public static boolean isClassInInheritanceChain(Class<?> subclass, Class<?> superclass) {
        Class<?> currentClass = subclass;
        while (currentClass != null) {
            if (currentClass.equals(superclass)) {
                return true;
            }
            currentClass = currentClass.getSuperclass();
        }
        return false;
    }

    /**
     * 获取bot状态
     *
     * @param botKey botKey
     * @return BotStatus
     */
    public BotStatus getBotStatus(String botKey) {
        ScriptBotMetaInfo botMetaInfo = botMetaInfoMap.get(botKey);
        if (botMetaInfo == null) {
            return BotStatus.NOT_LOADED;
        }
        return botMetaInfo.getBot().getStatus();
    }

    /**
     * 根据botKey 获取bot
     *
     * @param botKey botKey
     * @return AutoLaunchBot
     */
    public AutoLaunchBot<?> getBotByBotKey(String botKey) {
        ScriptBotMetaInfo botMetaInfo = botMetaInfoMap.get(botKey);
        return botMetaInfo == null ? null : botMetaInfo.getBot();
    }

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    public static class ScriptBotMetaInfo {
        private AutoLaunchBot<?> bot;
        private AutoBotConfig botConfig;
        Function<AutoLaunchBot<?>, Boolean> initHandler;
    }
}
package cn.com.vortexa.browser_control;

import cn.com.vortexa.browser_control.dto.SeleniumParams;
import cn.com.vortexa.browser_control.dto.SeleniumProxy;
import cn.com.vortexa.browser_control.execute.ExecuteGroup;
import cn.com.vortexa.browser_control.execute.ExecuteLogic;
import cn.com.vortexa.browser_control.util.SeleniumProxyAuth;
import cn.com.vortexa.browser_control.util.SeleniumUtil;
import cn.hutool.core.lang.Pair;
import cn.hutool.core.util.StrUtil;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.WindowType;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;

import java.io.File;
import java.io.IOException;
import java.time.Duration;
import java.util.*;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;


@Slf4j
@Getter
public abstract class SeleniumInstance implements SeleniumOperate {

    private final SeleniumParams params;

    private final ChromeOptions chromeOptions;

    private final SeleniumProxy proxy;

    private final List<ExecuteGroup> seleniumExecuteChain = new ArrayList<>();

    private final Random random = new Random();

    private final String instanceId;

    private WebDriver webDriver;

    private String targetHandle;

    @Setter
    private boolean autoClose = true;

    @Setter
    private Consumer<Long> finishHandler;

    public SeleniumInstance(
            String instanceId,
            SeleniumParams params
    ) throws IOException {
        this(instanceId, null, params);
    }

    public SeleniumInstance(
            String instanceId,
            SeleniumProxy proxy,
            SeleniumParams params
    ) throws IOException {
        this.instanceId = instanceId;
        if (instanceId == null || instanceId.isEmpty()) throw new IllegalArgumentException("instanceId is empty");
        this.params = params;
        this.proxy = proxy;
        this.chromeOptions = initChromeOption(proxy, params);
    }

    public abstract void init();

    public abstract void webDriverLaunched();

    /**
     * 添加执行方法
     *
     * @param executeGroup executeGroup
     * @return SeleniumInstance
     */
    public SeleniumInstance addExecuteFun(ExecuteGroup executeGroup) {
        this.seleniumExecuteChain.add(executeGroup);
        return this;
    }

    /**
     * 同步启动selenium
     */
    public void syncStart() throws InterruptedException {
        CountDownLatch latch = new CountDownLatch(1);

        if (finishHandler == null) {
            setFinishHandler(cost -> {
                latch.countDown();
            });
        } else {
            Consumer<Long> fh = getFinishHandler();
            setFinishHandler(cost -> {
                fh.accept(cost);
                latch.countDown();
            });
        }

        asyncStart();
        latch.await();
    }


    /**
     * 异步启动selenium
     */
    public void asyncStart() {
        init();

        long start = System.currentTimeMillis();
        try {
            // Step 1 设置driver
            String driverPath = params.getDriverPath();
            if (driverPath != null && !driverPath.isEmpty()) {
                System.setProperty("webdriver.chrome.driver", driverPath);
            }

            // Step 2 启动浏览器
            launchBrowser();

            webDriverLaunched();

            // Step 3 遍历execute chain 执行
            executeChainInvoke();
        } catch (Exception e) {
            log.error("selenium instance invoke error", e);
        } finally {
            if (finishHandler != null) {
                finishHandler.accept(System.currentTimeMillis() - start);
            }
        }
    }

    /**
     * 调用执行链
     *
     * @throws InterruptedException InterruptedException
     */
    protected void executeChainInvoke() throws InterruptedException {
        for (ExecuteGroup executeGroup : seleniumExecuteChain) {
            String groupName = executeGroup.getName();

            log.info("[{}]-[{}] group start execute", instanceId, groupName);

            // Step 3.1 判断该组操作是否能够进入
            Boolean isEnter = executeGroup.getEnterCondition().apply(webDriver, this);
            if (isEnter != null && isEnter) {
                // Step 3.1.1 能够进入，开始执行group的逻辑
                log.info("[{}]-[{}] group can execute", instanceId, groupName);
                executeGroup.getExecuteItems().forEach(item -> {
                    // Step 3.1.1.1 带重试
                    Integer retryTimes = item.getRetryTimes() == null ? 1 : item.getRetryTimes();
                    for (int j = 0; j < retryTimes; j++) {
                        try {
                            log.info("[{}]-[{}]-[{}] start invoke logic [{}/{}]",
                                    instanceId, groupName, item.getName(), j, retryTimes);
                            ExecuteLogic executeLogic = item.getExecuteLogic();

                            if (executeLogic != null) {
                                executeLogic.execute(webDriver, this);
                            }
                            // Step 3。1.1.2 运行成功，return下一个item执行
                            return;
                        } catch (Exception e) {
                            // Step 3.1.1.3 运行失败，调用重试Rest方法后，继续执行
                            log.error("[{}]-[{}]-[{}] invoke logic error, retry {}", instanceId, groupName, item.getName(), j, e);

                            ExecuteLogic resetLogic = item.getResetLogic();
                            if (resetLogic != null) {
                                resetLogic.execute(webDriver, this);
                            }
                        }
                    }
                    // Step 3.1.1.4 超过次数抛出异常
                    throw new RuntimeException("[%S]-[%s]-[%s] invoke logic error, out of limit %s"
                            .formatted(instanceId, groupName, item.getName(), retryTimes));
                });
            } else {
                // Step 3.1.2 不能进入执行
                log.warn("[{}]-[{}] group can not execute", instanceId, groupName);
            }

            // Step 3.2 group 操作执行完，sleep一段时间
            int timeout = random.nextInt(500, 5000);
            log.info("[{}]-[{}] execute finish, sleep [{}]ms", instanceId, groupName, timeout);
            TimeUnit.MILLISECONDS.sleep(timeout);
        }
    }

    /**
     * 创建web driver
     *
     * @param chromeOptions chromeOptions
     * @return WebDriver
     */
    protected WebDriver createWebDriver(ChromeOptions chromeOptions) {
        ChromeDriver chromeDriver = new ChromeDriver(chromeOptions);
        log.info("chrome browser started, start execute chain");
        try {
            TimeUnit.SECONDS.sleep(5);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
        return chromeDriver;
    }

    /**
     * 启动浏览器
     *
     * @throws IOException IOException
     */
    private void launchBrowser() throws IOException {
        log.info("starting chrome browser [{}}", instanceId);
        this.webDriver = createWebDriver(chromeOptions);
        this.webDriver.manage().timeouts().implicitlyWait(Duration.ofSeconds(1));

        // Step 2.2 设置代理
        setProxyAuth();

        // Step 2.3 进入目标页面
        // 打开初始页面
        Set<String> windowHandles = webDriver.getWindowHandles();
        for (String windowHandle : windowHandles) {
            webDriver.switchTo().window(windowHandle);
            String title = null;
            try {
                // 打开新的标签页并自动切换到这个 tab
                webDriver.switchTo().newWindow(WindowType.TAB);
                title = webDriver.getTitle();
                // 跳转到目标网址
                webDriver.get(params.getTargetWebSite());
                targetHandle = webDriver.getWindowHandle();
                TimeUnit.SECONDS.sleep(5);
                break;
            } catch (WebDriverException e) {
                webDriver.close();
            } catch (Exception e) {
                log.warn("{} cannot open tab, try next", title);
            }
        }
    }

    private void setProxyAuth() {

    }

    /**
     * 初始化参数
     *
     * @param proxy  proxy
     * @param params params
     * @return ChromeOptions
     * @throws IOException IOException
     */
    private ChromeOptions initChromeOption(SeleniumProxy proxy, SeleniumParams params) throws IOException {
        final ChromeOptions chromeOptions = new ChromeOptions();
        addDefaultChromeOptions(chromeOptions);

        if (params.getChromeOptions() != null) {
            params.getChromeOptions().forEach(chromeOptions::addArguments);
        }
        if (params.getExperimentalOptions() != null) {
            for (Pair<String, String> pair : params.getExperimentalOptions()) {
                chromeOptions.setExperimentalOption(pair.getKey(), pair.getValue());
            }
        }
        if (params.getExtensionPaths() != null) {
            chromeOptions.addExtensions(params.getExtensionPaths().stream().map(File::new).toList());
        }
        if (proxy != null) {
            chromeOptions.addExtensions(new File(SeleniumProxyAuth.createProxyAuthExtension(proxy)));
        }
        return chromeOptions;
    }

    protected void addDefaultChromeOptions(ChromeOptions chromeOptions) {
        // 设置用户数据目录
        chromeOptions.addArguments("user-data-dir=" + SeleniumUtil.getUserDataDir(instanceId));
        // 设置代理
        chromeOptions.addArguments("--disable-gpu");
        chromeOptions.addArguments("--remote-allow-origins=*");
        chromeOptions.addArguments("--no-default-browser-check");
        chromeOptions.addArguments("--disable-popup-blocking");
        chromeOptions.addArguments("--disable-infobars");
        chromeOptions.addArguments("---no-sandbox");

        chromeOptions.addArguments("--disable-blink-features=AutomationControlled");  // 禁用自动化检测
        chromeOptions.addArguments("--start-maximized");
        chromeOptions.setExperimentalOption("useAutomationExtension", false);
        chromeOptions.setExperimentalOption("excludeSwitches", new String[]{"enable-automation"});
    }

    public void close() {
        if (StrUtil.isNotBlank(targetHandle)) {
            try {
                doClose();
                webDriver.switchTo().window(targetHandle);
                webDriver.close();
                seleniumExecuteChain.clear();
                webDriver = null;
            } catch (Exception e) {
                log.error("{} close exception", instanceId, e);
            }
        }
    }

    protected void doClose() {

    }
}
