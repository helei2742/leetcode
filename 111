package cn.com.vortexa.script_bot.daily.beamable;


import cn.com.vortexa.browser_control.SeleniumInstance;
import cn.com.vortexa.browser_control.constants.BrowserDriverType;
import cn.com.vortexa.browser_control.execute.ExecuteGroup;
import cn.com.vortexa.browser_control.execute.ExecuteItem;
import cn.com.vortexa.common.constants.BotJobType;
import cn.com.vortexa.common.entity.AccountContext;
import cn.com.vortexa.script_node.anno.BotApplication;
import cn.com.vortexa.script_node.anno.BotMethod;
import cn.com.vortexa.script_node.bot.selenium.FingerBrowserBot;
import cn.com.vortexa.script_node.dto.selenium.ACBotTypedSeleniumExecuteInfo;
import lombok.extern.slf4j.Slf4j;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

import java.util.List;
import java.util.Set;
import java.util.concurrent.TimeUnit;

/**
 * @author helei
 * @since 2025-04-06
 */
@Slf4j
@BotApplication(
        name = "beamable_bot"
)
public class BeamableBot extends FingerBrowserBot {
    public static final String TARGET_SITE_URL = "https://hub.beamable.network/modules/dailyreward";

    @Override
    protected BeamableBot getInstance() {
        return this;
    }

    @Override
    protected BrowserDriverType browserDriverType() {
        return BrowserDriverType.BIT_BROWSER;
    }


    @BotMethod(jobType = BotJobType.ONCE_TASK)
    private void dailyTask(AccountContext accountContext) {
        syncAccountFBInvoker(
            "daily_task",
            accountContext,
            () -> ACBotTypedSeleniumExecuteInfo
                .builder()
                .waitTime(60)
                .waitTimeUnit(TimeUnit.MINUTES)
                .seleniumExecuteChain(List.of(
                    ExecuteGroup
                        .builder().name("每日箱子").enterCondition((webDriver, params) -> {
                            webDriver.get(TARGET_SITE_URL);
                            try {
                                TimeUnit.SECONDS.sleep(5);
                            } catch (InterruptedException e) {
                                throw new RuntimeException(e);
                            }
                            return true;
                        })
                        .executeItems(List.of(
                            ExecuteItem.builder().name("领取").executeLogic(this::dailyReword).build()
                        ))
                        .build(),
                    ExecuteGroup
                        .builder().name("点击任务").enterCondition((webDriver, params) -> {
                            webDriver.get("https://hub.beamable.network/modules/questboard");
                            try {
                                TimeUnit.SECONDS.sleep(10);
                            } catch (InterruptedException e) {
                                throw new RuntimeException(e);
                            }
                            return true;
                        })
                        .executeItems(List.of(
                            ExecuteItem.builder().name("点击任务").executeLogic(this::clickTask).build()
                        ))
                        .build(),
                    ExecuteGroup
                        .builder().name("完成任务").enterCondition((webDriver, params) -> {
                            webDriver.get("https://hub.beamable.network/modules/questboard");
                            try {
                                TimeUnit.SECONDS.sleep(10);
                            } catch (InterruptedException e) {
                                throw new RuntimeException(e);
                            }
                            return true;
                        })
                        .executeItems(List.of(
                            ExecuteItem.builder().name("领取奖励").executeLogic(this::taskClaim).build()
                        ))
                        .build()
                ))
                .build()
        );
    }


    private void dailyReword(WebDriver webDriver, SeleniumInstance seleniumInstance) {
        WebElement webElement = seleniumInstance.xPathFindElement("//div[@id=\"moduleGriddedContainer\"]/div/div/div/div[2]/div//button[./div[text()='Claim']]", 40);
        ((JavascriptExecutor) webDriver).executeScript("arguments[0].click();", webElement);
        seleniumInstance.randomWait(8);
    }

    private void clickTask(WebDriver webDriver, SeleniumInstance seleniumInstance) {
        String mainHandle = webDriver.getWindowHandle();

        while (true) {
            try {
                webDriver.switchTo().window(mainHandle);
                webDriver.navigate().refresh();
                seleniumInstance.randomWait(3);
                Set<String> handles = webDriver.getWindowHandles();
                WebElement webElement = seleniumInstance.xPathFindElement("//div[@id=\"pageBackground\"]/div[2]/div/div/div[2]/div[\n" +
                        "  not(contains(div/a/div[2]/div[2]/span, 'Claimed')) \n" +
                        "  and \n" +
                        "  count(div/a/div[2]/div) != 2\n" +
                        "  and \n" +
                        "  not(contains(div/a/div/div[2], 'Connect'))\n" +
                        "  and \n" +
                        "  not(contains(div/a/div/div[2], 'Youtube to learn'))\n" +
                        "]", 60);

                seleniumInstance.scrollTo(webElement);
                seleniumInstance.randomWait(2);
                webElement.click();

                seleniumInstance.xPathClick("//*[@id=\"moduleGriddedContainer\"]/div/div[2]/div[2]/div[1]/div[2]/div/div/div[2]/a", 60);

                seleniumInstance.randomWait(8);
                Set<String> after = webDriver.getWindowHandles();
                after.removeAll(handles);

                for (String handle : after) {
                    webDriver.switchTo().window(handle);
                    webDriver.close();
                }
                webDriver.switchTo().window(mainHandle);

                // 回到主页面
                seleniumInstance.xPathClick("//*[@id=\"moduleGriddedContainer\"]/div/div[1]", 60);
                seleniumInstance.randomWait(8);
            }catch (Exception e) {
                log.error(e.getMessage(), e);
                break;
            }
        }
        webDriver.switchTo().window(mainHandle);
        webDriver.get("https://hub.beamable.network/modules/questsold");
    }


    private void taskClaim(WebDriver webDriver, SeleniumInstance seleniumInstance) {
        try {
            TimeUnit.SECONDS.sleep(5);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }

        while (true) {
            try {
                WebElement webElement = seleniumInstance.xPathFindElement("//div[@id=\"pageBackground\"]/div[2]/div/div/div[2]/div[contains(div/a/div[2]/div[2], 'Claimable')]", 60);

                seleniumInstance.scrollTo(webElement);
                seleniumInstance.randomWait(3);
                webElement.click();

                seleniumInstance.xPathClick("//button[text()='claim reward']", 60);
                seleniumInstance.xPathClick("//button[text()='Close']", 60);

                seleniumInstance.randomWait();
                // 回到主页面
                seleniumInstance.xPathClick("//*[@id=\"moduleGriddedContainer\"]/div/div[1]", 60);
                seleniumInstance.randomWait();
            }catch (Exception e) {
                log.error(e.getMessage(), e);
                break;
            }
        }
    }
}
package cn.com.vortexa.script_bot.daily.enos;


import cn.com.vortexa.browser_control.SeleniumInstance;
import cn.com.vortexa.browser_control.constants.BrowserDriverType;
import cn.com.vortexa.browser_control.execute.ExecuteGroup;
import cn.com.vortexa.browser_control.execute.ExecuteItem;
import cn.com.vortexa.common.constants.BotJobType;
import cn.com.vortexa.common.entity.AccountContext;
import cn.com.vortexa.script_node.anno.BotApplication;
import cn.com.vortexa.script_node.anno.BotMethod;
import cn.com.vortexa.script_node.bot.selenium.AccountFingerBrowserSelenium;
import cn.com.vortexa.script_node.bot.selenium.FingerBrowserBot;
import cn.com.vortexa.script_node.dto.selenium.ACBotTypedSeleniumExecuteInfo;
import cn.hutool.core.util.RandomUtil;
import cn.hutool.core.util.StrUtil;
import lombok.extern.slf4j.Slf4j;
import org.jetbrains.annotations.NotNull;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

import java.util.List;
import java.util.Set;
import java.util.concurrent.TimeUnit;

/**
 * @author helei
 * @since 2025-05-07
 */
@Slf4j
@BotApplication(
        name = "enos_bot"
)
public class EnosBot extends FingerBrowserBot {
    private static final String MAIN_PAGE_URL = "https://speedrun.enso.build/";

    @Override
    protected BrowserDriverType browserDriverType() {
        return BrowserDriverType.BIT_BROWSER;
    }

    @Override
    protected FingerBrowserBot getInstance() {
        return this;
    }

    @BotMethod(jobType = BotJobType.ONCE_TASK)
    public void dailyJob(AccountContext accountContext) {
        super.syncAccountFBInvoker(
            "daily_job",
            accountContext,
            () -> ACBotTypedSeleniumExecuteInfo
                .builder()
                .waitTime(60)
                .waitTimeUnit(TimeUnit.MINUTES)
                .seleniumExecuteChain(List.of(
                    ExecuteGroup
                        .builder().name("每日DEFI").enterCondition((webDriver, params) -> {
                            try {
                                webDriver.get(MAIN_PAGE_URL);
                                TimeUnit.SECONDS.sleep(5);
                            } catch (InterruptedException e) {
                                throw new RuntimeException(e);
                            }
                            return true;
                        })
                        .executeItems(List.of(
                            ExecuteItem.builder().name("创建DEFI").executeLogic(this::createDailyDefi).build()
                        ))
                        .build(),
                    ExecuteGroup
                        .builder().name("app点击").enterCondition((webDriver, params) -> {
                            try {
                                webDriver.get(MAIN_PAGE_URL);
                                TimeUnit.SECONDS.sleep(5);
                            } catch (InterruptedException e) {
                                throw new RuntimeException(e);
                            }
                            return true;
                        })
                        .executeItems(List.of(
                            ExecuteItem.builder().name("点击app").executeLogic(this::clickApp).build()
                        ))
                        .build()
                ))
                .build()
        );
    }


    private void clickApp(WebDriver webDriver, SeleniumInstance seleniumInstance) {
        String mainHandle = webDriver.getWindowHandle();
        seleniumInstance.xPathClick("//*[@id=\"header\"]/a[2]", 30);
        List<WebElement> pageIdxs = seleniumInstance.xPathFindElements("/html/body/div[1]/main/div/div/div[5]/ul/li");
        for (WebElement pageIdx : pageIdxs) {
            String title = pageIdx.getDomAttribute("title");
            if (StrUtil.isEmpty(title)) {
                continue;
            }
            try {
                int i = Integer.parseInt(title);
                logger.info(getInstance() + " start click page " + i);
                seleniumInstance.scrollTo(pageIdx);
                seleniumInstance.randomWait(3);
                pageIdx.click();

                seleniumInstance.randomWait(8);
                List<WebElement> webElements = seleniumInstance.xPathFindElements("/html/body/div[1]/main/div/div/div[4]/a[count(button/div/div) = 2]");

                for (WebElement webElement : webElements) {
                    Set<String> before = webDriver.getWindowHandles();

                    seleniumInstance.scrollTo(webElement);
                    seleniumInstance.randomWait(2);
                    webElement.click();
                    seleniumInstance.randomWait(5);

                    Set<String> after = webDriver.getWindowHandles();
                    after.removeAll(before);
                    for (String handle : after) {
                        webDriver.switchTo().window(handle);
                        webDriver.close();
                    }
                    webDriver.switchTo().window(mainHandle);

                    seleniumInstance.randomWait(5);
                }
            } catch (Exception e) {
                log.debug(e.getMessage());
            }
        }

    }

    private void createDailyDefi(WebDriver webDriver, SeleniumInstance seleniumInstance) {
        seleniumInstance.xPathClick("//*[@id=\"video-container\"]/div[2]/div/a[1]", 60);

        WebElement webElement = seleniumInstance.xPathFindElement("/html/body/div[1]/main/div/div/div[4]/button/div/div/span[2]", 30);
        seleniumInstance.randomWait(4);
        int count = 5;
        if (StrUtil.isNotBlank(webElement.getText())) {
            String str = webElement.getText();
            if (webElement.getText().contains("Resets")) {
                count = 0;
                logger.info(seleniumInstance.getInstanceId() + " today create finish");
            } else {
                str = str.replace("(", "").replace(")", "");
                count = Integer.parseInt(str.split(" ")[0]);
            }
        }
        if (count <= 0) {
            return;
        }
        logger.info(seleniumInstance.getInstanceId() + " today remaining " + count);
        AccountFingerBrowserSelenium afbs = (AccountFingerBrowserSelenium) seleniumInstance;
        AccountContext accountContext = afbs.getAccountContext();

        for (int i = 0; i < count; i++) {
            seleniumInstance.xPathClick("/html/body/div[1]/main/div/div/div[4]/button", 15);
            WebElement nameInput = seleniumInstance.xPathFindElement("//*[@id=\"name\"]");
            String name = randomStr();
            nameInput.sendKeys(name);
            seleniumInstance.randomWait(2);
            WebElement subdomainInput = seleniumInstance.xPathFindElement("//*[@id=\"subdomain\"]");
            String subdomain = randomStr();
            subdomainInput.sendKeys(subdomain);
            seleniumInstance.randomWait(2);
            String username = accountContext.getTwitter().getUsername();
            WebElement twitterInput = seleniumInstance.xPathFindElement("//*[@id=\"twitter\"]");
            twitterInput.sendKeys(username);
            seleniumInstance.randomWait(2);
            seleniumInstance.xPathClick("/html/body/div[1]/main/div/div/form/button[1]", 30);

            logger.info(seleniumInstance.getInstanceId() + " create defi finish idx[%s] name[%s] subdomain[%s]".formatted(
                    i + 1, name, subdomain
            ));
            seleniumInstance.randomWait(3);
            seleniumInstance.xPathClick("/html/body/div[1]/main/div/div/div[2]/button", 30);
        }
    }

    private static @NotNull String randomStr() {
        return RandomUtil.randomString("1234567890qwertyuiopasdfghjklzxcvbnm", 20);
    }
}
package cn.com.vortexa.script_bot.daily.magic_newton_v2;

import cn.com.vortexa.browser_control.SeleniumInstance;
import cn.com.vortexa.browser_control.constants.BrowserDriverType;
import cn.com.vortexa.browser_control.execute.ExecuteGroup;
import cn.com.vortexa.browser_control.execute.ExecuteItem;
import cn.com.vortexa.script_node.anno.BotApplication;
import cn.com.vortexa.script_node.bot.selenium.FingerBrowserBot;
import cn.com.vortexa.script_node.dto.selenium.ACBotTypedSeleniumExecuteInfo;
import cn.hutool.core.lang.Pair;
import lombok.extern.slf4j.Slf4j;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;

import java.util.*;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


/**
 * @author helei
 * @since 2025-04-05
 */
@Slf4j
@BotApplication(
        name = "magic_newton_v2"
)
public class MagicNewtonBotV2 extends FingerBrowserBot {

    public static final String TARGET_SITE_URL = "https://www.magicnewton.com/portal/rewards";

    private static final Pattern countPattern = Pattern.compile("(\\d+)/(\\d+)");

    @Override
    protected BrowserDriverType browserDriverType() {
        return BrowserDriverType.BIT_BROWSER;
    }

    @Override
    protected FingerBrowserBot getInstance() {
        return this;
    }

    protected ACBotTypedSeleniumExecuteInfo buildExecuteGroupChain() {
        ArrayList<ExecuteGroup> list = new ArrayList<>();
        list.add(ExecuteGroup
                .builder().name("摇筛子").enterCondition((webDriver, params) -> {
                    try {
                        webDriver.get(TARGET_SITE_URL);
                        TimeUnit.SECONDS.sleep(5);
                    } catch (InterruptedException e) {
                        throw new RuntimeException(e);
                    }
                    return true;
                })
                .executeItems(List.of(
                        ExecuteItem.builder().name("进入摇骰子界面").executeLogic(this::enterDice).build()
                ))
                .build()
        );

        list.add(ExecuteGroup
                .builder().name("扫雷").enterCondition((webDriver, seleniumInstance) -> {
                    webDriver.get(seleniumInstance.getParams().getTargetWebSite());
                    try {
                        webDriver.get(TARGET_SITE_URL);
                        TimeUnit.SECONDS.sleep(5);
                    } catch (InterruptedException e) {
                        throw new RuntimeException(e);
                    }
                    return true;
                })
                .executeItems(List.of(
                        ExecuteItem.builder().name("进入扫雷界面").executeLogic(this::enterScanBoom).build()
                        , ExecuteItem.builder().name("扫雷。。。").executeLogic(this::scanBoomProcess).build()
                ))
                .build()
        );

        return new ACBotTypedSeleniumExecuteInfo();
    }


    private void enterDice(WebDriver webDriver, SeleniumInstance seleniumInstance) {
        seleniumInstance.xPathClick("//p[text()='Roll now']");

        try {
            seleniumInstance.xPathClick("//button[./div/p[text()=\"Let's roll\"]]", 10);
            seleniumInstance.xPathClick("//p[text()='Throw Dice']", 0);
            seleniumInstance.xPathClick("//p[text()='Return Home']", 10);
        } catch (Exception e) {
            logger.warn(seleniumInstance.getInstanceId() + " cannot dice");
        }
    }

    private void enterScanBoom(WebDriver webDriver, SeleniumInstance seleniumInstance) {
        seleniumInstance.randomWait();
        seleniumInstance.xPathClick("//p[text()='Play now']", 10);
        try {
            seleniumInstance.xPathClick("//button[./div[text()='Continue']]", 10);
        } catch (Exception e) {
            logger.warn(seleniumInstance.getInstanceId() + " may already in scan boom page");
        }
    }

    private void scanBoomProcess(WebDriver webDriver, SeleniumInstance seleniumInstance) {
        String msInfo = seleniumInstance.xPathFindElement("//div[@class=\"ms-info\"]").getText();
        Matcher matcher = countPattern.matcher(msInfo);
        int current = 0;
        int total = 0;
        if (matcher.find()) {
            current = Integer.parseInt(matcher.group(1));
            total = Integer.parseInt(matcher.group(2));
        }
        logger.info(seleniumInstance.getInstanceId() + " scan boom [%s/%s]".formatted(current, total));
        if (total == current) {
            logger.warn(seleniumInstance.getInstanceId() + " count limit");
            return;
        }
        // 扫雷
        playGame(webDriver, seleniumInstance);
    }

    private void playGame(WebDriver webDriver, SeleniumInstance seleniumInstance) {
        String instanceId = seleniumInstance.getInstanceId();

        Actions actions = new Actions(webDriver);

        int playLimit = 3;
        int playCount = 0;
        int scanCount = 0;
        Set<Integer> excludeIndex = new HashSet<>();

        while (true) {
            Map<Integer, WebElement> index2ElementMap = new HashMap<>();
            seleniumInstance.xPathFindElement("//div[@class=\"fPSBzf bYPztT dKLBtz cMGtQw gamecol\"]", 30);
            List<WebElement> rowsElement = seleniumInstance.xPathFindElements("//div[@class=\"fPSBzf bYPztT dKLBtz cMGtQw gamecol\"]");
            List<List<Integer>> map = new ArrayList<>(rowsElement.size());

            Set<Integer> knownIndex = new HashSet<>();

            for (int x = 0; x < rowsElement.size(); x++) {
                List<WebElement> col = rowsElement.get(x).findElements(
                        By.xpath("./div/div")
                );
                List<Integer> line = new ArrayList<>(col.size());
                for (int y = 0; y < col.size(); y++) {
                    WebElement item = col.get(y);
                    int index = x * col.size() + y;
                    index2ElementMap.put(index, item);
                    String text = item.getText().trim();
                    String style = item.getDomAttribute("style");
                    String divClass = item.getDomAttribute("class");

                    if(excludeIndex.contains(index)){
                        line.add(-1);
                    } else if (!text.isEmpty() && text.matches("\\d+")) {
                        line.add(Integer.parseInt(text));
                    } else if (style != null && style.contains("background-color: transparent")
                            && style.contains("border: none")
                            && style.contains("box-shadow: none")
                            && style.contains("color: white")) {
                        line.add(0);
                    } else if (divClass != null && divClass.contains("tile-flagged")) {
                        line.add(-1);
                    } else {
                        knownIndex.add(index);
                        line.add(null);
                    }
                }
                map.add(line);
            }

            Map<String, Set<Pair<Integer, Integer>>> result = MinesweeperSolver.solve(map);
            Set<Pair<Integer, Integer>> toClick = result.get("click");
            Set<Pair<Integer, Integer>> boom = result.get("boom");

            logger.info(instanceId + " [%s] scan count[%s]. map resolve finish :\n click[%s] boom[%s]\n%s".formatted(
                    playCount, scanCount, toClick.size(), boom.size(), printMap(map)
            ));

            // 右击炸弹
            for (Pair<Integer, Integer> pos : boom) {
                int index = pos.getKey() * map.getFirst().size() + pos.getValue();
                excludeIndex.add(index);
                actions.contextClick(index2ElementMap.get(index)).perform();
            }

            // 点击可点击区域
            for (Pair<Integer, Integer> pos : toClick) {
                int index = pos.getKey() * map.getFirst().size() + pos.getValue();
                index2ElementMap.get(index).click();
            }

            if (toClick.isEmpty() && boom.isEmpty()) {
                Set<Integer> finalExcludeIndex = excludeIndex;
                List<Integer> list = knownIndex.stream().filter(i->!finalExcludeIndex.contains(i)).toList();
                index2ElementMap.get(list.get(getRandom().nextInt(0, list.size()))).click();
            }

            try {
                WebElement returnHome = webDriver.findElement(By.xpath("//button[./div[text()='Play Again']]"));
                returnHome.click();
                playCount++;
                scanCount = 0;
                excludeIndex.clear();
                if (playCount > playLimit) {
                    return;
                }
            } catch (Exception e) {
                try {
                    WebElement returnHome = webDriver.findElement(By.xpath("//button[./div[text()='Return Home']]"));
                    returnHome.click();
                    // 没有再来一次，只有返回
                    return;
                } catch (Exception e2) {
                    scanCount++;
                    logger.warn(instanceId + " [%s] scan count[%s] next epoch......".formatted(
                            playCount, scanCount
                    ));
                    if (scanCount > 50) {
                        logger.error(instanceId + " [%s] scan count[%s] out limit 50......".formatted(
                                playCount, scanCount
                        ));
                        break;
                    }
                }
            }
        }
    }

    private String printMap(List<List<Integer>> map) {
        StringBuilder sb = new StringBuilder();
        for (List<Integer> integers : map) {
            sb.append(integers).append('\n');
        }
        return sb.toString();
    }
}
package cn.com.vortexa.script_node.bot.selenium;

import cn.com.vortexa.browser_control.OptSeleniumInstance;
import cn.com.vortexa.browser_control.dto.SeleniumParams;
import cn.com.vortexa.browser_control.execute.ExecuteGroup;
import cn.com.vortexa.common.entity.AccountContext;
import cn.com.vortexa.common.util.log.AppendLogger;
import cn.com.vortexa.script_node.dto.selenium.ACBotTypedSeleniumExecuteInfo;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.remote.RemoteWebDriver;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.*;
import java.util.concurrent.locks.ReentrantLock;

@Slf4j
public class AccountFingerBrowserSelenium extends OptSeleniumInstance {

    private final ReentrantLock lock = new ReentrantLock();

    @Getter
    private final AccountContext accountContext;

    @Override
    protected void addDefaultChromeOptions(ChromeOptions chromeOptions) {

    }

    /**
     * 执行链信息
     */
    private final List<ACBotTypedSeleniumExecuteInfo> executeInfoList = new ArrayList<>();

    @Getter
    private volatile boolean running = false;

    public AccountFingerBrowserSelenium(
            AccountContext accountContext,
            SeleniumParams params,
            AppendLogger logger
    ) throws IOException {
        super(accountContext.getSimpleInfo(), params, logger);
        this.accountContext = accountContext;
    }

    @Override
    protected WebDriver createWebDriver(ChromeOptions chromeOptions) {
        if (getWebDriver() != null) return getWebDriver();

        try {
            URL remoteWebDriverUrl = new URL(getParams().getDriverPath());
            chromeOptions.setCapability("timeouts", new HashMap<String, Integer>() {{
                put("script", 30000);  // 设置脚本执行超时
                put("pageLoad", 30000);  // 设置页面加载超时
                put("implicit", 30000);  // 设置隐式等待超时
            }});
            return new RemoteWebDriver(remoteWebDriverUrl, chromeOptions);
        } catch (MalformedURLException e) {
            log.error("[{}] create remote web driver error", getInstanceId(), e);
            throw new RuntimeException(e);
        }
    }

    /**
     * 开始账户指纹浏览器selenium控制
     */
    public void startACFBSelenium() {
        lock.lock();
        try {
            running = true;
            getLogger().info(getInstanceId() + " start all added bot selenium execute...");

            for (ACBotTypedSeleniumExecuteInfo executeInfo : executeInfoList) {
                try {
                    getLogger().info("[%s]-[%s]-[%s] start selenium execute...".formatted(
                        getInstanceId(), executeInfo.getBotKey(), executeInfo.getJobName()
                    ));
                    List<ExecuteGroup> seleniumExecuteChain = super.getSeleniumExecuteChain();
                    seleniumExecuteChain.clear();
                    seleniumExecuteChain.addAll(executeInfo.getSeleniumExecuteChain());

                    syncStart();
                    getLogger().info("[%s]-[%s]-[%s] selenium execute finish".formatted(
                        getInstanceId(), executeInfo.getBotKey(), executeInfo.getJobName()
                    ));
                } catch (Exception e) {
                    getLogger().error("[%s]-[%s]-[%s] selenium execute error".formatted(
                        getInstanceId(), executeInfo.getBotKey(), executeInfo.getJobName()
                    ), e);
                    randomWait(3);
                }
            }

            getLogger().info(getInstanceId() + " all selenium execute finish");
        } finally {
            getLogger().debug(getInstanceId() + "  closing webDriver");
            close();
            getLogger().debug(getInstanceId() + " close webDriver finish");

            running = false;
            lock.unlock();
        }
    }

    /**
     * 添加执行链
     *
     * @param executeInfo executeInfo
     */
    public void addExecuteInfo(ACBotTypedSeleniumExecuteInfo executeInfo) {
        getLogger().info("[%s]-[%s] adding execute info...".formatted(getInstanceId(), executeInfo.getBotKey()));
        lock.lock();
        try {
            executeInfoList.add(executeInfo);
            log.info("[%s]-[%s] add execute info finish".formatted(getInstanceId(), executeInfo.getBotKey()));
        } finally {
            lock.unlock();
        }
    }

    @Override
    protected void doClose() {
        super.doClose();
        executeInfoList.clear();
    }
}
package cn.com.vortexa.script_node.bot.selenium;

import cn.com.vortexa.browser_control.constants.BrowserDriverType;
import cn.com.vortexa.browser_control.driver.BitBrowserDriver;
import cn.com.vortexa.browser_control.driver.FingerprintBrowserDriver;
import cn.com.vortexa.browser_control.dto.SeleniumParams;
import cn.com.vortexa.common.dto.config.AutoBotConfig;
import cn.com.vortexa.common.entity.AccountContext;
import cn.com.vortexa.script_node.bot.AutoLaunchBot;
import cn.com.vortexa.script_node.dto.selenium.ACBotTypedSeleniumExecuteInfo;
import cn.com.vortexa.script_node.service.BotApi;
import cn.hutool.core.lang.Pair;
import lombok.extern.slf4j.Slf4j;

import org.jetbrains.annotations.NotNull;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.locks.ReentrantLock;
import java.util.function.Supplier;

/**
 * @author com.helei
 * @since 2025/4/9 14:35
 */
@Slf4j
public abstract class FingerBrowserBot extends AutoLaunchBot<FingerBrowserBot> {

    public static final int BROWSER_BATCH_SIZE = 4; //  浏览器批大小
    public static final String DEFAULT_WEB_SITE_URL = "http://www.google.com";   // 默认打开地址Key
    public static final String DEFAULT_WEB_SITE_URL_KEY = "default_web_site_url";   // 默认打开地址Key
    public static final String FINGER_BROWSER_API_URL_KEY = "finger_browser_api_url"; // 指纹浏览器api地址Key
    public static final String CHROME_DRIVER_URL_KEY = "chrome_driver_url"; // chromedriver连接地址Key
    public static final String FINGER_BROWSER_SEQ_KEY = "finger_browser_seq";   //  指纹浏览器序号Key

    private static final Set<Integer> currentWindowSeq = new HashSet<>();   //  当前窗口长度
    private static final ConcurrentHashMap<AccountContext, AccountFingerBrowserSelenium> accountFBSeleniumMap = new ConcurrentHashMap<>();
    private static final Map<String, ACBotTypedSeleniumExecuteInfo> acExecuteInfos = new HashMap<>();
    private static final Map<Integer, ReentrantLock> fingerBrowserLockMap = new HashMap<>();

    private static volatile FingerprintBrowserDriver browserDriver;
    private static String chromeDriverUrl;
    private static String fingerBrowserApiUrl;

    private String openUrl = DEFAULT_WEB_SITE_URL;

    @Override
    protected void botStopped() {
        super.botStopped();
        Iterator<Map.Entry<AccountContext, AccountFingerBrowserSelenium>> iterator = accountFBSeleniumMap.entrySet()
                .iterator();
        while (iterator.hasNext()) {
            Map.Entry<AccountContext, AccountFingerBrowserSelenium> entry = iterator.next();
            entry.getValue().close();
            iterator.remove();
        }
        acExecuteInfos.clear();
    }

    @Override
    protected void botInitialized(AutoBotConfig botConfig, BotApi botApi) {
        if (chromeDriverUrl == null) {
            chromeDriverUrl = (String) botConfig.getCustomConfig().get(CHROME_DRIVER_URL_KEY);
        }
        if (fingerBrowserApiUrl == null) {
            fingerBrowserApiUrl = (String) botConfig.getCustomConfig().get(FINGER_BROWSER_API_URL_KEY);
        }

        openUrl = getDefaultWebSiteUrl(botConfig);
        initBrowserDriver();
    }

    /**
     * 账号的不同job之间同步运行指纹浏览器
     *
     * @param jobName   jobName
     * @param accountContext    账户上下文
     * @param seleniumExecuteInfoSupplier   生成执行信息
     */
    public void syncAccountFBInvoker(
        String jobName,
        AccountContext accountContext,
        Supplier<ACBotTypedSeleniumExecuteInfo> seleniumExecuteInfoSupplier
    ) {
        // Step 1 获取（不存在则注册job的执行信息）
        ACBotTypedSeleniumExecuteInfo executeInfo = tryGetJobSeleniumExecuteInfo(jobName, seleniumExecuteInfoSupplier);
        if (executeInfo == null) {
            return;
        }

        // Step 2 尝试获取浏览器的锁，来执行
        int seq = Integer.parseInt((String) accountContext.getParams().get(FINGER_BROWSER_SEQ_KEY));
        ReentrantLock fbLock = getFBLock(seq);

        boolean isRun;
        String simpleInfo = accountContext.getSimpleInfo();
        try {
            isRun = fbLock.tryLock(executeInfo.getWaitTime(), executeInfo.getWaitTimeUnit());
        } catch (InterruptedException e) {
            logger.warn(simpleInfo + " waiting for execute job " + jobName + " interrupted");
            return;
        }
        if (!isRun) {
            logger.warn(simpleInfo + " waiting for execute job timeout...");
            return;
        }

        // Step 3 获取到锁，尝试获取浏览器控制实例，添加执行任务
        try {
            currentWindowSeq.add(seq);
            AccountFingerBrowserSelenium browserSelenium = getAccountFingerBrowserSelenium(accountContext, seq);

            if (!browserSelenium.isRunning()) {
                browserDriver.flexAbleWindowBounds(new ArrayList<>(currentWindowSeq));
                browserSelenium.startACFBSelenium();
                accountFBSeleniumMap.remove(accountContext);
            } else {
                logger.warn(simpleInfo + " selenium is running...cancel new start");
            }
        } catch (Exception e) {
            logger.error(simpleInfo + " - start selenium task error", e);
        } finally {
            currentWindowSeq.remove(seq);
            if (fbLock.isHeldByCurrentThread()) {
                fbLock.unlock();
            }
        }
    }

    private ACBotTypedSeleniumExecuteInfo tryGetJobSeleniumExecuteInfo(String jobName,
        Supplier<ACBotTypedSeleniumExecuteInfo> seleniumExecuteInfoSupplier) {
        ACBotTypedSeleniumExecuteInfo executeInfo = acExecuteInfos.compute(getAutoBotConfig().getBotKey() + "-" + jobName, (k, v) -> {
            if(v == null) {
                v = seleniumExecuteInfoSupplier.get();
            }
            return v;
        });
        if (executeInfo == null) {
            logger.warn("no execute info for: " + jobName);
            return null;
        }
        if (executeInfo.getWaitTime() == null || executeInfo.getWaitTimeUnit() == null) {
            logger.warn("execute info params error, " + executeInfo);
            return null;
        }
        if (executeInfo.getBotKey() == null) {
            executeInfo.setBotKey(getAutoBotConfig().getBotKey());
        }
        if (executeInfo.getJobName() == null) {
            executeInfo.setJobName(jobName);
        }
        return executeInfo;
    }

    /**
     * 获取指纹浏览器窗口的锁
     *
     * @param seq   seq
     * @return  ReentrantLock
     */
    private static @NotNull ReentrantLock getFBLock(int seq) {
        return fingerBrowserLockMap.compute(seq, (k, v) -> {
            if (v == null) {
                v = new ReentrantLock();
            }
            return v;
        });
    }

    /**
     * 获取浏览器控制实例
     *
     * @param accountContext    accountContext
     * @param seq   seq
     * @return  AccountFingerBrowserSelenium
     */
    private @NotNull AccountFingerBrowserSelenium getAccountFingerBrowserSelenium(AccountContext accountContext, int seq) {
        return accountFBSeleniumMap.compute(accountContext, (k, v) -> {
            if (v == null) {
                try {
                    v = new AccountFingerBrowserSelenium(
                        accountContext,
                            buildSeleniumParams(seq),
                            logger
                    );

                    for (ACBotTypedSeleniumExecuteInfo acExecuteInfo : acExecuteInfos.values()) {
                        v.addExecuteInfo(acExecuteInfo);
                    }
                } catch (IOException e) {
                    throw new RuntimeException("create account selenium error", e);
                }
            }
            return v;
        });
    }

    /**
     * 构建selenium参数
     *
     * @return SeleniumParams
     */
    private SeleniumParams buildSeleniumParams(Integer seq) {
        String debuggerAddress = browserDriver.startWebDriverBySeq(seq);

        return SeleniumParams
                .builder()
                .driverPath(chromeDriverUrl)
                .experimentalOptions(List.of(new Pair<>("debuggerAddress", debuggerAddress)))
                .targetWebSite(openUrl)
                .build();
    }

    /**
     * 构建指纹浏览器driver
     */
    private void initBrowserDriver() {
        if (browserDriver == null) {
            synchronized (FingerBrowserBot.class) {
                if (browserDriver == null) {
                    browserDriver = switch (browserDriverType()) {
                        case BIT_BROWSER -> new BitBrowserDriver(fingerBrowserApiUrl);
                    };
                }
            }
        }
    }

    /**
     * 指纹浏览器类型
     *
     * @return BrowserDriverType
     */
    protected abstract BrowserDriverType browserDriverType();

    /**
     * 获取默认打开的url
     *
     * @param botConfig botConfig
     * @return String
     */
    private String getDefaultWebSiteUrl(AutoBotConfig botConfig) {
        return (String) botConfig.getCustomConfig().getOrDefault(DEFAULT_WEB_SITE_URL_KEY, DEFAULT_WEB_SITE_URL);
    }
}
package cn.com.vortexa.script_node.dto.selenium;

import cn.com.vortexa.browser_control.execute.ExecuteGroup;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;
import java.util.concurrent.TimeUnit;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class ACBotTypedSeleniumExecuteInfo {

    private String botKey;

    private String jobName;

    private Integer waitTime;

    private TimeUnit waitTimeUnit;

    private List<ExecuteGroup> seleniumExecuteChain;

}
