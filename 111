package cn.com.helei.example.lens_testnet_faucet;

import cn.com.helei.bot_father.anno.BotApplication;
import cn.com.helei.bot_father.bot.AutoLaunchBot;
import cn.com.helei.bot_father.config.AutoBotConfig;
import cn.com.helei.bot_father.service.BotApi;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@BotApplication(
        name = "lens_testnet_faucet_bot",
        accountParams = {LensTestnetFaucetBot.LENS_TESTNET_WALLET_ADDRESS}
)
public class LensTestnetFaucetBot extends AutoLaunchBot<LensTestnetFaucetBot> {

    public static final String LENS_TESTNET_WALLET_ADDRESS = "lens_testnet_wallet_address";

    @Override
    protected void botInitialized(AutoBotConfig botConfig, BotApi botApi) {

    }

    @Override
    protected LensTestnetFaucetBot getInstance() {
        return this;
    }


}
package cn.com.helei.example.lens_testnet_faucet;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.*;
import java.util.List;

@Slf4j
public class LensChallengeResolver {

    static int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}}; // 右、下、左、上

    public static void main(String[] args) throws IOException {
        BufferedImage image = ImageIO.read(new File("D:\\workspace\\DepinBot\\auto-bot-v_1.1\\bot-example\\src\\main\\resources\\mate.jpg"));

        resolvetest(image);

    }

    public static List<String> resolvetest(BufferedImage image) throws IOException {
        int width = image.getWidth();
        int height = image.getHeight();

        int[][] maze = new int[width][height];
        int[] target = null;
        // 初始化地图和并查集
        UnionFind uf = new UnionFind(width * height);

        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                // 初始化矩阵
                int color = image.getRGB(i, j);
                if (isGreen(color)) {
                    target = new int[]{i, j};
                    maze[i][j] = 0;
                } else if (isBlack(color)) {
                    maze[i][j] = 1;
                } else {
                    maze[i][j] = 0;
                }

                // 初始化并查集
                int index = getIndex(i, j, height);

                for (int k = 2; k < 4; k++) {
                    int newX = i + directions[k][0];
                    int newY = j + directions[k][1];
                    if (newX >= 0 && newY >= 0 && maze[newX][newY] == maze[i][j]) {
                        uf.union(index, getIndex(newX, newY, height));
                    }
                }
            }
        }

        // 查找起点和重点

        int[] start = null;
        int startCount = Integer.MAX_VALUE;

        for (Integer parent : uf.getParents()) {
            int[] point = getPoint(parent, height);
            int color = image.getRGB(point[0], point[1]);
            log.info("{}-{}  [{}]", point[0], point[1], color);

            if (isBlack(color)) {
                int rank = uf.getRank(parent);
                if (startCount > rank) {
                    startCount = rank;
                    start = point;
                }
            }
        }

        log.info("start[{}], target[{}]", start, target);
        if (start != null) {

            List<int[]> path = aStar(maze, start, target);
            if (path.size() > 2) {
                Graphics2D graphics = image.createGraphics();
                graphics.setColor(Color.ORANGE);
                graphics.setStroke(new BasicStroke(2));

                int[] p1 = path.getFirst();

                for (int i = 1; i < path.size(); i++) {
                    int[] p2 = path.get(i);
                    graphics.drawLine(p1[0], p1[1], p2[0], p2[1]);
                    p1 = p2;
                }
            }
        }

        ImageIO.write(image, "jpg", new File("D:\\workspace\\DepinBot\\auto-bot-v_1.1\\bot-example\\src\\main\\resources\\thinned_maze.jpg"));
        return null;
    }

    public static List<int[]> aStar(int[][] maze, int[] start, int[] end) {
        int rows = maze.length, cols = maze[0].length;
        PriorityQueue<Node> openSet = new PriorityQueue<>();
        boolean[][] visited = new boolean[rows][cols];

        openSet.add(new Node(start[0], start[1], 0, heuristic(start, end), null));

        while (!openSet.isEmpty()) {
            Node current = openSet.poll();

            if (current.x == end[0] && current.y == end[1]) {
                return reconstructPath(current);
            }

            if (visited[current.x][current.y]) continue;
            visited[current.x][current.y] = true;

            for (int[] dir : directions) {
                int newX = current.x + dir[0], newY = current.y + dir[1];

                if (isValid(maze, visited, newX, newY)) {
                    int g = current.g + 1;
                    int h = heuristic(new int[]{newX, newY}, end);
                    openSet.add(new Node(newX, newY, g, h, current));
                }
            }
        }
        return Collections.emptyList();
    }

    private static int heuristic(int[] a, int[] b) {
        return Math.abs(a[0] - b[0]) + Math.abs(a[1] - b[1]); // 曼哈顿距离
    }

    private static boolean isValid(int[][] maze, boolean[][] visited, int x, int y) {
        return x >= 0 && y >= 0 && x < maze.length && y < maze[0].length && maze[x][y] == 0 && !visited[x][y];
    }

    private static List<int[]> reconstructPath(Node node) {
        List<int[]> path = new ArrayList<>();
        while (node != null) {
            path.add(new int[]{node.x, node.y});
            node = node.parent;
        }
        Collections.reverse(path);
        return path;
    }

    private static boolean isWhite(int color) {
        int r = (color >> 16) & 0xFF;
        int g = (color >> 8) & 0xFF;
        int b = (color) & 0xFF;
        return r > 200 && g > 200 && b > 200;
    }

    private static boolean isBlack(int color) {
        int r = (color >> 16) & 0xFF;
        int g = (color >> 8) & 0xFF;
        int b = (color) & 0xFF;
        return r < 50 && g < 50 && b < 50;
    }

    private static boolean isGreen(int color) {
        int r = (color >> 16) & 0xFF;
        int g = (color >> 8) & 0xFF;
        int b = (color) & 0xFF;
        float[] hsv = Color.RGBtoHSB(r, g, b, null);
        float h = hsv[0] * 360, s = hsv[1], v = hsv[2];

        return h >= 60 && h <= 180 && s > 0.4 && v > 0.2;
    }


    private static int getIndex(int x, int y, int height) {
        return x * height + y;
    }

    private static int[] getPoint(int index, int height) {
        int x = index / height;
        int y = index % height;
        return new int[]{x, y};
    }

    static class Node implements Comparable<Node> {
        int x, y, g, h, f;
        Node parent;

        public Node(int x, int y, int g, int h, Node parent) {
            this.x = x;
            this.y = y;
            this.g = g;  // 从起点到当前点的代价
            this.h = h;  // 估算的剩余代价
            this.f = g + h;
            this.parent = parent;
        }

        @Override
        public int compareTo(Node other) {
            return Integer.compare(this.f, other.f);
        }
    }


    static class UnionFind {
        private final int[] parent;
        private final int[] rank;
        @Getter
        private int count;

        public UnionFind(int size) {
            parent = new int[size];
            rank = new int[size];
            count = size;
            for (int i = 0; i < size; i++) {
                parent[i] = i;
                rank[i] = 1;
            }
        }


        public int find(int x) {
            if (parent[x] != x) {
                parent[x] = find(parent[x]);
            }
            return parent[x];
        }

        public void union(int a, int b) {
            int rootA = find(a);
            int rootB = find(b);

            if (rootA != rootB) {
                if (rank[rootA] > rank[rootB]) {
                    parent[rootB] = rootA;
                } else if (rank[rootA] < rank[rootB]) {
                    parent[rootA] = rootB;
                } else {
                    parent[rootB] = rootA;
                    rank[rootA]++;
                }
                count--;
            }
        }

        public boolean connected(int a, int b) {
            return find(a) == find(b);
        }

        public List<Integer> getParents() {
            List<Integer> res = new ArrayList<>();
            for (int i = 0; i < parent.length; i++) {
                if (parent[i] == i) {
                    res.add(i);
                }
            }
            return res;
        }

        public int getRank(int a) {
            return rank[a];
        }
    }
}
