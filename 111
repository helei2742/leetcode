<script lang="ts" setup>
import {SwitchButton} from '@element-plus/icons-vue'
import {BotInstanceInfo} from "@/interfaces/VortexaTypes.ts";
import {computed} from "vue";

const props = defineProps<{
  botInstance: BotInstanceInfo
}>();

// 事件
const emit = defineEmits(['start-script', 'stop-script', 'start-task', 'stop-task'])

const startScriptHandler = ()=>{
  emit('start-script', {instanceId: props.botInstance.id})
}

const stopScriptHandler = ()=>{
  emit('stop-script', {instanceId: props.botInstance.id})
}

const startTaskHandler = ()=>{
  emit('start-task', {instanceId: props.botInstance.id})
}

const stopTaskHandler = ()=>{
  emit('stop-task', {instanceId: props.botInstance.id})
}
</script>

<template>
  <div class="bot-runtime-display-card" >
    <div class="card-header clearfix">
      <div style="display:flex; align-items: start">
        <el-image class="head-image"/>
        <div style="font-weight: 700;font-size: 16px">
          {{ botInstance.botKey }}
        </div>
      </div>

      <div style="float: right">
        <i class="el-icon-setting icon-button"/>
      </div>
    </div>

    <div class="data-print-line"/>

    <div class="card-detail">
      <div class="card-detail-content"/>

      <el-button
        v-if="botInstance.botStatus==0"
        class="opt-button"
        type="success"
        @click="startScriptHandler"
        plain
      >
        <el-icon>
          <SwitchButton/>
        </el-icon>
        Start Task
      </el-button>
      <el-button v-else-if="botInstance.botStatus==1" class="opt-button" type="danger" plain>
        <el-icon>
          <SwitchButton/>
        </el-icon>
        Stop Task
      </el-button>
      <el-button v-else class="opt-button" type="warning" plain>
        <el-icon>
          <SwitchButton/>
        </el-icon>
        Unknown Status
      </el-button>
    </div>
  </div>
</template>

<style scoped>
.bot-runtime-display-card {
  width: 300px;
  min-width: 300px;
  //max-width: 500px;
  height: 350px;
  background-color: rgba(110, 110, 110, 0.1);
  padding: 24px;

  margin-left: 12px;

  color: #9da3ae;
  border-radius: 10px;
}

.card-header {
  height: 48px;
}

.data-print-line {
  height: 48px;
  margin-top: 16px;

}

.card-detail {
  height: 222px;
  margin-top: 16px;
}

.head-image {
  height: 48px;
  width: 48px;
  margin-right: 8px;
}

.icon-button {
  width: 24px;
  height: 24px;
  color: #9da3ae;
  font-size: 20px;

  cursor: pointer;
}

.icon-button:hover {
  transform: scale(1.2); /* 鼠标悬浮时放大 */
  color: #007BFF; /* 鼠标悬浮时改变颜色 */
}

.card-detail-content {
  height: 184px;
}

.opt-button {
  width: 100%;
  font-size: 16px;
  font-weight: 600;
  text-align: center;
}
</style>

<script setup lang="ts">
import {Filter, RefreshRight} from '@element-plus/icons-vue'
import BotRuntimeDisplayCard from "@/views/homepage/script/components/bot-runtime-display-card.vue";
import {BotInstanceInfo} from "@/interfaces/VortexaTypes.ts";
import {onMounted, ref, nextTick, computed} from "vue";
import ContentBlock from "@/components/content-block/content-block.vue";

const botInstanceList = ref<Array<BotInstanceInfo>>([])

const filters = ref<{
  status: number
}>({ status: -10001})

const displayInstanceList = computed(()=>{
  return botInstanceList.value.filter(info=>{
    let filter: boolean = true
    if (filterValue.value != null) {
      filter = info.botName.includes(filterValue.value) || info.botKey.includes(filterValue.value)
    }
    if (filters.value.status != -10001) {
      filter = info.botStatus == filters.value.status
    }
    console.log(filter)
    return filter
  })
})

// 1. 过滤
// 过滤下拉框宽度
const dropdownWidth = ref(0)
const filterValue = ref('')

const filterByStatus = (status)=>{
  botInstanceList
}

// 2.BotInstance


// 网络请求获取实例
const pageQueryBotInstanceNetwork = () => {
  botInstanceList.value.push(new BotInstanceInfo({ botKey: 'bot', botStatus:0}))
  botInstanceList.value.push(new BotInstanceInfo({ botKey: 'bot', botStatus:1}))
  botInstanceList.value.push(new BotInstanceInfo({ botKey: 'bot', botStatus:-1}))
  for (let i = 0; i < 10; i++) {
    botInstanceList.value.push(new BotInstanceInfo({ botKey: 'bot' + i}))
  }
}

onMounted(async () => {
  await nextTick()
  dropdownWidth.value = document.querySelector('.filter-button').offsetWidth
  pageQueryBotInstanceNetwork()
})
</script>

<template>
  <div class="vortexa-script-view">

    <!--    搜索块-->
    <content-block class="vortexa-script-viw-block-1">
      <div>
        <el-input v-model="filterValue" placeholder="Search by name"/>
        <div>
          <el-button style="width: 90px">
            <el-icon>
              <RefreshRight/>
            </el-icon>
            Fresh
          </el-button>
          <el-dropdown
            trigger="click"
            placement="bottom"
            style="width:calc(100% - 90px); "
            :hide-on-click="false"
          >
            <el-button class="filter-button">
              <el-icon>
                <Filter/>
              </el-icon>
              Filter
            </el-button>
            <template #dropdown>
              <el-dropdown-menu class="filter-menu" :style="{'width': dropdownWidth + 'px'}">
                <el-dropdown-item>The Action 1st</el-dropdown-item>
                <el-dropdown-item>The Action 2st</el-dropdown-item>
                <el-dropdown-item>The Action 3st</el-dropdown-item>
              </el-dropdown-menu>
            </template>
          </el-dropdown>
        </div>
      </div>
    </content-block>

    <!--展示块-->
    <content-block class="vortexa-script-viw-block-2">
      <template #header>
        <div style="margin-bottom: 12px">
          <el-button type="info" @click="filterByStatus(0)">All</el-button>
          <el-button type="success" @click="filterByStatus(1)">Running</el-button>
          <el-button type="danger" @click="filterByStatus(-1)">Stopped</el-button>
          <span style="float: right;font-size: 14px; font-weight: 300">Total:</span>
        </div>
      </template>
      <div class="scroll-bar-wrapper">
        <div class="vortexa-script-display-content" v-infinite-scroll="pageQueryBotInstanceNetwork">
          <bot-runtime-display-card
            v-for="botInstance in displayInstanceList"
            :bot-instance="<BotInstanceInfo>botInstance"
            class="vortexa-script-item"
          />
        </div>
        <el-backtop target=".scroll-bar-wrapper" :bottom="100" :right="100">
        </el-backtop>
      </div>
    </content-block>
  </div>
</template>

<style scoped>

.vortexa-script-view {
  display: flex;
  flex-direction: column;
  height: calc(100vh - 130px);
}

.vortexa-script-viw-block-1 {
  max-width: 800px;
  height: 70px;
}

.vortexa-script-viw-block-2 {

}

.scroll-bar-wrapper {
  height: 900px;
  overflow-y: scroll;
}

.vortexa-script-display-content {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  justify-items: start;
}
.scroll-bar-wrapper::-webkit-scrollbar{
  width: 0;
  height: 0;
}
.scroll-bar-wrapper {
  -ms-overflow-style: none;
  scrollbar-width: none;
}


.vortexa-script-item {
  flex: 1 0 calc((100% - 30px) / 5);
}

.filter-button {
  width: 100%;
}

.filter-menu {
  min-width: 200px;
}

@media (min-width: 1980px) {
  .vortexa-script-view {
    display: flex;
    flex-direction: row-reverse;
    height: calc(100vh - 130px);
    gap: 10px;
  }

  .vortexa-script-viw-block-2 {
    width: calc(100% - 250px);
  }
}
</style>

export class BotInstanceInfo {
  id?:number
  botId?: number
  botName: string
  botKey: string
  botStatus: number // 0 未运行 1 正在运行 -1 告警
  runningTask: Array<string>
  accountTableName?: string
  jobParams: Map<string, Object>
  params: Map<string, Object>
  insertDatetime?: string
  updateDatetime?: string
  botInfo?: Object

  public constructor({id, botId, botName, botKey, botStatus, runningTask, accountTableName, jobParams, params, insertDatetime, updateDatetime, botInfo}
                : { id?:number, botId?:number, botName?:string, botKey?:string, botStatus?:number, runningTask?:Array<string>,accountTableName?:string, jobParams?: Map<string, object>, params?:Map<string, object>, insertDatetime?:string, updateDatetime?:string, botInfo?:BotInfo }
  ) {
    this.id = id
    this.botId = botId
    this.botName = botName ? botName : 'unknown_bot'
    this.botKey = botKey ? botKey : 'unknown_instance'
    this.botStatus = botStatus !== undefined ? botStatus : -1
    this.runningTask = runningTask ? runningTask : new Array<string>()
    this.accountTableName = accountTableName
    this.jobParams = jobParams ?  jobParams: new Map<string, object>()
    this.params = params ?  params: new Map<string, object>()
    this.insertDatetime = insertDatetime
    this.updateDatetime = updateDatetime
    this.botInfo = botInfo
  }
}


export class BotInfo {
  id?:number
  name: string
  describe: string
  image?: string
  jobParams: Map<string, Object>
  params: Map<string, Object>
  insertDatetime?: string
  updateDatetime?: string

  constructor({id, name, describe, image, jobParams, params, insertDatetime, updateDatetime}
                : { id?:number, name?:string, describe?:string, image?:string, jobParams?: Map<string, object>, params?:Map<string, object>, insertDatetime?:string, updateDatetime?:string }
  ) {
    this.id = id
    this.name = name ? name : 'unknown_bot'
    this.describe = describe ? describe : ''
    this.image = image
    this.jobParams = jobParams ?  jobParams: new Map<string, object>()
    this.params = params ?  params: new Map<string, object>()
    this.insertDatetime = insertDatetime
    this.updateDatetime = updateDatetime
  }
}
