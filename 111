package cn.com.vortexa.browser_control.driver;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

import cn.com.vortexa.browser_control.exception.BrowserRequestException;
import cn.com.vortexa.browser_control.dto.QueryEntity;
import cn.com.vortexa.common.constants.HttpMethod;
import cn.com.vortexa.common.util.http.RestApiClientFactory;

import java.util.HashMap;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;

/**
 * @author helei
 * @since 2025/3/26 9:25
 */
public abstract class FingerprintBrowserDriver {

    private final String connectUrl;

    public FingerprintBrowserDriver(String connectUrl) {
        this.connectUrl = connectUrl;
    }

    /**
     * 检查健康状态
     */
    public JSON health() {
        try {
            QueryEntity<JSON> queryEntity = healthBody();
            CompletableFuture<String> request = request(queryEntity);
            String str = request.get();
            return queryEntity.getResultStrHandler().apply(str);
        } catch (InterruptedException | ExecutionException e) {
            throw new BrowserRequestException("page query window error", e);
        }
    }

    /**
     * 构建分页查询窗口的请求
     *
     * @return QueryEntity
     */
    protected abstract QueryEntity<JSON> healthBody();

    /**
     * 分页查询窗口
     *
     * @param params params
     */
    public JSON pageQueryWindow(JSONObject params) {
        try {
            QueryEntity<JSON> queryEntity = buildPageQueryWindowBody(params);
            CompletableFuture<String> request = request(queryEntity);
            String str = request.get();
            return queryEntity.getResultStrHandler().apply(str);
        } catch (InterruptedException | ExecutionException e) {
            throw new BrowserRequestException("page query window error", e);
        }
    }

    /**
     * 构建分页查询窗口的请求
     *
     * @return QueryEntity
     */
    protected abstract QueryEntity<JSON> buildPageQueryWindowBody(JSONObject params);

    /**
     * 打开浏览器窗口
     *
     * @param params params
     * @return JSON
     */
    public JSON openBrowserWindow(JSONObject params) {
        try {
            QueryEntity<JSON> queryEntity = buildOpenBrowserWindowBody(params);
            CompletableFuture<String> request = request(queryEntity);
            String str = request.get();
            return queryEntity.getResultStrHandler().apply(str);
        } catch (InterruptedException | ExecutionException e) {
            throw new BrowserRequestException("open browser window error", e);
        }
    }

    /**
     * 构建打开窗口窗口的请求
     *
     * @return QueryEntity
     */
    protected abstract QueryEntity<JSON> buildOpenBrowserWindowBody(JSONObject params);

    /**
     * 关闭浏览器窗口
     *
     * @param params params
     * @return JSON
     */
    public JSON closeBrowserWindow(JSONObject params) {
        try {
            QueryEntity<JSON> queryEntity = buildCloseBrowserWindowBody(params);
            CompletableFuture<String> request = request(queryEntity);
            String str = request.get();
            return queryEntity.getResultStrHandler().apply(str);
        } catch (InterruptedException | ExecutionException e) {
            throw new BrowserRequestException("close browser window error", e);
        }
    }

    /**
     * 构建关闭窗口的请求
     *
     * @return QueryEntity
     */
    protected abstract QueryEntity<JSON> buildCloseBrowserWindowBody(JSONObject params);

    /**
     * 关闭所有浏览器窗口
     *
     * @return JSON
     */
    public JSON closeAllBrowserWindow() {
        try {
            QueryEntity<JSON> queryEntity = closeAllBrowserWindowBody();
            CompletableFuture<String> request = request(queryEntity);
            String str = request.get();
            return queryEntity.getResultStrHandler().apply(str);
        } catch (InterruptedException | ExecutionException e) {
            throw new BrowserRequestException("close all browser window error", e);
        }
    }

    /**
     * 构建关闭所有浏览器窗口的请求
     *
     * @return QueryEntity
     */
    protected abstract QueryEntity<JSON> closeAllBrowserWindowBody();

    /**
     * 删除浏览器窗口
     *
     * @param params params
     * @return JSON
     */
    public JSON deleteBrowserWindow(JSONObject params) {
        try {
            QueryEntity<JSON> queryEntity = deleteCloseBrowserWindowBody(params);
            CompletableFuture<String> request = request(queryEntity);
            String str = request.get();
            return queryEntity.getResultStrHandler().apply(str);
        } catch (InterruptedException | ExecutionException e) {
            throw new BrowserRequestException("delete browser window error", e);
        }
    }

    /**
     * 构建删除窗口的请求
     *
     * @return QueryEntity
     */
    protected abstract QueryEntity<JSON> deleteCloseBrowserWindowBody(JSONObject params);

    /**
     * 删除批量浏览器窗口
     *
     * @param params params
     * @return JSON
     */
    public JSON deleteBrowserWindowBatch(JSONObject params) {
        try {
            QueryEntity<JSON> queryEntity = deleteBrowserWindowBatchBody(params);
            CompletableFuture<String> request = request(queryEntity);
            String str = request.get();
            return queryEntity.getResultStrHandler().apply(str);
        } catch (InterruptedException | ExecutionException e) {
            throw new BrowserRequestException("batch delete browser window error", e);
        }
    }

    /**
     * 构建批量删除窗口的请求
     *
     * @return QueryEntity
     */
    protected abstract QueryEntity<JSON> deleteBrowserWindowBatchBody(JSONObject params);

    /**
     * 浏览器窗口详情查询
     *
     * @param params params
     * @return JSON
     */
    public JSON browserWindowDetail(JSONObject params) {
        try {
            QueryEntity<JSON> queryEntity = browserWindowDetailBody(params);
            CompletableFuture<String> request = request(queryEntity);
            String str = request.get();
            return queryEntity.getResultStrHandler().apply(str);
        } catch (InterruptedException | ExecutionException e) {
            throw new BrowserRequestException("query browser window detail error", e);
        }
    }

    /**
     * 构建窗口详情查询请求
     *
     * @return QueryEntity
     */
    protected abstract QueryEntity<JSON> browserWindowDetailBody(JSONObject params);

    /**
     * 排列已打开窗口
     *
     * @param params params
     * @return JSON
     */
    public JSON boundsBrowserWindow(JSONObject params) {
        try {
            QueryEntity<JSON> queryEntity = boundsBrowserWindowBody(params);
            CompletableFuture<String> request = request(queryEntity);
            String str = request.get();
            return queryEntity.getResultStrHandler().apply(str);
        } catch (InterruptedException | ExecutionException e) {
            throw new BrowserRequestException("bounds browser window error", e);
        }
    }

    /**
     * 构建排列已打开窗口请求
     *
     * @return QueryEntity
     */
    protected abstract QueryEntity<JSON> boundsBrowserWindowBody(JSONObject params);

    /**
     * 自适应排列窗口
     *
     * @return JSON
     */
    public JSON autoFlexWindow() {
        try {
            QueryEntity<JSON> queryEntity = autoFlexWindowBody();
            CompletableFuture<String> request = request(queryEntity);
            String str = request.get();
            return queryEntity.getResultStrHandler().apply(str);
        } catch (InterruptedException | ExecutionException e) {
            throw new BrowserRequestException("auto flex browser window error", e);
        }
    }

    /**
     * 构建自适应排列窗口窗口请求
     *
     * @return QueryEntity
     */
    protected abstract QueryEntity<JSON> autoFlexWindowBody();

    /**
     * 修改浏览器窗口分组
     *
     * @param params params
     * @return JSON
     */
    public JSON updateWindowGroup(JSONObject params) {
        try {
            QueryEntity<JSON> queryEntity = updateWindowGroupBody(params);
            CompletableFuture<String> request = request(queryEntity);
            String str = request.get();
            return queryEntity.getResultStrHandler().apply(str);
        } catch (InterruptedException | ExecutionException e) {
            throw new BrowserRequestException("update browser window group error", e);
        }
    }

    /**
     * 修改浏览器窗口分组请求
     *
     * @return QueryEntity
     */
    protected abstract QueryEntity<JSON> updateWindowGroupBody(JSONObject params);

    /**
     * 修改窗口备注
     *
     * @param params params
     * @return JSON
     */
    public JSON updateWindowRemark(JSONObject params) {
        try {
            QueryEntity<JSON> queryEntity = updateWindowRemarkBody(params);
            CompletableFuture<String> request = request(queryEntity);
            String str = request.get();
            return queryEntity.getResultStrHandler().apply(str);
        } catch (InterruptedException | ExecutionException e) {
            throw new BrowserRequestException("update browser window remark error", e);
        }
    }

    /**
     * 修改窗口备注请求
     *
     * @return QueryEntity
     */
    protected abstract QueryEntity<JSON> updateWindowRemarkBody(JSONObject params);

    /**
     * 检查代理
     *
     * @param params params
     * @return JSON
     */
    public JSON proxyCheckOut(JSONObject params) {
        try {
            QueryEntity<JSON> queryEntity = proxyCheckOutBody(params);
            CompletableFuture<String> request = request(queryEntity);
            String str = request.get();
            return queryEntity.getResultStrHandler().apply(str);
        } catch (InterruptedException | ExecutionException e) {
            throw new BrowserRequestException("update browser window remark error", e);
        }
    }

    /**
     * 检查代理请求
     *
     * @return QueryEntity
     */
    protected abstract QueryEntity<JSON> proxyCheckOutBody(JSONObject params);

    /**
     * 查询显示器列表
     *
     * @return JSON
     */
    public JSON displayListQuery() {
        try {
            QueryEntity<JSON> queryEntity = displayListQueryBody();
            CompletableFuture<String> request = request(queryEntity);
            String str = request.get();
            return queryEntity.getResultStrHandler().apply(str);
        } catch (InterruptedException | ExecutionException e) {
            throw new BrowserRequestException("query display list error", e);
        }
    }

    /**
     * 查询显示器列表
     *
     * @return QueryEntity
     */
    protected abstract QueryEntity<JSON> displayListQueryBody();

    protected CompletableFuture<String> request(QueryEntity<JSON> queryEntity) {
        if (queryEntity.getMethod() == null) {
            queryEntity.setMethod(HttpMethod.POST);
        }
        return RestApiClientFactory.getClient(null).request(
                connectUrl + queryEntity.getContentPath(),
                queryEntity.getMethod(),
                new HashMap<>(),
                queryEntity.getMethod() == HttpMethod.POST ? null : queryEntity.getBody(),
                queryEntity.getMethod() == HttpMethod.POST ? (queryEntity.getBody() != null ? queryEntity.getBody() : new JSONObject()) : new JSONObject()
        );
    }

    /**
     * 根据序号启动，返回窗口debugAddress
     *
     * @param fingerSeq fingerSeq
     * @return  String
     */
    public abstract String startWebDriverBySeq(Integer fingerSeq);
}
package cn.com.vortexa.script_bot.depin.optimai;

import cn.com.vortexa.captcha.CloudFlareResolver;
import cn.com.vortexa.common.constants.HttpMethod;
import cn.com.vortexa.common.dto.Result;
import cn.com.vortexa.common.entity.AccountContext;
import cn.com.vortexa.common.entity.ProxyInfo;
import cn.com.vortexa.common.entity.RewordInfo;
import cn.hutool.core.util.StrUtil;

import com.alibaba.fastjson.JSONObject;

import org.jetbrains.annotations.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.nio.charset.StandardCharsets;
import java.security.InvalidKeyException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Base64;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

/**
 * @author helei
 * @since 2025/3/24 17:15
 */
public class OptimAIAPI {
    private static final List<String> BROWSER_LIST = List.of("chrome", "firefox", "edge", "opera", "brave");
    private static final String CLIENT_SECRET = "D1A167BD1346DDF2357DA5A2F2F2F";

    private static final String LOGIN_PAGE_URL = "https://node.optimai.network/login";
    private static final String LOGIN_WEBSITE_KEY = "0x4AAAAAAA-NTN9roDHAsPQe";

    private static final String SIGN_IN_API = "https://api.optimai.network/auth/signin";
    private static final String GET_TOKEN_API = "https://api.optimai.network/auth/token";
    private static final String REFRESH_TOKEN_API = "https://api.optimai.network/auth/refresh";
    private static final String NODE_REGISTER_API = "https://api.optimai.network/devices/register";
    private static final String REWORD_QUERY_API = "/dashboard/stats";

    public static final String ACCESS_TOKEN_KEY = "access_token";
    public static final String REFRESH_TOKEN_KEY = "refresh_token";
    public static final String WS_TOKEN = "ws_token";
    public static final String BROWSER_KEY = "optimai_browser";
    public static final String TIMEZONE_KEY = "timezone";

    public static final Random random = new Random();
    private static final Logger log = LoggerFactory.getLogger(OptimAIAPI.class);

    private final OptimAIBot optimAIBot;

    public OptimAIAPI(OptimAIBot optimAIBot) {
        this.optimAIBot = optimAIBot;
    }

    public Result registry(AccountContext uniAC, String inviteCode) {

        return null;
    }

    /**
     * 登录
     *
     * @param accountContext accountContext
     * @return Result
     * @throws Exception Exception
     */
    public Result login(AccountContext accountContext) throws Exception {
        if (accountContext.getId() != 1) {
            return Result.fail("");
        }
        ProxyInfo proxy = accountContext.getProxy();
        String simpleInfo = accountContext.getSimpleInfo();

        optimAIBot.logger.info(simpleInfo + " start cf resolve...");
        CompletableFuture<Result> future = CloudFlareResolver.cloudFlareResolve(
            proxy,
            LOGIN_PAGE_URL,
            LOGIN_WEBSITE_KEY,
            optimAIBot.getAutoBotConfig().getConfig(OptimAIBot.TWO_CAPTCHA_API_KEY)
        ).thenApplyAsync(twoCaptchaResult -> {
            try {
                optimAIBot.logger.info(simpleInfo + " cf resolve success");
                String userAgent = twoCaptchaResult.getString("userAgent");
                String token = twoCaptchaResult.getString("token");

                JSONObject body = new JSONObject();
                String codeVerifier = generateCodeVerifier();

                body.put("email", accountContext.getAccountBaseInfo().getEmail());
                body.put("password", accountContext.getParam(OptimAIBot.PASSWORD_KEY));
                body.put("code_challenge_method", "S256");
                body.put("code_challenge", generateCodeChallenge(codeVerifier));
                body.put("turnstile_token", token);

                Map<String, String> signInHeaders = buildSignInHeader(accountContext, userAgent);

                String signInStr = optimAIBot.syncRequest(
                    proxy,
                    SIGN_IN_API,
                    HttpMethod.POST,
                    signInHeaders,
                    null,
                    body,
                    () -> simpleInfo + " start login"
                ).get();

                JSONObject signIn = JSONObject.parseObject(signInStr);
                String authorizationCode = signIn.getString("authorization_code");

                optimAIBot.logger.info(simpleInfo + " code get success");

                JSONObject getTokenBody = new JSONObject();
                getTokenBody.put("code", authorizationCode);
                getTokenBody.put("code_verifier", codeVerifier);
                getTokenBody.put("grant_type", "authorization_code");

                Map<String, String> tokenHeader = buildTokenHeader(accountContext, userAgent);

                String getTokenStr = optimAIBot.syncRequest(
                    proxy,
                    GET_TOKEN_API,
                    HttpMethod.POST,
                    tokenHeader,
                    null,
                    getTokenBody,
                    () -> simpleInfo + " start get token"
                ).get();
                JSONObject tokenResult = JSONObject.parseObject(getTokenStr);

                optimAIBot.logger.info(simpleInfo + " get token success, " + tokenResult);
                accountContext.setParam(ACCESS_TOKEN_KEY, tokenResult.getString(ACCESS_TOKEN_KEY));
                accountContext.setParam(REFRESH_TOKEN_KEY, tokenResult.getString(REFRESH_TOKEN_KEY));
                return Result.ok();
            } catch (Exception e) {
                optimAIBot.logger.error(
                    "login error, " + (e.getCause() == null ? e.getMessage() : e.getCause().getMessage()));
                return Result.fail("");
            }
        });

        return future.get();
    }


    public Result refreshAccessToken(AccountContext accountContext)  {
        String refreshToken = accountContext.getParam(REFRESH_TOKEN_KEY);
        if (StrUtil.isBlank(refreshToken)) {
            try {
                return login(accountContext);
            } catch (Exception e) {
                return Result.fail(e.getCause() == null ? e.getMessage() : e.getCause().getMessage());
            }
        }

        Map<String, String> headers = accountContext.getBrowserEnv().generateHeaders();
        JSONObject body = new JSONObject();
        body.put("refresh_token", refreshToken);

        try {
            String responseStr = optimAIBot.syncRequest(
                accountContext.getProxy(),
                REFRESH_TOKEN_API,
                HttpMethod.POST,
                headers,
                null,
                body,
                () -> accountContext.getSimpleInfo() + " start refresh token..."
            ).get();

            JSONObject result = JSONObject.parseObject(responseStr);
            accountContext.setParam(ACCESS_TOKEN_KEY, result.getJSONObject("data").getString(ACCESS_TOKEN_KEY));
            return Result.ok();
        } catch (InterruptedException | ExecutionException e) {
            return Result.fail(e.getCause() == null ? e.getMessage() : e.getCause().getMessage());
        }
    }

    public Result queryReword(AccountContext accountContext) {
        String accessToken = accountContext.getParam(ACCESS_TOKEN_KEY);
        if (accessToken == null) {
            Result result = refreshAccessToken(accountContext);
            if (!result.getSuccess()) {
                return Result.fail("get access token error, " + result.getErrorMsg());
            } else {
                accessToken = accountContext.getParam(ACCESS_TOKEN_KEY);
            }
        }

        Map<String, String> headers = accountContext.getBrowserEnv().generateHeaders();
        headers.put("Authorization", "Bearer " + accessToken);

        try {
            String responseStr = optimAIBot.syncRequest(
                accountContext.getProxy(),
                REWORD_QUERY_API,
                HttpMethod.GET,
                headers,
                null,
                null
            ).get();
            RewordInfo rewordInfo = accountContext.getRewordInfo();

            JSONObject result = JSONObject.parseObject(responseStr);
            JSONObject state = result.getJSONObject("data").getJSONObject("stats");
            Double totalRewards = state.getDouble("total_rewards");
            Object totalUptime = state.get("total_uptime");

            rewordInfo.setTotalPoints(totalRewards);
            rewordInfo.setSession(String.valueOf(totalUptime));
            optimAIBot.logger.info(accountContext.getSimpleInfo()
                + " reword query success, total[%s] uptime[%s]".formatted(totalRewards, totalUptime));
            return Result.ok();
        } catch (InterruptedException | ExecutionException e) {
            optimAIBot.logger.error(
                "query reword error, " + (e.getCause() == null ? e.getMessage() : e.getCause().getMessage()));
            return Result.fail(e.getMessage());
        }
    }

    public String registryNode2GetWSToken(AccountContext accountContext) throws Exception {
        String accessToken = accountContext.getParam(ACCESS_TOKEN_KEY);
        String browser = accountContext.getParam(BROWSER_KEY);
        String timeZone = accountContext.getParam(TIMEZONE_KEY);
        if (accessToken == null) {
            Result result = refreshAccessToken(accountContext);
            if (result.getSuccess()) {
                accessToken = accountContext.getParam(ACCESS_TOKEN_KEY);
            } else {
                throw new RuntimeException("get access token error");
            }
        }
        if (browser == null) {
            browser = BROWSER_LIST.get(random.nextInt(BROWSER_LIST.size()));
            accountContext.setParam(BROWSER_KEY, browser);
        }
        if (timeZone == null) {
            timeZone = getNetworkTimezone(accountContext);
            accountContext.setParam(TIMEZONE_KEY, timeZone);
        }

        Map<String, String> headers = accountContext.getBrowserEnv().generateHeaders();
        headers.put("Authorization", accessToken);
        headers.put("X-Client-Authentication", generateXClientAuthentication(browser, timeZone));

        JSONObject deviceInfo = generateDeviceInfo(browser, timeZone);

        String responseStr = optimAIBot
            .syncRequest(accountContext.getProxy(), NODE_REGISTER_API, HttpMethod.POST, headers,
                null, deviceInfo, () -> accountContext.getSimpleInfo() + " send registry node request")
            .get();
        optimAIBot.logger.info(accountContext.getSimpleInfo() + " registry node[%s][%s] success..".formatted(browser, timeZone) + responseStr);

        JSONObject result = JSONObject.parseObject(responseStr);
        return result.getJSONObject("data").getString("ws_auth_token");
    }

    public String getNetworkTimezone(AccountContext accountContext) throws ExecutionException, InterruptedException {
        String responseStr = optimAIBot.syncRequest(
            accountContext.getProxy(),
            "http://ip-api.com/json/",
            HttpMethod.GET,
            new HashMap<>(),
            null,
            null,
            () -> accountContext.getSimpleInfo() + " get network detail"
        ).get();
        return JSONObject.parseObject(responseStr).getJSONObject("data").getString("timezone");
    }

    @NotNull
    private static Map<String, String> buildSignInHeader(AccountContext accountContext, String userAgent) {
        Map<String, String> headers = accountContext.getBrowserEnv().generateHeaders();
        headers.put("userAgent", userAgent);
        headers.put("server", "cloudflare");
        headers.put("cf-cache-status", "DYNAMIC");
        headers.put("cf-ray", "925e96ab3e43e2e3-HKG");
        headers.put("content-type", "application/json; charset=utf-8");
        return headers;
    }

    @NotNull
    private static Map<String, String> buildTokenHeader(AccountContext accountContext, String userAgent) {
        Map<String, String> headers = accountContext.getBrowserEnv().generateHeaders();
        headers.put("userAgent", userAgent);
        headers.put("server", "cloudflare");
        headers.put("origin", "https://node.optimai.network");
        headers.put("referer", "https://node.optimai.network/");
        headers.put("content-type", "application/json;");
        return headers;
    }

    // 生成随机的 code_verifier（32 字节，转换为十六进制字符串）
    public static String generateCodeVerifier() {
        SecureRandom secureRandom = new SecureRandom();
        byte[] codeVerifier = new byte[32]; // 32 字节随机数据（与 JS 代码一致）
        secureRandom.nextBytes(codeVerifier);

        // 转换为十六进制字符串
        StringBuilder hexString = new StringBuilder();
        for (byte b : codeVerifier) {
            hexString.append(String.format("%02x", b));
        }
        return hexString.toString();
    }

    // 计算 code_challenge（SHA-256 + Base64 URL 编码）
    public static String generateCodeChallenge(String codeVerifier) throws Exception {
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] hashed = digest.digest(codeVerifier.getBytes(StandardCharsets.UTF_8));

        // Base64 URL 编码（去掉填充 =）
        return Base64.getUrlEncoder().withoutPadding().encodeToString(hashed)
            .replace("+", "-")
            .replace("/", "_");
    }

    public static String generateXClientAuthentication(String browser, String timezone) throws NoSuchAlgorithmException, InvalidKeyException {
        JSONObject body = new JSONObject();
        body.put("client_app_id", "TLG_MINI_APP_V1");
        body.put("timestamp", new Date());
        JSONObject deviceInfo = generateDeviceInfo(browser, timezone);
        body.put("device_info", deviceInfo);

        String bodyStr = JSONObject.toJSONString(body);

        // 创建HMAC-SHA256签名
        Mac mac = Mac.getInstance("HmacSHA256");
        SecretKeySpec secretKeySpec = new SecretKeySpec(CLIENT_SECRET.getBytes(), "HmacSHA256");
        mac.init(secretKeySpec);
        byte[] signatureBytes = mac.doFinal(bodyStr.getBytes());
        // 计算签名
        String signature = bytesToHex(signatureBytes);
        body.put("signature", signature);
        // 对tokenPayload进行Base64编码
        String base64Token = Base64.getEncoder().encodeToString(JSONObject.toJSONString(body).getBytes());
        // 将Base64字符串进行替换
        base64Token = base64Token.replace("+", "-")
            .replace("/", "_")
            .replaceAll("=+$", "");
        return base64Token;
    }

    private static @NotNull JSONObject generateDeviceInfo(String browser, String timezone) {
        JSONObject deviceInfo = new JSONObject();
        deviceInfo.put("cpu_cores", 1);
        deviceInfo.put("memory_gb", 0);
        deviceInfo.put("screen_width_px", 375);
        deviceInfo.put("screen_height_px", 600);
        deviceInfo.put("color_depth", 30);
        deviceInfo.put("scale_factor", 1);
        deviceInfo.put("browser_name", browser);
        deviceInfo.put("device_type", "extension");
        deviceInfo.put("language", "zh-CN");
        deviceInfo.put("timezone", timezone);
        return deviceInfo;
    }

    // 将字节数组转换为Hex字符串
    private static String bytesToHex(byte[] bytes) {
        StringBuilder hexString = new StringBuilder();
        for (byte b : bytes) {
            hexString.append(String.format("%02x", b));
        }
        return hexString.toString();
    }

}
package cn.com.vortexa.script_node.bot.selenium;

import cn.com.vortexa.browser_control.OptSeleniumInstance;
import cn.com.vortexa.browser_control.dto.SeleniumParams;
import cn.com.vortexa.common.entity.AccountContext;

import java.io.IOException;

public class AccountFingerBrowserSelenium extends OptSeleniumInstance {

    private final AccountContext accountContext;

    public AccountFingerBrowserSelenium(AccountContext accountContext, SeleniumParams params) throws IOException {
        super(accountContext.getSimpleInfo(), params);
        this.accountContext = accountContext;
    }


}package cn.com.vortexa.script_node.bot.selenium;

import cn.com.vortexa.common.entity.AccountContext;

public class AccountRuntimeSeleniumParams {
        private AccountContext accountContext;
        
        private AccountFingerBrowserSelenium browserSelenium;
        
        private List<>
    }

package cn.com.vortexa.browser_control.constants;

/**
 * @author h30069248
 * @since 2025/4/9 17:21
 */
public enum BrowserDriverType {
    /**
     * 比特浏览器
     */
    BIT_BROWSER,
}
package cn.com.vortexa.script_node.bot.selenium;

import cn.com.vortexa.browser_control.constants.BrowserDriverType;
import cn.com.vortexa.browser_control.driver.BitBrowserDriver;
import cn.com.vortexa.browser_control.driver.FingerprintBrowserDriver;
import cn.com.vortexa.browser_control.dto.SeleniumParams;
import cn.com.vortexa.common.constants.BotJobType;
import cn.com.vortexa.common.dto.config.AutoBotConfig;
import cn.com.vortexa.common.entity.AccountContext;
import cn.com.vortexa.script_node.anno.BotMethod;
import cn.com.vortexa.script_node.bot.AutoLaunchBot;
import cn.com.vortexa.script_node.service.BotApi;
import cn.hutool.core.lang.Pair;

import java.io.IOException;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;

/**
 * @author h30069248
 * @since 2025/4/9 14:35
 */
public abstract class FingerBrowserBot extends AutoLaunchBot<FingerBrowserBot> {

    public static final int BROWSER_BATCH_SIZE = 8; //  浏览器批大小
    public static final String DEFAULT_WEB_SITE_URL = "default_web_site_url";   // 默认打开地址Key
    public static final String FINGER_BROWSER_API_URL_KEY = "finger_browser_api_url"; // 指纹浏览器api地址Key
    public static final String CHROME_DRIVER_URL_KEY = "chrome_driver_url"; // chromedriver连接地址Key
    public static final String FINGER_BROWSER_SEQ_KEY = "finger_browser_seq";   //  指纹浏览器序号Key

    private static final ConcurrentHashMap<AccountContext, AccountFingerBrowserSelenium> accountFBSeleniumMap = new ConcurrentHashMap<>();
    private FingerprintBrowserDriver browserDriver;
    private String chromeDriverUrl;
    private String fingerBrowserApiUrl;

    public FingerBrowserBot(FingerprintBrowserDriver browserDriver) {
        this.browserDriver = browserDriver;
    }

    @Override
    protected void botInitialized(AutoBotConfig botConfig, BotApi botApi) {
        chromeDriverUrl = (String) botConfig.getCustomConfig().get(CHROME_DRIVER_URL_KEY);
        fingerBrowserApiUrl = (String) botConfig.getCustomConfig().get(FINGER_BROWSER_API_URL_KEY);
        browserDriver = buildBrowserDriver();
    }

    @Override
    protected FingerBrowserBot getInstance() {
        return this;
    }

    @BotMethod(jobType = BotJobType.ONCE_TASK, concurrentCount = BROWSER_BATCH_SIZE)
    public void accountBrowserTask(AccountContext accountContext) {
        try {
            accountFBSeleniumMap.putIfAbsent(accountContext, new AccountFingerBrowserSelenium(
                accountContext,
                buildSeleniumParams((Integer) accountContext.getParams().get(FINGER_BROWSER_SEQ_KEY)))
            );
        } catch (IOException e) {
            logger.error(accountContext.getSimpleInfo() + " - start selenium task error", e);
        }
    }

    /**
     * 构建selenium参数
     *
     * @return SeleniumParams
     */
    private SeleniumParams buildSeleniumParams(Integer seq) {
        String debuggerAddress = browserDriver.startWebDriverBySeq(seq);

        return SeleniumParams
            .builder()
            .driverPath(chromeDriverUrl)
            .experimentalOptions(List.of(new Pair<>("debuggerAddress", debuggerAddress)))
            .targetWebSite((String) getAutoBotConfig().getCustomConfig().get(DEFAULT_WEB_SITE_URL))
            .build();
    }

    /**
     * 构建指纹浏览器driver
     *
     * @return  FingerprintBrowserDriver
     */
    private FingerprintBrowserDriver buildBrowserDriver() {
        return switch (browserDriverType()) {
            case BIT_BROWSER -> new BitBrowserDriver(fingerBrowserApiUrl);
        };
    }

    protected abstract BrowserDriverType browserDriverType();
}
