package cn.com.helei.bot.app.nodego;

import cn.com.helei.bot.core.bot.anno.BotApplication;
import cn.com.helei.bot.core.bot.anno.BotMethod;
import cn.com.helei.bot.core.bot.base.AnnoDriveAutoBot;
import cn.com.helei.bot.core.bot.constants.BotJobType;
import cn.com.helei.bot.core.dto.Result;
import cn.com.helei.bot.core.dto.config.AutoBotConfig;
import cn.com.helei.bot.core.entity.AccountContext;
import cn.com.helei.bot.core.supporter.botapi.BotApi;
import lombok.extern.slf4j.Slf4j;

import java.util.List;
import java.util.concurrent.ExecutionException;

@Slf4j
@BotApplication(name = "NodeGO", describe = "NodeGo自动机器人")
public class NodeGoBot extends AnnoDriveAutoBot<NodeGoBot> {

    private static final int KEEP_ALIVE_INTERVAL = 60 * 10;

    private static final int DAILY_CHECK_IN_INTERVAL = 60 * 60 * 20;

    private final NodeGoApi nodeGoApi;

    public NodeGoBot(AutoBotConfig autoBotConfig, BotApi botApi) {
        super(autoBotConfig, botApi);
        this.nodeGoApi = new NodeGoApi(this, autoBotConfig.getConfig("2_CAPTCHA_API_KEY"));
    }

    @Override
    protected NodeGoBot getInstance() {
        return this;
    }

    @BotMethod(jobType = BotJobType.REGISTER)
    public Result autoRegister(AccountContext exampleAC, List<AccountContext> sameABIIdList, String inviteCode) {
        return nodeGoApi.register(exampleAC,sameABIIdList, inviteCode);
    }


    @BotMethod(jobType = BotJobType.LOGIN)
    public Result login(AccountContext exampleAC) {
        return nodeGoApi.login(exampleAC);
    }


    @BotMethod(
            jobType = BotJobType.TIMED_TASK,
            intervalInSecond = 60 * 10,
            concurrentCount = 10
    )
    public void keepAlivePing(AccountContext accountContext) {
        nodeGoApi.ping(accountContext);
    }

    @BotMethod(
            jobType = BotJobType.TIMED_TASK,
            intervalInSecond = 60 * 60 * 20,
            concurrentCount = 2
    )
    public void checkIn(AccountContext accountContext) throws ExecutionException, InterruptedException {
        nodeGoApi.checkIn(accountContext);
    }

    @BotMethod(
            jobType = BotJobType.ONCE_TASK,
            concurrentCount = 2
    )
    public void autoCompleteTask(AccountContext accountContext) {
        nodeGoApi.completeTask(accountContext);
    }
}
package cn.com.helei.bot.app.nodego;

import cn.com.helei.bot.core.bot.anno.BotApplication;
import cn.com.helei.bot.core.bot.anno.BotMethod;
import cn.com.helei.bot.core.bot.base.AnnoDriveAutoBot;
import cn.com.helei.bot.core.bot.constants.BotJobType;
import cn.com.helei.bot.core.dto.Result;
import cn.com.helei.bot.core.dto.config.AutoBotConfig;
import cn.com.helei.bot.core.entity.AccountContext;
import cn.com.helei.bot.core.supporter.botapi.BotApi;
import lombok.extern.slf4j.Slf4j;

import java.util.List;
import java.util.concurrent.ExecutionException;

@Slf4j
@BotApplication(name = "NodeGO", describe = "NodeGo自动机器人")
public class NodeGoBot extends AnnoDriveAutoBot<NodeGoBot> {

    private static final int KEEP_ALIVE_INTERVAL = 60 * 10;

    private static final int DAILY_CHECK_IN_INTERVAL = 60 * 60 * 20;

    private final NodeGoApi nodeGoApi;

    public NodeGoBot(AutoBotConfig autoBotConfig, BotApi botApi) {
        super(autoBotConfig, botApi);
        this.nodeGoApi = new NodeGoApi(this, autoBotConfig.getConfig("2_CAPTCHA_API_KEY"));
    }

    @Override
    protected NodeGoBot getInstance() {
        return this;
    }

    @BotMethod(jobType = BotJobType.REGISTER)
    public Result autoRegister(AccountContext exampleAC, List<AccountContext> sameABIIdList, String inviteCode) {
        return nodeGoApi.register(exampleAC,sameABIIdList, inviteCode);
    }


    @BotMethod(jobType = BotJobType.LOGIN)
    public Result login(AccountContext exampleAC) {
        return nodeGoApi.login(exampleAC);
    }


    @BotMethod(
            jobType = BotJobType.TIMED_TASK,
            intervalInSecond = 60 * 10,
            concurrentCount = 10
    )
    public void keepAlivePing(AccountContext accountContext) {
        nodeGoApi.ping(accountContext);
    }

    @BotMethod(
            jobType = BotJobType.TIMED_TASK,
            intervalInSecond = 60 * 60 * 20,
            concurrentCount = 2
    )
    public void checkIn(AccountContext accountContext) throws ExecutionException, InterruptedException {
        nodeGoApi.checkIn(accountContext);
    }

    @BotMethod(
            jobType = BotJobType.ONCE_TASK,
            concurrentCount = 2
    )
    public void autoCompleteTask(AccountContext accountContext) {
        nodeGoApi.completeTask(accountContext);
    }
}
package cn.com.helei.bot.app.unich;

import cn.com.helei.bot.core.bot.anno.BotApplication;
import cn.com.helei.bot.core.bot.anno.BotMethod;
import cn.com.helei.bot.core.bot.base.AnnoDriveAutoBot;
import cn.com.helei.bot.core.bot.constants.BotJobType;
import cn.com.helei.bot.core.dto.Result;
import cn.com.helei.bot.core.dto.config.AutoBotConfig;
import cn.com.helei.bot.core.entity.AccountContext;
import cn.com.helei.bot.core.entity.ProxyInfo;
import cn.com.helei.bot.core.supporter.botapi.BotApi;
import cn.com.helei.bot.core.util.captcha.TwoCaptchaSolverFactory;
import cn.com.helei.bot.core.util.exception.LoginException;
import cn.hutool.core.util.StrUtil;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.twocaptcha.TwoCaptcha;
import com.twocaptcha.captcha.GeeTestV4;
import io.netty.handler.codec.http.HttpMethod;
import lombok.extern.slf4j.Slf4j;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.*;

@Slf4j
@BotApplication(name = "Unich_Bot")
public class UnichClaimBot extends AnnoDriveAutoBot<UnichClaimBot> {

    private static final String TOKEN_EXPIRE_TIME_KEY = "token_expire_time";

    private static final String TOKEN_KEY = "token";

    private static final String CAPTCHA_ID = "e7baa772ac1ae5dceccd7273ad5f57bd";

    private static final String CAPTCHA_URL = "https://unich.com/en/airdrop/sign-in";

    private static final String PASSWORD_KEY = "password";

    private final String captcha2ApiKey;

    public UnichClaimBot(AutoBotConfig autoBotConfig, BotApi botApi) {
        super(autoBotConfig, botApi);
        this.captcha2ApiKey = autoBotConfig.getConfig("2_CAPTCHA_API_KEY");
    }


    @BotMethod(jobType = BotJobType.LOGIN)
    public Result login(AccountContext accountContext) {

        String expireStr = accountContext.getParam(TOKEN_EXPIRE_TIME_KEY);
        String originToken = accountContext.getParam(TOKEN_KEY);

        if (StrUtil.isNotBlank(originToken)) {
            try {
                long expire = Long.parseLong(expireStr);
                if (System.currentTimeMillis() < expire) {
                    log.info("{} 已有token无需打码", expireStr);
                    return Result.ok();
                }
            } catch (Exception e) {
                accountContext.removeParam(TOKEN_EXPIRE_TIME_KEY);
                accountContext.removeParam(TOKEN_KEY);
            }
        }

        CompletableFuture<String> future = CompletableFuture
                // Step 1 打码，获取参数
                .supplyAsync(() -> {
                    TwoCaptcha solver = TwoCaptchaSolverFactory
                            .getTwoCaptchaSolver(captcha2ApiKey, accountContext.getProxy());

                    GeeTestV4 captcha = new GeeTestV4();
                    captcha.setCaptchaId(CAPTCHA_ID);
                    captcha.setUrl(CAPTCHA_URL);

                    try {
                        log.info("{} 开始打码", accountContext.getSimpleInfo());
                        solver.solve(captcha);

                        String code = captcha.getCode();
                        if (StrUtil.isNotBlank(code)) {
                            log.info("{} 打码成功,", accountContext.getSimpleInfo());
                            return code;
                        } else {
                            throw new LoginException("打码失败");
                        }
                    } catch (Exception e) {
                        throw new LoginException("打码失败", e);
                    }
                }, getExecutorService())
                .thenApplyAsync(code -> {
                    // Step 2 构造参数请求登录
                    JSONObject body = JSONObject.parseObject(code);
                    body.remove("captcha_id");
                    body.put("email", accountContext.getAccountBaseInfo().getEmail());
                    String password = accountContext.getParam(PASSWORD_KEY);

                    body.put("password", password);

                    Map<String, String> headers = accountContext.getBrowserEnv().getHeaders();
                    headers.put("Origin", "https://unich.com");
                    headers.put("referer", "https://unich.com/");

                    try {
                        return syncRequest(
                                accountContext.getProxy(),
                                "https://api.unich.com/airdrop/user/v1/auth/sign-in",
                                HttpMethod.POST,
                                headers,
                                null,
                                body,
                                () -> accountContext.getSimpleInfo() + " 正在登录获取token"
                        ).thenApplyAsync(response -> {
                            JSONObject result = JSONObject.parseObject(response);

                            if (result.getString("code").equals("OK")) {
                                JSONObject data = result.getJSONObject("data");
                                String token = data.getString("accessToken");
                                log.info("{} 获取token成功, {}", accountContext.getSimpleInfo(), token);

                                accountContext.setParam(TOKEN_EXPIRE_TIME_KEY, String.valueOf(data.getLong("accessTokenExpireAt")));
                                accountContext.setParam(TOKEN_KEY, token);

                                return token;
                            } else {
                                throw new LoginException(String.format("获取token失败, %s", response));
                            }
                        }).get();
                    } catch (InterruptedException | ExecutionException e) {
                        throw new LoginException("登录获取token发生异常", e);
                    }
                });


        try {
            future.get();
            return Result.ok();
        } catch (InterruptedException | ExecutionException e) {
            log.error("{} 登录发生异常", accountContext.getSimpleInfo(), e.getCause());
            return Result.fail("%s 登录发生异常，%s".formatted(accountContext.getSimpleInfo(), e.getCause().getMessage()));
        }
    }

    @BotMethod(
            jobType = BotJobType.TIMED_TASK,
            intervalInSecond = 60 * 60 * 12,
            concurrentCount = 2
    )
    public boolean doAccountClaim(AccountContext accountContext) {
        String token = accountContext.getParam(TOKEN_KEY);

        if (StrUtil.isBlank(token)) {
            log.error("{} 没有token", accountContext.getSimpleInfo());
            return false;
        }

        String listUrl = "https://api.unich.com/airdrop/user/v1/mining/start";

        ProxyInfo proxy = accountContext.getProxy();

        Map<String, String> headers = accountContext.getBrowserEnv().getHeaders();
        headers.put("Authorization", "Bearer " + token);

        String printPrefix = String.format("id[%s]-账户[%s]-token[%s]-proxy[%s]",
                accountContext.getAccountBaseInfo().getId(), accountContext.getName(),
                token.substring(0, Math.min(16, token.length())), proxy.getHost() + ":" + proxy.getPort());


        syncRequest(proxy, listUrl, HttpMethod.POST, headers, null, new JSONObject(),
                () -> String.format("%s 开始mining", printPrefix))
                // Step 1.1 处理响应结果
                .thenAcceptAsync(responseStr -> {
                    if (responseStr != null) {
                        JSONObject result = JSONObject.parseObject(responseStr);
                        if (result.getString("code").equalsIgnoreCase("ok")) {
                            log.info("{} mining成功", printPrefix);

                            Long startAt = result.getJSONObject("data").getLong("submittedAt");
                            accountContext.setParam("submittedAt", String.valueOf(startAt));
                        } else {
                            log.error("{} mining失败", printPrefix);
                        }
                    } else {
                        log.error("{} mining请求失败", printPrefix);
                    }
                }, getExecutorService()).exceptionally(throwable -> {
                    log.error("{} mining请求失败, {}", printPrefix, throwable.getMessage());
                    return null;
                });

        return false;
    }

    /**
     * 开始领取社交任务
     *
     * @return print str
     */
    private String startClaimSocialReward(AccountContext accountContext) {
        ProxyInfo proxy = accountContext.getProxy();
        String token = accountContext.getParam("token");

        Map<String, String> headers = accountContext.getBrowserEnv().getHeaders();
        headers.put("Authorization", "Bearer " + token);

        String printPrefix = String.format("账户[%s]-token[%s]-proxy[%s]", accountContext.getName(),
                token.substring(0, Math.min(16, token.length())), proxy.getHost() + ":" + proxy.getPort());

        // Step 1 获取用户的社交任务列表
        CompletableFuture<List<String>> taskListFuture = null;
        String unclaimedTaskIdsStr = accountContext.getParam("unclaimed_task_ids");

        if (unclaimedTaskIdsStr != null) {
            taskListFuture = CompletableFuture.completedFuture(JSONObject.parseArray(unclaimedTaskIdsStr, String.class));
        } else {
            taskListFuture = queryAccountUnClaimedTaskIds(proxy, headers, printPrefix);
        }


        // Step 2 开始领取任务
        taskListFuture.
                thenApply(taskList -> claimAccountTasks(accountContext, taskList, headers))
                // Step 3 处理结果,未领取的标记一下
                .thenAcceptAsync(errorIds -> {
                    if (errorIds == null || !errorIds.isEmpty()) {
                        accountContext.setParam("unclaimed_task_ids", JSONObject.toJSONString(errorIds));
                    } else {
                        accountContext.setParam("social_completed", "true");
                    }
                }, getExecutorService())
                .exceptionallyAsync(throwable -> {
                    log.error("{} 领取社交奖励发生异常", printPrefix, throwable);
                    accountContext.setParam("social_completed", "false");
                    return null;
                });

        return "已开始领取账户社交奖励任务";
    }


    private CompletableFuture<List<String>> queryAccountUnClaimedTaskIds(ProxyInfo proxy, Map<String, String> headers, String printPrefix) {
        String listUrl = "https://api.unich.com/airdrop/user/v1/social/list-by-user";


        return syncRequest(proxy, listUrl, HttpMethod.POST, headers, null, null,
                () -> String.format("%s 开始领取社交奖励", printPrefix))
                // Step 1.1 处理响应结果
                .thenApplyAsync(responseStr -> {
                    if (responseStr != null) {
                        JSONObject result = JSONObject.parseObject(responseStr);

                        // Step 1.2 过滤出未领取的任务
                        List<String> ids = new ArrayList<>();
                        JSONArray taskList = result.getJSONObject("data").getJSONArray("items");
                        for (int i = 0; i < taskList.size(); i++) {
                            JSONObject item = taskList.getJSONObject(i);
                            if (!item.getBoolean("claimed")) {
                                ids.add(item.getString("id"));
                            }
                        }

                        log.info("{} }获取任务列表成功", printPrefix);
                        return ids;
                    } else {
                        throw new RuntimeException(String.format("%s 任务列表失败", printPrefix));
                    }
                }, getExecutorService());
    }


    /**
     * 领取账户taskId的任务
     *
     * @param accountContext  accountContext
     * @param unclaimedTaskId unclaimedTaskId
     * @param headers         headers
     * @return List<String> 未完成的任务
     */
    private List<String> claimAccountTasks(AccountContext accountContext, List<String> unclaimedTaskId, Map<String, String> headers) {
        ProxyInfo proxy = accountContext.getProxy();
        String proxyAddress = proxy.getHost() + ":" + proxy.getPort();
        String token = accountContext.getParam("token");

        log.info("账户[{}]共[{}]个未领取的任务", accountContext.getName(), unclaimedTaskId.size());
        if (unclaimedTaskId.isEmpty()) {
            return new ArrayList<>();
        }

        // Step 2.2 开始领取任务
        String claimUrl = "https://api.unich.com/airdrop/user/v1/social/claim/";

        List<CompletableFuture<String>> subTaskFutures = unclaimedTaskId.stream().map(taskId -> {
            JSONObject body = new JSONObject();
            body.put("evidence", taskId);

            return syncRequest(proxy, claimUrl + taskId, HttpMethod.POST, headers, null, body,
                    () -> String.format("账户[%s]-token[%s]-proxy[%s]-taskId[%s]开始领取", accountContext.getName(), token, proxyAddress, taskId))
                    .thenApplyAsync(responseStr -> {

                        if (responseStr != null) {
                            log.info("账户[{}]-token[{}]-proxy[{}]-taskId-[{}]领取成功, {}",
                                    accountContext.getName(), token, proxyAddress, taskId, responseStr);
                            return responseStr;
                        } else {
                            log.error("获取账户[{}]-token[{}]-taskId[{}]任务领取失败",
                                    accountContext.getName(), token, taskId);
                        }
                        return taskId;
                    });
        }).toList();

        // Step 2.3 等待所有任务完成
        CompletableFuture.allOf(subTaskFutures.toArray(new CompletableFuture[0])).join();

        ArrayList<String> result = new ArrayList<>();
        for (int i = 0; i < subTaskFutures.size(); i++) {
            CompletableFuture<String> future = subTaskFutures.get(i);
            try {
                future.get();
                result.add(unclaimedTaskId.get(i));
            } catch (ExecutionException | InterruptedException e) {
                log.error("获取账户[{}]-token[{}]-taskId[{}]任务领取发生系统错误, {}",
                        accountContext.getName(), token, result.add(unclaimedTaskId.get(i)), e.getMessage());
                result.add(unclaimedTaskId.get(i));
            }
        }

        return result;
    }


    @Override
    protected UnichClaimBot getInstance() {
        return this;
    }
}
package cn.com.helei.bot.app.keitokun;

import cn.com.helei.bot.core.bot.anno.BotApplication;
import cn.com.helei.bot.core.bot.anno.BotMethod;
import cn.com.helei.bot.core.bot.anno.BotWSMethodConfig;
import cn.com.helei.bot.core.bot.base.AnnoDriveAutoBot;
import cn.com.helei.bot.core.bot.constants.BotJobType;
import cn.com.helei.bot.core.dto.config.AutoBotConfig;
import cn.com.helei.bot.core.entity.AccountContext;
import cn.com.helei.bot.core.supporter.botapi.BotApi;
import cn.com.helei.bot.core.supporter.netty.BotJsonWSClient;
import cn.hutool.core.util.StrUtil;
import lombok.extern.slf4j.Slf4j;

import java.time.LocalDate;
import java.util.List;


@Slf4j
@BotApplication(name = "keitokun_bot")
public class KeiToKunBot extends AnnoDriveAutoBot<KeiToKunBot> {

    public static final String UID_KEY = "uid";

    public static final String TODAY_KEY = "today";

    public static final String TODAY_REMAINING_TAP_KEY = "today_remaining_tap";

    private static final String TAP_BASE_URL = "wss://game.keitokun.com/api/v1/ws";


    public KeiToKunBot(AutoBotConfig autoBotConfig, BotApi botApi) {
        super(autoBotConfig, botApi);
    }


    @Override
    protected KeiToKunBot getInstance() {
        return this;
    }


    @Override
    protected void accountsLoadedHandler(List<AccountContext> accountContexts) {
        String today = LocalDate.now().toString();

        accountContexts.forEach(accountContext -> {
            // 判断今日的有没有点击完成
            String remainingTapStr = accountContext.getParam(TODAY_REMAINING_TAP_KEY);
            String accountSaveDay = accountContext.getParam(TODAY_KEY);

            // 今天还有没点击的,或者就没点击
            if (accountSaveDay == null || remainingTapStr == null
                    || !accountSaveDay.equals(today) || Integer.parseInt(remainingTapStr) >= 0
            ) {
                accountContext.setParam(TODAY_KEY, LocalDate.now().toString());
                accountContext.setParam(TODAY_REMAINING_TAP_KEY,
                        StrUtil.isBlank(remainingTapStr) ? "500" : remainingTapStr);
            } else {
                accountContext.setParam(TODAY_REMAINING_TAP_KEY, "0");
            }
        });
    }


    @BotMethod(
            jobType = BotJobType.WEB_SOCKET_CONNECT,
            jobName = "ws-keep-alive-task",
            bowWsConfig = @BotWSMethodConfig(
                    isRefreshWSConnection = true,
                    heartBeatIntervalSecond = 5,
                    wsConnectCount = 10
            ),
            intervalInSecond = 60 * 60 * 12
    )
    public BotJsonWSClient tapConnection(AccountContext accountContext) {
        String prefix = accountContext.getSimpleInfo();

        // Step 1 检查是否有uid
        String uid = accountContext.getParam("uid");

        if (StrUtil.isBlank(uid)) {
            log.warn("{} uid不可用", prefix);
            return null;
        }

        // Step 2 判断今天的点击是否完成
        String today = LocalDate.now().toString();
        String remainingTapStr = accountContext.getParam(TODAY_REMAINING_TAP_KEY);
        String accountSaveDay = accountContext.getParam(TODAY_KEY);

        // 新的一天
//        if (accountSaveDay == null || !accountSaveDay.equals(today)
//                || StrUtil.isBlank(remainingTapStr)) {
            accountContext.setParam(TODAY_KEY, LocalDate.now().toString());
            accountContext.setParam(TODAY_REMAINING_TAP_KEY, "500");
//        } else if (Integer.parseInt(remainingTapStr) > 0) { // 日内没点击完
//            log.info("{} 没点击完，剩余: {}", prefix, remainingTapStr);
//        } else {
//             今天点击完的
//            log.warn("{} 今日点击已完成", prefix);
//            return null;
//        }

        log.info("{}-uid[{}] 开始创建ws客户端", prefix, uid);

        String connectUrl = TAP_BASE_URL + "?uid=" + accountContext.getParam(UID_KEY);

        return new KeiToKunWSClient(accountContext, connectUrl);
    }
}
package cn.com.helei.bot.app.keitokun;

import cn.com.helei.bot.core.dto.ConnectStatusInfo;
import cn.com.helei.bot.core.entity.AccountContext;
import cn.com.helei.bot.core.supporter.netty.BaseBotWSClient;
import cn.com.helei.bot.core.supporter.netty.BotJsonWSClient;
import cn.com.helei.bot.core.supporter.netty.constants.WebsocketClientStatus;
import com.alibaba.fastjson.JSONObject;
import lombok.extern.slf4j.Slf4j;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Map;
import java.util.Random;
import java.util.concurrent.ConcurrentHashMap;

import static cn.com.helei.bot.app.keitokun.KeiToKunBot.TODAY_KEY;
import static cn.com.helei.bot.app.keitokun.KeiToKunBot.TODAY_REMAINING_TAP_KEY;


@Slf4j
public class KeiToKunWSClient extends BotJsonWSClient {

    private final static Map<BaseBotWSClient<JSONObject, JSONObject>, Integer> clientNoResponsePingCount = new ConcurrentHashMap<>();

    private final static Map<BaseBotWSClient<JSONObject, JSONObject>, Integer> requestIdMap = new ConcurrentHashMap<>();

    private final static int noResponsePingLimit = 10;

    private final Random random = new Random();

    public KeiToKunWSClient(AccountContext accountContext, String connectUrl) {
        super(accountContext, connectUrl);
    }

    @Override
    public void whenAccountClientStatusChange(WebsocketClientStatus clientStatus) {
        AccountContext accountContext = this.getAccountContext();

        String printPrefix = accountContext.getSimpleInfo() + "-" + accountContext.getParam(KeiToKunBot.UID_KEY);

        switch (clientStatus) {
            case RUNNING -> {
                log.info("{} 连接ws服务器[{}]成功", printPrefix, url);

            }
            case STOP -> {
                log.info("{} 连接到ws服务器[{}]失败", printPrefix, url);

                accountContext.getConnectStatusInfo().getRestart().incrementAndGet();
            }
            case SHUTDOWN -> {
                log.info("{} ws连接已断开", printPrefix);
                requestIdMap.remove(this);
            }
        }
    }

    @Override
    public JSONObject getHeartbeatMessage() {
        Integer count = clientNoResponsePingCount.compute(this, (k, v) -> {
            if (v != null && v >= noResponsePingLimit) {
                return null;
            }
            return v == null ? 1 : v + 1;
        });

        if (count == null) {
            log.warn("{} 长时间未收到pong，关闭客户端", this.getAccountContext().getSimpleInfo());
            this.close();
            return null;
        }


        JSONObject frame = new JSONObject();
        frame.put("cmd", 1001);
        frame.put("id", requestIdMap.compute(this, (k, v) -> v == null ? 1 : v + 1));
        frame.put("uid", getAccountContext().getParam("uid"));

        JSONObject data = new JSONObject();
        int randomClickTimes = getRandomClickTimes();

        data.put("amount", randomClickTimes);
        data.put("collectNum", randomClickTimes);
        data.put("timestamp", System.currentTimeMillis());
        frame.put("data", data);

        log.info("[{}] 发送心跳[{}]", getAccountContext().getSimpleInfo(), frame);
        getAccountContext().getConnectStatusInfo().getHeartBeat().getAndIncrement();

        return frame;
    }

    @Override
    public void whenAccountReceiveResponse(
            Object id,
            JSONObject response
    ) {
        Integer cmd = response.getInteger("cmd");
        JSONObject data = response.getJSONObject("data");

        AccountContext accountContext = this.getAccountContext();
        ConnectStatusInfo connectStatusInfo = accountContext.getConnectStatusInfo();

        String prefix = accountContext.getSimpleInfo() + "-" + accountContext.getParam("uid");

        log.info("{} 收到消息 {}", prefix, response);
        if (cmd == 1001) {
            Integer totalNum = data.getInteger("totalNum");
            Integer collectNum = data.getInteger("collectNum");

            accountContext.setParam(TODAY_REMAINING_TAP_KEY,
                    String.valueOf(Math.max(0, totalNum - collectNum)));

            // 今日的领完了, 关闭
            if (totalNum <= collectNum) {
                log.info("{} 今日keitokun点击已完成，断开ws连接", prefix);
                accountContext.setParam(TODAY_KEY, LocalDate.now().toString());
                this.shutdown();
            }

            log.info("{} 收到响应,[{}/{}](已点击/剩余)", prefix,
                    collectNum, totalNum);

            accountContext.getRewordInfo().setTotalPoints(data.getInteger("keitoAmount") * 1.0);
            accountContext.getRewordInfo().setTotalPoints(collectNum * 1.0);

            connectStatusInfo.getHeartBeat().incrementAndGet();
        } else {
            log.warn("{} 收到未知响应[{}]", prefix, response);
            connectStatusInfo.getErrorHeartBeat().incrementAndGet();
        }

        connectStatusInfo.setUpdateDateTime(LocalDateTime.now());
    }

    @Override
    public void whenAccountReceiveMessage(
            JSONObject message
    ) {

    }


    private int getRandomClickTimes() {
        return random.nextInt(5) + 1;
    }
}
