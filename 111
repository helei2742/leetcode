package cn.com.helei.browser_control;

import com.alibaba.fastjson.JSONObject;
import lombok.*;
import org.openqa.selenium.WebDriver;

import java.util.Arrays;
import java.util.List;
import java.util.function.BiFunction;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class ExecuteGroup {

    private String name;

    private List<ExecuteItem> executeItems;

    private BiFunction<WebDriver, JSONObject, Boolean> enterCondition;

}
package cn.com.helei.browser_control;


import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class ExecuteItem {

    private String name;

    private Integer retryTimes;

    private ExecuteLogic executeLogic;

    private ExecuteLogic resetLogic;
}
package cn.com.helei.browser_control;

import com.alibaba.fastjson.JSONObject;
import org.openqa.selenium.WebDriver;

public interface ExecuteLogic {

    void execute(WebDriver webDriver, JSONObject params);

}
package cn.com.helei.browser_control;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import lombok.extern.slf4j.Slf4j;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;

import java.io.File;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.concurrent.TimeUnit;

import static cn.com.helei.browser_control.SeleniumProxyAuth.createProxyAuthExtension;

@Slf4j
public class SeleniumInstance {

    public static final String EXTENSIONS_PATH_LIST = "extension_path_list";

    public static final String DRIVER_PATH = "driver_path";

    private final JSONObject params;

    private final ChromeOptions chromeOptions;

    private final InetSocketAddress proxy;

    private final List<ExecuteGroup> seleniumExecuteChain = new ArrayList<>();

    private final Random random = new Random();

    private WebDriver webDriver;

    public SeleniumInstance(
            InetSocketAddress proxy,
            String username,
            String password,
            JSONObject params
    ) throws IOException {
        this.params = params;
        this.proxy = proxy;
        this.chromeOptions = initChromeOption(proxy, username, password, params);
    }


    /**
     * 添加执行方法
     *
     * @param executeGroup executeGroup
     * @return SeleniumInstance
     */
    public SeleniumInstance addExecuteFun(ExecuteGroup executeGroup) {
        this.seleniumExecuteChain.add(executeGroup);
        return this;
    }

    /**
     * 开始执行selenium
     *
     * @param name name
     * @throws InterruptedException InterruptedException
     */
    public void start(String name) throws InterruptedException {
        // Step 1 设置driver
        String driverPath = params.getString(DRIVER_PATH);
        if (driverPath != null && !driverPath.isEmpty()) {
            System.setProperty("webdriver.chrome.driver", driverPath);
        }

        // Step 2 启动浏览器
        log.info("starting chrome browser [{}}", name);
        this.webDriver = new ChromeDriver(chromeOptions);
        log.info("chrome browser started, start execute chain");

        // Step 3 遍历execute chain 执行
        for (ExecuteGroup executeGroup : seleniumExecuteChain) {
            String groupName = executeGroup.getName();

            log.info("[{}]-[{}] group start execute", name, groupName);

            // Step 3.1 判断该组操作是否能够进入
            Boolean isEnter = executeGroup.getEnterCondition().apply(webDriver, params);
            if (isEnter != null && isEnter) {
                // Step 3.1.1 能够进入，开始执行group的逻辑
                log.info("[{}]-[{}] group can execute", name, groupName);

                executeGroup.getExecuteItems().forEach(item -> {
                    // Step 3.1.1.1 带重试
                    for (int j = 0; j < item.getRetryTimes(); j++) {
                        try {
                            log.info("[{}]-[{}]-[{}] start invoke logic [{}/{}]",
                                    name, groupName, item.getName(), j, item.getRetryTimes());
                            item.getExecuteLogic().execute(webDriver, params);
                            // Step 3。1.1.2 运行成功，return下一个item执行
                            return;
                        } catch (Exception e) {
                            // Step 3.1.1.3 运行失败，调用重试Rest方法后，继续执行
                            log.error("[{}]-[{}]-[{}] invoke logic error, retry {}", name, groupName, item.getName(), j);
                            item.getResetLogic().execute(webDriver, params);
                        }
                    }
                    // Step 3.1.1.4 超过次数抛出异常
                    throw new RuntimeException("[%S]-[%s]-[%s] invoke logic error, out of limit %s"
                            .formatted(name, groupName, item.getName(), item.getRetryTimes()));
                });
            } else {
                // Step 3.1.2 不能进入执行
                log.warn("[{}]-[{}] group can not execute", name, groupName);
            }

            // Step 3.2 group 操作执行完，sleep一段时间
            int timeout = random.nextInt(500, 5000);
            log.info("[{}]-[{}] execute finish, sleep [{}]ms", name, groupName, timeout);
            TimeUnit.MILLISECONDS.sleep(timeout);
        }
    }


    /**
     * 初始化参数
     *
     * @param proxy    proxy
     * @param username username
     * @param password password
     * @param params   params
     * @return ChromeOptions
     * @throws IOException IOException
     */
    private ChromeOptions initChromeOption(InetSocketAddress proxy, String username, String password, JSONObject params) throws IOException {
        final ChromeOptions chromeOptions = new ChromeOptions();
        chromeOptions.addArguments("--disable-gpu");
        chromeOptions.addArguments("--remote-allow-origins=*");
        chromeOptions.addArguments("--start-maximized");
        chromeOptions.addArguments("--no-default-browser-check");
        chromeOptions.addArguments("--disable-popup-blocking");
        chromeOptions.addArguments("--disable-infobars");

        chromeOptions.addExtensions(new File(createProxyAuthExtension(proxy.getHostName(), proxy.getPort(), username, password)));

        JSONArray extensionsPathList = params.getJSONArray(EXTENSIONS_PATH_LIST);
        if (extensionsPathList != null && !extensionsPathList.isEmpty()) {
            List<File> files = new ArrayList<>(extensionsPathList.size());
            for (int i = 0; i < extensionsPathList.size(); i++) {
                String path = extensionsPathList.getString(i);
                files.add(new File(path));
            }
            chromeOptions.addExtensions(files);
        }


        return chromeOptions;
    }
}
package cn.com.helei.browser_control;

import java.io.*;

public class SeleniumProxyAuth {

    private static final String BASE_DIR = System.getProperty("user.dir") + File.separator + "botData" + File.separator + "extensions";

    public static String createProxyAuthExtension(String host, int port, String user, String pass) throws IOException {
        String pluginPath = BASE_DIR + File.separator +  "proxy_auth_plugin_%s_%s.zip".formatted(host, port);

        if (new File(pluginPath).exists()) {
            return pluginPath;
        }

        String manifestJson = """
                {
                    "version": "1.0.0",
                    "manifest_version": 2,
                    "name": "Chrome Proxy",
                    "permissions": [
                        "proxy",
                        "tabs",
                        "unlimitedStorage",
                        "storage",
                        "<all_urls>",
                        "webRequest",
                        "webRequestBlocking"
                    ],
                    "background": {
                        "scripts": ["background.js"]
                    },
                    "minimum_chrome_version":"22.0.0"
                }
                """;

        String backgroundJs =
                """
                        var config = {
                                mode: "fixed_servers",
                                rules: {
                                  singleProxy: {
                                    scheme: "http",
                                    host: "%s",
                                    port: parseInt(%s)
                                  },
                                  bypassList: []
                                }
                              };
                        chrome.proxy.settings.set({value: config, scope: "regular"}, function() {});
                        function callbackFn(details) {
                            return {
                                authCredentials: {
                                    username: "%s",
                                    password: "%s"
                                }
                            };
                        }
                        chrome.webRequest.onAuthRequired.addListener(
                                    callbackFn,
                                    {urls: ["<all_urls>"]},
                                    ['blocking']
                        );
                        """.formatted(host, port, user, pass);

        File dir = new File(BASE_DIR + File.separator + "proxy_auth_extension_%s_%s".formatted(host, port));
        if (dir.mkdir()) {
            writeToFile(new File(dir, "manifest.json"), manifestJson);
            writeToFile(new File(dir, "background.js"), backgroundJs);

            // 创建 ZIP 扩展
            File zipFile = new File(pluginPath);
            try (FileOutputStream fos = new FileOutputStream(zipFile);
                 BufferedOutputStream bos = new BufferedOutputStream(fos);
                 java.util.zip.ZipOutputStream zos = new java.util.zip.ZipOutputStream(bos)) {

                addToZipFile(new File(dir, "manifest.json"), zos);
                addToZipFile(new File(dir, "background.js"), zos);
            }

            return pluginPath;
        } else {
            throw new IOException("Failed to create extension directory");
        }
    }

    private static void writeToFile(File file, String content) throws IOException {
        try (FileWriter fw = new FileWriter(file);
             BufferedWriter bw = new BufferedWriter(fw)) {
            bw.write(content);
        }
    }

    private static void addToZipFile(File file, java.util.zip.ZipOutputStream zos) throws IOException {
        try (FileInputStream fis = new FileInputStream(file);
             BufferedInputStream bis = new BufferedInputStream(fis)) {

            java.util.zip.ZipEntry zipEntry = new java.util.zip.ZipEntry(file.getName());
            zos.putNextEntry(zipEntry);

            byte[] bytes = new byte[1024];
            int length;
            while ((length = bis.read(bytes)) >= 0) {
                zos.write(bytes, 0, length);
            }
        }
    }
}
package cn.com.helei.browser_control;

import com.alibaba.fastjson.JSONObject;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.time.Duration;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Set;
import java.util.concurrent.TimeUnit;

class SeleniumInstanceTest {

    private static InetSocketAddress proxy = new InetSocketAddress("localhost", 1234);

    private static String username = "username";

    private static String password = "password";

    private static JSONObject params;

    private static SeleniumInstance seleniumInstance;

    @BeforeAll
    public static void setUp() throws IOException {
        params = new JSONObject();
        seleniumInstance = new SeleniumInstance(proxy, username, password, params);
    }


    @Test
    public void test1() throws InterruptedException {
        seleniumInstance
                .addExecuteFun(ExecuteGroup.builder()
                        .name("初始化")
                        .enterCondition((webDriver, params) -> {
                            return true;
                        })
                        .executeItems(List.of(
                                ExecuteItem.builder().name("代理验证").executeLogic(SeleniumInstanceTest::proxyVerify).build()
                        ))
                        .build()
                )
                .addExecuteFun(ExecuteGroup.builder()
                        .name("登录HaHa")
                        .enterCondition((webDriver, params) -> {
                            return true;
                        })
                        .executeItems(List.of(
                                ExecuteItem.builder().name("切换到目标页面").executeLogic(SeleniumInstanceTest::changeToTargetPage).build(),
                                ExecuteItem.builder().name("登录账号").executeLogic(SeleniumInstanceTest::changeToTargetPage).build(),
                                ExecuteItem.builder().name("导入钱包").executeLogic(SeleniumInstanceTest::changeToTargetPage).build()
                        ))
                        .build()
                )
                .addExecuteFun(ExecuteGroup.builder()
                        .name("每日任务")
                        .enterCondition((webDriver, params) -> {
                            return true;
                        })
                        .executeItems(List.of(
                                ExecuteItem.builder().name("进入Swap页面").executeLogic(SeleniumInstanceTest::enterSwapPage).build(),
                                ExecuteItem.builder().name("交换Monad").executeLogic(SeleniumInstanceTest::monadSwap).build()
                        ))
                        .build()
                )
                .start(params.getString("name"));
    }

    private static void monadSwap(WebDriver webDriver, JSONObject params) {
        WebDriverWait wait = new WebDriverWait(webDriver, Duration.ofSeconds(10));

        WebElement swapCountInput = wait.until(ExpectedConditions.elementToBeClickable(By.xpath(" //*[@id=\"app-content\"]/div/div[2]/div[2]/div[2]/div[1]/div[2]/div/div[3]/input")));

        WebDriverWait swapConfirmWait = new WebDriverWait(webDriver, Duration.ofSeconds(60));
        Random random = new Random();
        int monCount = random.nextInt(1, 4);
        int successTimes = 0;

        while (successTimes < monCount) {
            WebElement token2Selector = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id=\"app-content\"]/div/div[2]/div[2]/div[2]/div[3]/div[1]/button")));
            token2Selector.click();

            List<WebElement> token2List = webDriver.findElements(By.xpath(" //*[@id=\"app-content\"]/div/div[2]/div[2]/div[3]/div[2]/div[3]/div//button"));
            token2List.removeFirst();

            token2List.get(random.nextInt(token2List.size())).click();

            double count = random.nextDouble(0.0001, 0.001);
            swapCountInput.sendKeys("");
            swapCountInput.sendKeys("%.4f".formatted(count));
            // 等待按钮可点击
            try {
                WebElement swapConfirmBtn = swapConfirmWait.until(ExpectedConditions.elementToBeClickable(By.xpath(" //*[@id=\"app-content\"]/div/div[2]/div[2]/div[2]/div[6]/button")));
                swapConfirmBtn.click();
                WebElement closeTransBtn = swapConfirmWait.until(ExpectedConditions.elementToBeClickable(By.xpath(" //*[@id=\"app-content\"]/div/div[2]/div[2]/div[3]/div[2]/div/button")));
                closeTransBtn.click();
                successTimes++;
            } catch (TimeoutException timeoutException) {
                System.out.println("超时");
            }
        }
    }

    private static void enterSwapPage(WebDriver webDriver, JSONObject params) {
        WebDriverWait wait = new WebDriverWait(webDriver, Duration.ofSeconds(10));

        WebElement legacyPage = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id=\"tab:r0:1\"]/div")));
        legacyPage.click();

        WebElement networkSelectBtn = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id=\"app-content\"]/div/div[2]/div[2]/div[2]/div[1]")));
        networkSelectBtn.click();

        WebElement teesNetSelect = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id=\"app-content\"]/div/div[2]/div[2]/div[4]/div[2]/div[2]/ul/li[2]")));
        teesNetSelect.click();

        WebElement monadTestNetBtn = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id=\"app-content\"]/div/div[2]/div[2]/div[4]/div[2]/div[2]/div[2]/button[1]")));
        monadTestNetBtn.click();
        try {
            TimeUnit.SECONDS.sleep(3);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }

        WebElement swapPageBtn = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id=\"app-content\"]/div/div[2]/div[2]/div[3]/div[2]/div[1]/div[1]/div[2]/div[2]/button[3]")));
        swapPageBtn.click();
        try {
            TimeUnit.SECONDS.sleep(5);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }

    private static void importWallet(WebDriver webDriver, JSONObject params) {
        WebDriverWait wait = new WebDriverWait(webDriver, Duration.ofSeconds(10));

        WebElement importWalletBtn = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id=\"app-content\"]/div/div[2]/div[2]/div[5]/div[2]/button")));
        importWalletBtn.click();

        List<WebElement> inputs = webDriver.findElements(By.xpath("//*[@id=\"app-content\"]/div/div[2]/div[2]/div[2]/div[3]/div//input"));

        String[] split = params.getString("wallet").split(" ");

        for (int i = 0; i < inputs.size(); i++) {
            inputs.get(i).sendKeys(split[i]);
        }


        WebElement importWalletConfirm
                = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id=\"app-content\"]/div/div[2]/div[2]/div[2]/div[4]/button")));
        importWalletConfirm.click();


        WebElement importSuccessConfirm
                = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id=\"app-content\"]/div/div[2]/div[2]/div[2]/button")));
        importSuccessConfirm.click();

        WebElement skipNowBtn = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id=\"app-content\"]/div[2]/div[2]/div[3]/button[2]")));
        skipNowBtn.click();

        try {
            TimeUnit.SECONDS.sleep(5);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }

    private static void loginAccount(WebDriver webDriver, JSONObject params) {
        WebDriverWait wait = new WebDriverWait(webDriver, Duration.ofSeconds(10));

        WebElement button = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id=\"app-content\"]/div/div[2]/div[2]/div[3]/button[2]")));
        button.click();

        // 找到 email 输入框并输入邮箱
        webDriver.findElement(By.cssSelector("input[type='email']")).sendKeys(params.getString("email"));

        // 找到 password 输入框并输入密码
        webDriver.findElement(By.cssSelector("input[type='password']")).sendKeys(params.getString("password"));

        WebElement loginButton = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id=\"app-content\"]/div/div[2]/div[3]/div[3]/button[1]")));
        loginButton.click();

        WebElement pinCodeInput = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id=\"app-content\"]/div/div[2]/div[2]/div[2]/div[3]/div[1]/input")));
        pinCodeInput.sendKeys("123456789");
        WebElement pinCodeConfirmInput = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id=\"app-content\"]/div/div[2]/div[2]/div[2]/div[3]/div[2]/input")));
        pinCodeConfirmInput.sendKeys("123456789");
        WebElement confirmPinCOde = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id=\"app-content\"]/div/div[2]/div[2]/div[2]/div[4]/button")));
        confirmPinCOde.click();

        WebElement agreeBtn = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id=\"app-content\"]/div/div[2]/div[2]/label/input")));
        agreeBtn.click();
    }

    private static void changeToTargetPage(WebDriver webDriver, JSONObject params) {
        // 获取所有窗口句柄
        Set<String> handles = webDriver.getWindowHandles();
        for (String handle : handles) {
            webDriver.switchTo().window(handle);
            if (webDriver.getCurrentUrl().equals("data:,")) {
                webDriver.close(); // 关闭 data:, 页面
                break;
            }
        }

        // 切换到第二个标签页（索引 1）
        List<String> windowList = new ArrayList<>(webDriver.getWindowHandles());
        webDriver.switchTo().window(windowList.getFirst());
    }

    private static void proxyVerify(WebDriver webDriver, JSONObject params) {
        // 使用 Robot 模拟输入用户名和密码
        Robot robot = null;
        try {
            robot = new Robot();
        } catch (AWTException e) {
            throw new RuntimeException(e);
        }
        robot.delay(5000); // 等待弹框出现

        // 输入用户名
        for (char c : username.toCharArray()) {
            robot.keyPress(KeyEvent.getExtendedKeyCodeForChar(c));
            robot.keyRelease(KeyEvent.getExtendedKeyCodeForChar(c));
        }

        robot.keyPress(KeyEvent.VK_TAB);
        robot.keyRelease(KeyEvent.VK_TAB);

        // 输入密码
        for (char c : password.toCharArray()) {
            robot.keyPress(KeyEvent.getExtendedKeyCodeForChar(c));
            robot.keyRelease(KeyEvent.getExtendedKeyCodeForChar(c));
        }
        robot.keyPress(KeyEvent.VK_ENTER);
        robot.keyRelease(KeyEvent.VK_ENTER);
    }
}
