import request from '@/utils/custom_request'

/**
 * 分页查询浏览器环境
 * @param {page, limit}
 * @returns {*}
 */
export function pageQueryBot({ page, limit, filterMap }) {
  return request({
    url: '/bot/pageQuery',
    method: 'post',
    data: {
      page,
      limit,
      filterMap
    }
  })
}
import request from '@/utils/custom_request'

/**
 * 上传账户基本信息
 * @param accountBaseInfoList
 * @returns {*}
 */
export function uploadAccountBaseInfoList(accountBaseInfoList) {
  return request({
    url: '/accountBaseInfo/batchAdd',
    method: 'post',
    data: {
      rawLines: accountBaseInfoList
    }
  })
}

/**
 * 分页查询账户基本信息
 * @param {page, limit, filterMap}
 * @returns {*}
 */
export function pageQueryAccountBaseInfo({ page, limit, filterMap }) {
  return request({
    url: '/accountBaseInfo/pageQuery',
    method: 'post',
    data: {
      page,
      limit,
      filterMap
    }
  })
}

/**
 * 获取AccountBaseInfo 根据type分类的信息
 */
export function queryAccountBaseInfoTypedInfo() {
  return request({
    url: '/accountBaseInfo/typedInfo',
    method: 'get'
  })
}

/**
 * 删除账户，根据id
 * @param ids
 * @returns {*}
 */
export function deleteAccountBaseInfo(ids) {
  return request({
    url: '/accountBaseInfo/delete',
    method: 'post',
    data: {
      ids: ids
    }
  })
}
<template>

<!--  <div class="bot-account-config">-->
<!--    <el-transfer-->
<!--      style="text-align: left; display: inline-block"-->
<!--      v-model=""-->
<!--      filterable-->
<!--      :left-default-checked="[2, 3]"-->
<!--      :right-default-checked="[1]"-->
<!--      :titles="['Source', 'Target']"-->
<!--      :button-texts="['到左边', '到右边']"-->
<!--      :render-content="renderPrintLineStr"-->
<!--      :format="{-->
<!--        noChecked: '${total}',-->
<!--        hasChecked: '${checked}/${total}'-->
<!--      }"-->
<!--      :data="accountBaseInfoList">-->
<!--      <el-button class="transfer-footer" slot="left-footer" size="small">操作</el-button>-->
<!--      <el-button class="transfer-footer" slot="right-footer" size="small">操作</el-button>-->
<!--    </el-transfer>-->
<!--  </div>-->
</template>

<script>

export default {
  name: 'BotAccountConfig',
  // props: {
  //   accountBaseInfoList: []
  // },
  // methods: {
  //   renderPrintLineStr(h, accountInfo) {
  //     return accountInfo.id + ' [' + accountInfo.type + ']-[' + accountInfo.name + ']-' + accountInfo.email
  //   }
  // }
}
</script>

<style scoped>
.bot-account-config {

}
</style>
<template>
  <div class="bot-info-content clearfix">
    <el-card class="bot-info-card">
      <div slot="header" class="clearfix">
        <span>About bot</span>
      </div>

      <div class="bot-profile">
        <div class="box-center">
          <pan-thumb :image="botInfo.image" :height="'100px'" :width="'100px'" :hoverable="false"/>
        </div>

        <div class="box-center">
          <div class="bot-name text-center">{{ botInfo.name }}</div>
          <div class="bot-role text-center text-muted">id: {{ botInfo.id }}</div>
        </div>
      </div>

      <div class="bot-bio">
        <div class="bot-education bot-bio-section">
          <div class="bot-bio-section-header">
            <i class="el-icon-collection-tag"/>
            <el-tag v-for="tag in botInfo.tag" size="mini">{{ tag }}</el-tag>
          </div>
        </div>
      </div>
    </el-card>

    <div class="bot-describe">
      <h3>Bot介绍：</h3>
      <aside>
        {{ botInfo.describe }}
      </aside>

      <el-divider/>

      <div class="bot-job-describe">
        <h3>功能列表:</h3>

        <el-collapse
          v-for="(param, jobName) in botInfo.jobParams"
          v-model="activeJobName"
          accordion
        >
          <el-collapse-item
            :name="jobName"
          >
            <template slot="title">
              <el-button
                :type="getJobTagType(param.jobType)"
                size="mini"
                style="margin-right: 8px"
                icon="el-icon-s-help"
                circle
              />
              {{ jobName }}
            </template>

            <div style="padding: 0 25px; width: 600px">

              <aside>{{ param.description }}</aside>

              <el-descriptions title="常规设置" :column="1" border>
                <el-descriptions-item label="名称">{{ jobName }}</el-descriptions-item>
                <el-descriptions-item label="类型">{{ param.jobType }}</el-descriptions-item>
                <el-descriptions-item label="并发数" :span="2">{{ param.concurrentCount }}</el-descriptions-item>
                <el-descriptions-item label="运行间隔">
                  <div v-if="param.intervalInSecond !== undefined  && param.cronExpression !== ''">
                    {{ param.intervalInSecond }}(秒)
                  </div>
                  <el-tag v-else-if="param.cronExpression !== undefined && param.cronExpression !== ''">
                    {{ param.cronExpression }}
                  </el-tag>
                  <div v-else>
                    无运行间隔配置
                  </div>
                </el-descriptions-item>
                <el-descriptions-item label="功能介绍">{{ param.description }}</el-descriptions-item>
              </el-descriptions>

              <el-descriptions
                title="Websocket设置"
                v-if="isWebSocketConfig(param) && param.autoBotJobWSParam !== undefined"
                :column="2"
                border
              >
                <el-descriptions-item label="是否刷新ws连接">
                  {{ param.autoBotJobWSParam.isRefreshWSConnection }}
                </el-descriptions-item>
                <el-descriptions-item label="运行无限重连">
                  {{ param.autoBotJobWSParamwsUnlimitedRetry }}
                </el-descriptions-item>
                <el-descriptions-item label="重连次数限制">
                  {{ param.autoBotJobWSParam.reconnectLimit }}
                </el-descriptions-item>
                <el-descriptions-item label="重连次数自减时间间隔" :span="2">
                  {{ param.autoBotJobWSParam.reconnectCountDownSecond }}
                </el-descriptions-item>
                <el-descriptions-item label="websocket连接并发数" :span="2">
                  {{ param.autoBotJobWSParam.wsConnectCount }}
                </el-descriptions-item>
                <el-descriptions-item label="心跳间隔" :span="2">
                  {{ param.autoBotJobWSParamheartBeatIntervalSecond }}
                </el-descriptions-item>
              </el-descriptions>
            </div>
          </el-collapse-item>
        </el-collapse>
      </div>
    </div>
  </div>
</template>

<script>
import PanThumb from '@/components/PanThumb/index.vue'
import {Bot_JOB_TYPE} from "@/utils/system-enum";

export default {
  name: 'BotInfoCard',
  components: {PanThumb},
  props: {
    botInfo: {
      name: 'bot-name',
      describe: 'bot-describe',
      image: '',
      tag: [
        'depin',
        'sol',
        'ai'
      ],
      jobParams: {}
    }
  },
  data() {
    return {
      activeJobName: ''
    }
  },
  methods: {
    isWebSocketConfig(param) {
      return param.jobType === Bot_JOB_TYPE.WEB_SOCKET_CONNECT
    },
    getJobTagType(jobType) {
      if (
        jobType === Bot_JOB_TYPE.LOGIN
        || jobType === Bot_JOB_TYPE.REGISTER
        || jobType === Bot_JOB_TYPE.QUERY_REWARD) {
        return 'success'
      } else if (jobType === Bot_JOB_TYPE.TIMED_TASK) {
        return 'primary'
      } else if (jobType === Bot_JOB_TYPE.ONCE_TASK) {
        return 'info'
      } else if (jobType === Bot_JOB_TYPE.WEB_SOCKET_CONNECT) {
        return 'warning'
      }
      return 'danger'
    }
  }
}
</script>

<style scoped>
.bot-info-content {
  height: 350px;
  margin-bottom: 8px;
  border-radius: 5px;
}

.bot-info-card {
  float: left;
  margin-bottom: 20px;
  height: 350px;
  width: 300px
}

.bot-describe {
  float: right;
  height: 350px;
  padding: 25px 20px;
  width: calc(100% - 303px);
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.15); /* 设置阴影效果 */
  border-radius: 5px;
  background-color: #fff;

  overflow-y: scroll;
}


.box-center {
  margin: 0 auto;
  display: table;
}

.text-muted {
  color: #777;
}

.bot-profile {
  .bot-name {
    font-weight: bold;
  }

  .box-center {
    padding-top: 10px;
  }

  .bot-role {
    padding-top: 10px;
    font-weight: 400;
    font-size: 14px;
  }
}

.bot-bio {
  margin-top: 20px;
  color: #606266;

  span {
    padding-left: 4px;
  }

  .bot-bio-section {
    font-size: 14px;
    padding: 15px 0;

    .bot-bio-section-header {
      border-top: 1px solid #dfe6ec;
      padding-top: 10px;
      margin-bottom: 10px;
      font-weight: bold;
    }
  }
}
</style>
<template>
  <div class="components-container">

    <el-row :span="24">
      <bot-info-card :bot-info="botInfo"/>
    </el-row>


    <el-row :span="24">
      <!--      <left-right-selector-->
      <!--        :selection-title="'未选择账号'"-->
      <!--        :selection-list-map="typedAccountListMap"-->
      <!--        :selected-title="'已选择账号'"-->
      <!--        :selected-list="bindAccountList"-->
      <!--        :item-print-handler="itemPrintHandler"-->
      <!--        @save-exchange="saveExchangeHandler"-->
      <!--      />-->

      <el-col>
        <el-transfer
          style="text-align: left; display: inline-block"
          v-model="test"
          filterable
          :left-default-checked="[2, 3]"
          :right-default-checked="[1]"
          :titles="['Source', 'Target']"
          :button-texts="['到左边', '到右边']"
          :data="selectionList(this.currentType)">
          <el-button class="transfer-footer" slot="left-footer" size="small">操作</el-button>
          <el-button class="transfer-footer" slot="right-footer" size="small">操作</el-button>
        </el-transfer>
      </el-col>
    </el-row>
  </div>
</template>

<script>
import BotInfoCard from '@/views/custom/bot/bot-config/components/bot-info-card.vue'
import DndList from '@/components/DndList/index.vue'
import LeftRightSelector from '@/views/custom/components/left-right-selector.vue'
import {pageQueryAccountBaseInfo, queryAccountBaseInfoTypedInfo} from "@/api/custom/account-base-info";

export default {
  name: 'BotConfig',
  components: {LeftRightSelector, DndList, BotInfoCard},
  data() {
    return {
      test: [1],
      botInfo: {},
      defaultLimit: 10,
      currentType: null,
      typedContext: {
        'default': {
          pageDataMap: {
            1: []
          },
          page: 1,
          limit: 10,
          total: 0
        }
      }
    }
  },
  created() {
    // 获取路由参数
    this.botInfo = this.$route.query.botInfo
    document.title += this.botInfo.id

    // 获取账户分类信息
    queryAccountBaseInfoTypedInfo().then(response => {
      const typedInfo = response.data

      for (let info of typedInfo) {
        this.typedContext[info.key] = {
          page: 1,
          limit: this.defaultLimit,
          total: info.value,
          pageDataMap: {}
        }

        this.queryTypedABIPageData(1, this.defaultLimit, info.key)
      }
    })
  },
  methods: {
    selectionList(type) {
      let currentTypeContext = this.typedContext[type];
      return currentTypeContext.pageDataMap[currentTypeContext.page];
    },
    /**
     * 查询account base info
     *
     * @param page
     * @param limit
     * @param type
     */
    queryTypedABIPageData(page, limit, type) {
      // 有缓存，不请求新的数据
      const pageDataMap = this.typedContext[type].pageDataMap;
      if (
        pageDataMap !== undefined && pageDataMap !== null
        && pageDataMap[page] !== undefined && pageDataMap[page] !== null
      ) {
        return
      }

      // 获取账户信息
      pageQueryAccountBaseInfo({
        page: page,
        limit: limit,
        filterMap: {
          type: type
        }
      }).then(response => {
        const pageInfo = response.data
        pageDataMap[page] = pageInfo.list

        for (let ac of pageDataMap[page]) {
          ac.key = ac.id
        }

        this.typedContext[type].total = pageInfo.total

        if (this.currentType === null) this.currentType = type
      })
    }
  }
}
</script>

<style scoped>
.components-container {
  position: relative;
  min-height: 100px;
  background-color: #f0f2f5;
}
</style>
<template>
  <el-card class="box-card-style">
    <div slot="header" class="clearfix">
      <span class="box-card-title">{{ botSimpleInfo.name}}</span>
      <el-button
        size="mini"
        type="box-card-"
        icon="el-icon-plus"
        style="float: right; "
        @click="routeToBotConfig"
        circle
      />
    </div>

    <div class="clearfix">
      <pan-thumb
        class="box-card-image"
        width="75px"
        height="75px"
        :image="imageContent"
      >
      </pan-thumb>

      <div class="box-card-tag">
        <el-tag
          v-for="(value, jobName) in botSimpleInfo.jobParams"
          style="margin: 4px"
        >
          {{ jobName }}
        </el-tag>
      </div>
    </div>
    <div>
      <aside class="box-card-describe" >
        {{ botSimpleInfo.describe + 'aknfdkjawndjanwkdnkjandjkaakmdwlkalkwmdklamdlkawmdlkjdnawk'}}
      </aside>
    </div>
  </el-card>
</template>

<script>

import PanThumb from '@/components/PanThumb/index.vue'
import {getAppPathImageBase64} from '@/utils/image'

export default {
  name: 'BotSimpleCard',
  components: { PanThumb },
  props: {
    botSimpleInfo: {
      name: 'bot-name',
      describe: 'bot-describe',
      image: '',
      jobParams: {}
    }
  },

  data() {
    return {
      imageContent: ''
    }
  },
  methods: {
    routeToBotConfig() {
      this.$router.push({
        path: '/bot-config',
        query: {
          botInfo: this.botSimpleInfo
        }
      })
    }
  },
  created() {
    getAppPathImageBase64(this.botSimpleInfo.image).then(response=>{
      this.imageContent = response
    })
  }
}
</script>

<style scoped>
.box-card-style {
  width: 380px;
  margin: 15px;
}

.box-card-image {
  float: left;
}

.box-card-tag {
  display: inline-block;
  height: 100px;
  width: calc(100% - 83px);
  float: right;
  border-left: #5a5e66;
  padding: 3px;

}

.box-card-describe{

  font-size: 14px;
  color: #666;
  line-height: 1.6;
  display: -webkit-box;
  -webkit-line-clamp: 2; /* 限制显示2行 */
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
}


.box-card-title {
  width: 70%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap; /* 如果需要多行省略可用下方样式替换 */
  margin: 8px 0;
  float: left;

  font-weight: bold;
  font-size: 21px;
}
</style>
<template>
  <div class="mixin-components-container">
    <el-row>
      <el-card class="box-card">
        <div slot="header" class="clearfix">
          <span>Types</span>
        </div>
        <div style="margin-bottom:50px;">
          <el-col :span="4" class="text-center">
            <router-link class="pan-btn blue-btn" to="/documentation/index">
              Depin
            </router-link>
          </el-col>
          <el-col :span="4" class="text-center">
            <router-link class="pan-btn light-blue-btn" to="/icon/index">
              ETH
            </router-link>
          </el-col>
          <el-col :span="4" class="text-center">
            <router-link class="pan-btn pink-btn" to="/excel/export-excel">
              Ai
            </router-link>
          </el-col>
          <el-col :span="4" class="text-center">
            <router-link class="pan-btn green-btn" to="/table/complex-table">
              Daily
            </router-link>
          </el-col>
          <el-col :span="4" class="text-center">
            <router-link class="pan-btn tiffany-btn" to="/example/create">
              SOL
            </router-link>
          </el-col>
          <el-col :span="4" class="text-center">
            <router-link class="pan-btn yellow-btn" to="/theme/index">
              TESTNET
            </router-link>
          </el-col>
        </div>
      </el-card>
    </el-row>

    <div class="bot-info-content">
      <bot-simple-card
        v-for="info in botInfoList"
        :bot-simple-info="info"
      />
    </div>

    <div class="block">
      <el-pagination
        layout="prev, pager, next"
        :total="listQuery.total">
      </el-pagination>
    </div>
  </div>
</template>

<script>
import PanThumb from '@/components/PanThumb'
import MdInput from '@/components/MDinput'
import DropdownMenu from '@/components/Share/DropdownMenu'
import waves from '@/directive/waves/index.js'
import BotSimpleCard from '@/views/custom/bot/bot-market/components/bot-simple-card.vue' // 水波纹指令
import {pageQueryBot} from '@/api/custom/bot'

export default {
  name: 'BotMarket',
  components: {
    BotSimpleCard,
    PanThumb,
    MdInput,
    DropdownMenu
  },
  directives: {
    waves
  },
  created() {

    pageQueryBot({
      page: this.listQuery.page,
      limit: this.listQuery.limit
    }).then(response=>{
      const pageInfo = response.data

      if (pageInfo != null) {
        this.listQuery.total = pageInfo.total
        this.botInfoList = pageInfo.list
      } else {
        this.$message.warning('查询bot list失败')
      }
    })
  },
  data() {
    return {
      listQuery: {
        page: 1,
        limit: 10,
        total: 0
      },
      botInfoList: [
        {
          id: 1,
          name: 'test-bot-1',
          describe: 'bot detailnakjwndjkawndjknwajkdnakjwndjkawndjkawndjanwkjdnakjndjkawndjaw',
          image: 'https://wpimg.wallstcn.com/577965b9-bb9e-4e02-9f0c-095b41417191'
        }
      ]
    }
  }
}
</script>

<style scoped>
.bot-info-content{
  display: flex;
  justify-content: space-around;
  flex-wrap: wrap;
  margin-top: 20px;
}
</style>
