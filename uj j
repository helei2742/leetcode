package cn.com.helei.depin.core.dto;


import cn.com.helei.depin.core.env.BrowserEnv;
import cn.com.helei.depin.core.network.NetworkProxy;
import io.netty.handler.codec.http.DefaultHttpHeaders;
import io.netty.handler.codec.http.HttpHeaders;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;


@Data
@AllArgsConstructor
@NoArgsConstructor
public abstract class DepinClientAccount {

    private String name;

    private Integer proxyId;

    private NetworkProxy networkProxy;

    private Integer browserEnvId;

    private BrowserEnv browserEnv;

    public HttpHeaders getHeaders() {
        return new DefaultHttpHeaders();
    }

    public String getConnectUrl() {
        return "";
    }
}


package cn.com.helei.depin.core.env;

import lombok.Data;

import java.util.Map;

@Data
public class BrowserEnv {

    private Integer id;

    private Map<String, String> headers;

}


package cn.com.helei.depin.core.env;


import lombok.Setter;
import org.yaml.snakeyaml.Yaml;

import java.io.IOException;
import java.io.InputStream;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

public class BrowserEnvPool {

    @Setter
    private Set<BrowserEnv> envs;

    private ConcurrentMap<Integer, BrowserEnv> idMapEnv;

    public static BrowserEnvPool loadYamlBrowserEnvPool(String classpath) {
        Yaml yaml = new Yaml();
        try (InputStream inputStream = BrowserEnvPool.class.getClassLoader().getResourceAsStream(classpath)) {
            Map<String, Object> yamlData = yaml.load(inputStream);
            Map<String, Object> depin = (Map<String, Object>) yamlData.get("depin");
            Map<String, Object> browser = (Map<String, Object>) depin.get("browser");

            BrowserEnvPool envPool = yaml.loadAs(yaml.dump(browser), BrowserEnvPool.class);
            envPool.idMapEnv = new ConcurrentHashMap<>();
            envPool.envs.forEach(browserEnv -> envPool.idMapEnv.put(browserEnv.getId(), browserEnv));
            return envPool;
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public BrowserEnv getBrowserEnv(Integer id) {
        return idMapEnv.get(id);
    }
}



package cn.com.helei.depin.core.netty.base;


import cn.com.helei.depin.core.netty.handler.WSCloseHandler;
import cn.com.helei.depin.core.network.NetworkProxy;
import cn.com.helei.depin.core.netty.constants.NettyConstants;
import cn.com.helei.depin.core.netty.constants.WebsocketClientStatus;
import com.alibaba.fastjson.JSON;
import io.netty.bootstrap.Bootstrap;
import io.netty.channel.*;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.nio.NioSocketChannel;
import io.netty.handler.codec.http.DefaultHttpHeaders;
import io.netty.handler.codec.http.HttpClientCodec;
import io.netty.handler.codec.http.HttpHeaders;
import io.netty.handler.codec.http.HttpObjectAggregator;
import io.netty.handler.codec.http.websocketx.*;
import io.netty.handler.proxy.Socks5ProxyHandler;
import io.netty.handler.ssl.SslContext;
import io.netty.handler.ssl.SslContextBuilder;
import io.netty.handler.ssl.util.InsecureTrustManagerFactory;
import io.netty.handler.stream.ChunkedWriteHandler;
import io.netty.handler.timeout.IdleStateHandler;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;

import javax.net.ssl.SSLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

/**
 * Websocket客户端
 *
 * @param <P> 请求体的类型
 * @param <T> 返回值的类型
 */
@Slf4j
public abstract class AbstractWebsocketClient<P, T> {

    private static final int MAX_FRAME_SIZE = 10 * 1024 * 1024;  // 10 MB or set to your desired size

    /**
     * websocket的url字符串
     */
    protected String url;

    /**
     * netty pipeline 最后一个执行的handler
     */
    protected final AbstractWebSocketClientHandler<P, T> handler;

    /**
     * 执行回调的线程池
     */
    @Getter
    protected final ExecutorService callbackInvoker;

    /**
     * 代理
     */
    @Setter
    protected NetworkProxy proxy = null;

    @Setter
    protected HttpHeaders headers = new DefaultHttpHeaders();

    /**
     * 空闲时间
     */
    @Setter
    protected int allIdleTimeSecond = 10;

    /**
     * 重链接次数
     */
    private final AtomicInteger reconnectTimes = new AtomicInteger(0);

    /**
     * 重连锁
     */
    private final ReentrantLock reconnectLock = new ReentrantLock();

    /**
     * 启动中阻塞的condition
     */
    private final Condition startingWaitCondition = reconnectLock.newCondition();

    /**
     * 客户端当前状态
     */
    @Getter
    private volatile WebsocketClientStatus clientStatus = WebsocketClientStatus.NEW;


    /**
     * 关闭时的回调列表
     */
    private final List<WSCloseHandler> closeHandlerList = new ArrayList<>();

    @Setter
    @Getter
    private String name;

    private Bootstrap bootstrap;

    private EventLoopGroup eventLoopGroup;

    private URI uri;

    private String host;

    private int port;

    private boolean useSSL;

    private Channel channel;

    public AbstractWebsocketClient(
            String url,
            AbstractWebSocketClientHandler<P, T> handler
    ) {
        this.url = url;
        this.handler = handler;
        this.handler.websocketClient = this;

        this.callbackInvoker = Executors.newVirtualThreadPerTaskExecutor();
    }

    private void init() throws SSLException, URISyntaxException {

        resolveParamFromUrl();

        WebSocketClientHandshaker handshaker = WebSocketClientHandshakerFactory.newHandshaker(
                uri, WebSocketVersion.V13, null, true, headers, MAX_FRAME_SIZE
        );
        handler.init(handshaker);

        final SslContext sslCtx;
        if (useSSL) {
            sslCtx = SslContextBuilder.forClient()
                    .trustManager(InsecureTrustManagerFactory.INSTANCE).build();
        } else {
            sslCtx = null;
        }

        bootstrap = new Bootstrap();

        eventLoopGroup = new NioEventLoopGroup();
        bootstrap.group(eventLoopGroup)
                .channel(NioSocketChannel.class)
                .remoteAddress(host, port)
                .option(ChannelOption.TCP_NODELAY, true)
                .option(ChannelOption.SO_KEEPALIVE, true)
                .handler(new ChannelInitializer<NioSocketChannel>() {
                    @Override
                    protected void initChannel(NioSocketChannel ch) {
                        ChannelPipeline p = ch.pipeline();
                        if (proxy != null) {
                            p.addLast(new Socks5ProxyHandler(proxy.getAddress(), proxy.getUsername(), proxy.getPassword()));
                        }

                        if (sslCtx != null) {
                            p.addLast(sslCtx.newHandler(ch.alloc(), uri.getHost(), port));
                        }

                        p.addLast("http-chunked", new ChunkedWriteHandler()); // 支持大数据流


                        p.addLast(new HttpClientCodec());
                        p.addLast(new HttpObjectAggregator(81920));
                        p.addLast(new IdleStateHandler(0, 0, allIdleTimeSecond, TimeUnit.SECONDS));
                        p.addLast(new ChunkedWriteHandler());

                        p.addLast(new WebSocketFrameAggregator(MAX_FRAME_SIZE));  // 设置聚合器的最大帧大小


                        p.addLast(handler);
                    }
                });
    }
    /**
     * 链接服务端
     */
    public CompletableFuture<Boolean> connect() {
        return connect(null);
    }

    /**
     * 链接服务端
     */
    public CompletableFuture<Boolean> connect(WSCloseHandler wsCloseHandler) {

        /*
         * 添加关闭的回调
         */
        if(wsCloseHandler != null) {
            synchronized (closeHandlerList) {
                closeHandlerList.add(wsCloseHandler);
            }
        }

        return switch (clientStatus) {
            case NEW, STOP -> reconnect();
            case STARTING -> waitForStarting();
            case RUNNING -> {
                log.warn("WS客户端[{}}正在运行, clientStatus[{}]", url, clientStatus);
                yield CompletableFuture.supplyAsync(() -> true);
            }
            case SHUTDOWN -> throw new RuntimeException("");
        };
    }


    /**
     * 重链接
     *
     * @return CompletableFuture<Void>
     */
    public CompletableFuture<Boolean> reconnect() {
        return switch (clientStatus) {
            case NEW, STOP -> doReconnect();
            case STARTING -> waitForStarting();
            case RUNNING -> {
                log.warn("WS客户端[{}}正在启动或运行, 不能reconnect. clientStatus[{}]", url, clientStatus);
                yield CompletableFuture.supplyAsync(() -> true);
            }
            case SHUTDOWN ->  CompletableFuture.supplyAsync(()->{
                log.error("client[{}] already shutdown", name);
                return false;
            });
        };
    }

    /**
     * 执行重连接，带重试逻辑
     *
     * @return CompletableFuture<Void>
     */
    private CompletableFuture<Boolean> doReconnect() {
        clientStatus = WebsocketClientStatus.STARTING;

        return CompletableFuture.supplyAsync(() -> {
            //Step 1 重连次数超过限制，关闭
            if (reconnectTimes.get() > NettyConstants.RECONNECT_LIMIT) {
                log.error("reconnect times out of limit [{}], close websocket client", NettyConstants.RECONNECT_LIMIT);
                close();
                return false;
            }

            AtomicBoolean isSuccess = new AtomicBoolean(false);

            //Step 2 重连逻辑
            //Step 2.1 加锁保证只要一个线程进行重连
            reconnectLock.lock();
            try {

                //Step 2.2 已经再running状态，直接返回true。变为shutdown、stop状态，直接返回false
                if (clientStatus.equals(WebsocketClientStatus.RUNNING)) {
                    log.info("client started by other thread");
                    return true;
                } else if(clientStatus.equals(WebsocketClientStatus.SHUTDOWN) || clientStatus.equals(WebsocketClientStatus.STOP)) {
                    log.error("clint stop/shutdown when client starting");
                    return false;
                }

                //Step 3 初始化
                log.info("开始初始化WS客户端");
                try {
                    init();
                } catch (SSLException | URISyntaxException e) {
                    throw new RuntimeException("初始化WS客户端发生错误", e);
                }
                log.info("初始化WS客户端完成，开始链接服务器 [{}]", url);


                //Step 4 链接服务器
                while (reconnectTimes.incrementAndGet() <= NettyConstants.RECONNECT_LIMIT) {

                    //Step 4.1 每进行重连都会先将次数加1并设置定时任务将重连次数减1
                    eventLoopGroup.schedule(() -> {
                        reconnectTimes.decrementAndGet();
                    }, 180, TimeUnit.SECONDS);

                    log.info("start connect client [{}], url[{}], current times [{}]", name, url, reconnectTimes.get());

                    //Step 4.2 latch用于同步等等链接完成
                    CountDownLatch latch = new CountDownLatch(1);

                    //Step 4.3 延迟再进行连接
                    eventLoopGroup.schedule(() -> {
                        try {
                            channel = bootstrap.connect().sync().channel();

                            handler.handshakeFuture().sync();

                            channel.attr(NettyConstants.CLIENT_NAME).set(name);

                            //Step 4.4 连接成功设置标识
                            isSuccess.set(true);
                        } catch (Exception e) {
                            log.error("connect client [{}], url[{}] error, times [{}]", name, url, reconnectTimes.get(), e);
                        } finally {
                            latch.countDown();
                        }
                    }, NettyConstants.RECONNECT_DELAY_SECONDS, TimeUnit.SECONDS);

                    //Step 4.5 等待链接完成
                    try {
                        latch.await();
                    } catch (InterruptedException e) {
                        log.error("connect client [{}], url[{}] error, times [{}]", name, url, reconnectTimes.get(), e);
                    }

                    //Step 4.6 链接成功则跳出循环
                    if (isSuccess.get()) {
                        log.info("connect client [{}], url[{}] success, current times [{}]", name, url, reconnectTimes.get());

                        clientStatus = WebsocketClientStatus.RUNNING;

                        reconnectTimes.set(0);
                        break;
                    }
                }
            } catch (Exception e) {
                //exception 遇到未处理异常，直接关闭
                close();
                throw new RuntimeException(String.format("connect client [%s] appear unknown error", name), e);
            } finally {
                //Step 5 释放等待启动的线程
                startingWaitCondition.signalAll();
                reconnectLock.unlock();
            }

            //Step 6 未成功启动，关闭并抛出异常
            if (!isSuccess.get()) {
                log.error("reconnect times out of limit [{}], close websocket client", NettyConstants.RECONNECT_LIMIT);
                close();
                throw new RuntimeException("reconnect times out of limit");
            }

            return true;
        }, callbackInvoker);
    }


    /**
     * 停止WebSocketClient
     */
    public void close() {
        synchronized (closeHandlerList) {
            log.info("closing websocket client [{}]", name);
            if (channel != null) {
                channel.close();
            }

            if (eventLoopGroup != null) {
                eventLoopGroup.shutdownGracefully();
            }
            reconnectTimes.set(0);

            clientStatus = WebsocketClientStatus.STOP;

            //执行关闭回调
            Iterator<WSCloseHandler> iterator = closeHandlerList.iterator();
            while (iterator.hasNext()) {
                WSCloseHandler closeHandler = iterator.next();
                iterator.remove();

                CompletableFuture.runAsync(closeHandler::onClosed, callbackInvoker);
            }

            log.warn("web socket client [{}] closed", name);
        }
    }

    /**
     * 彻底关闭客户端
     */
    public void shutdown() {
        close();
        clientStatus = WebsocketClientStatus.SHUTDOWN;
        log.warn("web socket client [{}] already shutdown !", name);
    }

    /**
     * 等待启动完成
     *
     * @return CompletableFuture<Void>
     */
    private CompletableFuture<Boolean> waitForStarting() {
        return CompletableFuture.supplyAsync(() -> {
            log.warn("client [{}] is starting, waiting for complete", name);
            reconnectLock.lock();
            try {
                while (clientStatus.equals(WebsocketClientStatus.RUNNING)) {
                    startingWaitCondition.await();
                }

                if (clientStatus.equals(WebsocketClientStatus.STOP) || clientStatus.equals(WebsocketClientStatus.SHUTDOWN)) {
                    log.error("启动WS客户端[{}]失败, ClientStatus [{}}", name, clientStatus);
                    return false;
                }
                return true;
            } catch (InterruptedException e) {
                log.error("waiting for start client [{}] error", name);
                throw new RuntimeException(e);
            } finally {
                reconnectLock.unlock();
            }
        }, callbackInvoker);
    }

    /**
     * 发送请求, 注册响应监听
     *
     * @param request 请求体
     */
    public CompletableFuture<T> sendRequest(P request) {
        return CompletableFuture.supplyAsync(() -> {
            if (request == null) {
                log.error("request is null");
                return null;
            }

            CountDownLatch latch = new CountDownLatch(1);
            AtomicReference<T> jb = new AtomicReference<>(null);

            boolean flag = handler.registryRequest(request, response -> {
                latch.countDown();
                jb.set(response);
            });

            if (flag) {
                log.info("send request [{}]", request);
                channel.writeAndFlush(new TextWebSocketFrame(JSON.toJSONString(request)));
                log.debug("send request [{}] success", request);
            } else {
                log.error("request id registered");
                return null;
            }

            try {
                if (!latch.await(NettyConstants.REQUEST_WAITE_SECONDS, TimeUnit.SECONDS)) return null;

                return jb.get();
            } catch (InterruptedException e) {
                log.error("send request interrupted", e);
                return null;
            }
        }, callbackInvoker);
    }

    /**
     * 发送ping
     */
    public void sendPing() {
        log.debug("client [{}] send ping {}", name, url);
        channel.writeAndFlush(new PingWebSocketFrame());
    }

    /**
     * 发送pong
     */
    public void sendPong() {
        log.debug("client [{}] send pong {}", name, url);
        channel.writeAndFlush(new PongWebSocketFrame());
    }

    /**
     * 解析参数
     *
     * @throws URISyntaxException url解析错误
     */
    private void resolveParamFromUrl() throws URISyntaxException {
        uri = new URI(url);
        String scheme = uri.getScheme() == null ? "ws" : uri.getScheme();
        host = uri.getHost() == null ? "127.0.0.1" : uri.getHost();
        if (uri.getPort() == -1) {
            if ("ws".equalsIgnoreCase(scheme)) {
                port = 80;
            } else if ("wss".equalsIgnoreCase(scheme)) {
                port = 443;
            } else {
                port = -1;
            }
        } else {
            port = uri.getPort();
        }

        if (!"ws".equalsIgnoreCase(scheme) && !"wss".equalsIgnoreCase(scheme)) {
            log.error("Only WS(S) is supported.");
            throw new IllegalArgumentException("url error, Only WS(S) is supported.");
        }

        useSSL = "wss".equalsIgnoreCase(scheme);
    }
}


package cn.com.helei.depin.core.netty.base;

import cn.com.helei.depin.core.netty.constants.NettyConstants;
import cn.hutool.core.util.StrUtil;
import io.netty.channel.*;

import lombok.extern.slf4j.Slf4j;

import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.function.Consumer;


/**
 * WebSocket客户端处理器抽象类
 * 能够处理请求响应类型的消息。
 * 其它类型的消息要通过handleOtherMessage()抽象方法处理
 *
 * @param <Resp>
 */
@Slf4j
@ChannelHandler.Sharable
public abstract class AbstractWebSocketClientHandler<Req, Resp> extends BaseWebSocketClientHandler<Req, Resp> {


    /**
     * 存放请求响应的回调
     */
    protected final ConcurrentMap<String, HandlerEntity<Resp>> requestIdMap = new ConcurrentHashMap<>();


    @Override
    protected void whenReceiveMessage(String text) {
        Resp message = convertMessageToRespType(text);

        String responseId = getResponseId(message);

        if (StrUtil.isNotBlank(responseId)) {
            //有id，是发送请求的响应
            //提交response
            handleResponseMessage(responseId, message);
        } else {
            //没有id，按其它格式处理
            handleOtherMessage(message);
        }
    }


    /**
     * 注册request
     *
     * @param request request
     * @return 是否注册成功
     */
    public boolean registryRequest(Req request, Consumer<Resp> callback) {
        AtomicBoolean res = new AtomicBoolean(false);
        String requestId = getRequestId(request);

        if (StrUtil.isBlank(requestId)) return false;

        requestIdMap.compute(requestId, (k, v) -> {
            if (v == null) {
                res.set(true);
                long expireTime = System.currentTimeMillis() + NettyConstants.REQUEST_WAITE_SECONDS * 1000;
                v = new HandlerEntity<>(expireTime, callback);
                log.debug("registry request id[{}] success, expire time [{}]", requestId, expireTime);
            }
            return v;
        });

        return res.get();
    }

    /**
     * 处理请求响应的消息
     *
     * @param id       id
     * @param response 响应消息体
     */
    protected void handleResponseMessage(String id, Resp response) {
        HandlerEntity<Resp> handlerEntity = requestIdMap.get(id);

        if (System.currentTimeMillis() > handlerEntity.getExpireTime()) {
            log.warn("请求[{}]得到响应超时", id);
        } else {
            websocketClient.callbackInvoker.execute(() -> handlerEntity.getCallback().accept(response));
        }
    }

    /**
     * 处理其他类型消息
     *
     * @param message 消息
     */
    protected abstract void handleOtherMessage(Resp message);


    /**
     * 将websocket收到的文本消息转换为响应类型 T
     *
     * @param message websocket收到的原始消息
     * @return typedMessage
     */
    public abstract Resp convertMessageToRespType(String message);


    /**
     * 获取请求id
     *
     * @param request request
     * @return id
     */
    public abstract String getRequestId(Req request);

    /**
     * 获取响应id
     *
     * @param response 响应
     * @return id
     */
    public abstract String getResponseId(Resp response);
}


package cn.com.helei.depin.core.netty.base;

import cn.com.helei.depin.core.netty.constants.NettyConstants;
import io.netty.channel.*;
import io.netty.handler.codec.http.FullHttpResponse;
import io.netty.handler.codec.http.websocketx.*;
import io.netty.handler.timeout.IdleStateEvent;
import io.netty.util.CharsetUtil;
import lombok.extern.slf4j.Slf4j;


/**
 * WebSocket客户端处理器基础类
 * 处理连接握手
 *
 * @param <P>
 * @param <T>
 */
@Slf4j
@ChannelHandler.Sharable
public abstract class BaseWebSocketClientHandler<P, T> extends SimpleChannelInboundHandler<Object> {
    private WebSocketClientHandshaker handshaker;

    private ChannelPromise handshakeFuture;

    protected AbstractWebsocketClient<P, T> websocketClient;

    /**
     * 收到消息处理
     *
     * @param text 消息字符串
     */
    protected abstract void whenReceiveMessage(String text);


    public void init(WebSocketClientHandshaker handshaker) {
        this.handshaker = handshaker;
    }

    @Override
    public void handlerAdded(ChannelHandlerContext ctx) {
        handshakeFuture = ctx.newPromise();
    }

    @Override
    public void channelActive(ChannelHandlerContext ctx) {
        Channel channel = ctx.channel();
        log.info("WebSocket Client [{}] connected!", websocketClient.getName());
        channel.attr(NettyConstants.CLIENT_NAME).set(websocketClient.getName());
        handshaker.handshake(channel);
    }

    @Override
    public void channelInactive(ChannelHandlerContext ctx) {
        log.warn("WebSocket Client [{}] disconnected!", ctx.channel().attr(NettyConstants.CLIENT_NAME).get());

        websocketClient.close();
    }

    @Override
    public void channelUnregistered(ChannelHandlerContext ctx) throws Exception {
        log.warn("WebSocket Client [{}] unregistered!, start reconnect", ctx.channel().attr(NettyConstants.CLIENT_NAME).get());

        websocketClient.reconnect();
    }

    @Override
    public void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception {
        Channel ch = ctx.channel();
        // 如果握手未完成，处理 FullHttpResponse
        if (!handshaker.isHandshakeComplete()) {
            if (msg instanceof FullHttpResponse response) {
                try {
                    handshaker.finishHandshake(ch, response);
                    log.info("WebSocket client [{}] Handshake complete!", ch.attr(NettyConstants.CLIENT_NAME).get());
                    handshakeFuture.setSuccess();
                } catch (WebSocketHandshakeException e) {
                    log.info("WebSocket client [{}] Handshake failed!", ch.attr(NettyConstants.CLIENT_NAME).get());
                    handshakeFuture.setFailure(e);
                }
                return;
            }
        }

        if (msg instanceof FullHttpResponse response) {
            if (response.status().code() / 100 > 3) {
                throw new IllegalStateException(
                        "Unexpected FullHttpResponse (getStatus=" + response.status() +
                                ", content=" + response.content().toString(CharsetUtil.UTF_8) + ')');
            }
        } else if (msg instanceof WebSocketFrame frame) {
            switch (frame) {
                case TextWebSocketFrame textFrame -> {
                    log.debug("websocket client [{}] 接收到的消息：{}", ch.attr(NettyConstants.CLIENT_NAME).get(), textFrame.text());
                    whenReceiveMessage(textFrame.text());
                }
                case PongWebSocketFrame pongWebSocketFrame -> handlerPong(ch, pongWebSocketFrame);
                case PingWebSocketFrame pingWebSocketFrame -> handlerPing(ch, pingWebSocketFrame);
                case CloseWebSocketFrame closeWebSocketFrame -> handlerClose(ch, closeWebSocketFrame);
                default -> {
                    log.warn("channel[{}]收到位置类型的消息[{}]", ch.attr(NettyConstants.CLIENT_NAME).get(), frame.getClass().getName());
                }
            }
        }
    }


    @Override
    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {
        if (!handshakeFuture.isDone()) {
            handshakeFuture.setFailure(cause);
        }
        ctx.close();
        log.error("业务处理错误，websocket client关闭", cause);
    }

    @Override
    public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {
        // IdleStateHandler 所产生的 IdleStateEvent 的处理逻辑.
        if (evt instanceof IdleStateEvent e) {
            switch (e.state()) {
                case READER_IDLE:
                    handleReaderIdle(ctx);
                    break;
                case WRITER_IDLE:
                    handleWriterIdle(ctx);
                    break;
                case ALL_IDLE:
                    handleAllIdle(ctx);
                    break;
                default:
                    break;
            }
        }
    }


    /**
     * 处理close消息
     *
     * @param ch                  Channel ch
     * @param closeWebSocketFrame closeWebSocketFrame
     */
    protected void handlerClose(Channel ch, CloseWebSocketFrame closeWebSocketFrame) {
        log.warn("websocket client关闭");
        ch.close();
    }


    /**
     * 处理pong消息
     *
     * @param ch                 Channel ch
     * @param pongWebSocketFrame pongWebSocketFrame
     */
    protected void handlerPong(Channel ch, PongWebSocketFrame pongWebSocketFrame) {
        log.debug("WebSocket Client [{}] received pong", ch.attr(NettyConstants.CLIENT_NAME).get());

    }


    /**
     * 处理ping消息
     *
     * @param ch                 ch
     * @param pingWebSocketFrame pingWebSocketFrame
     */
    protected void handlerPing(Channel ch, PingWebSocketFrame pingWebSocketFrame) {
        log.debug("WebSocket Client [{}] received ping", ch.attr(NettyConstants.CLIENT_NAME).get());
        websocketClient.sendPong();
    }

    /**
     * 超过限定时间channel没有读时触发
     *
     * @param ctx ctx
     */
    protected void handleReaderIdle(ChannelHandlerContext ctx) {
    }

    /**
     * 超过限定时间channel没有写时触发
     *
     * @param ctx ctx
     */
    protected void handleWriterIdle(ChannelHandlerContext ctx) {
    }

    /**
     * 超过限定时间channel没有读写时触发
     *
     * @param ctx ctx
     */
    protected void handleAllIdle(ChannelHandlerContext ctx) {
        websocketClient.sendPing();
    }

    public ChannelFuture handshakeFuture() {
        return handshakeFuture;
    }
}


package cn.com.helei.depin.core.netty.base;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;

import java.util.function.Consumer;

@Data
@AllArgsConstructor
@NoArgsConstructor
@EqualsAndHashCode
public class HandlerEntity<T> {
    private long expireTime;

    private Consumer<T> callback;
}


package cn.com.helei.depin.core.netty.base;


import io.netty.channel.Channel;
import io.netty.channel.ChannelHandlerContext;

/**
 * netty事件处理器
 */
public interface NettyClientEventHandler {

    /**
     * 激活事件
     * @param ctx ctx
     */
    default void activeHandler(ChannelHandlerContext ctx){}

    /**
     * 关闭事件
     * @param channel channel
     */
    default void closeHandler(Channel channel){}

    /**
     * 异常事件
     * @param ctx ctx
     * @param cause cause
     */
    void exceptionHandler(ChannelHandlerContext ctx, Throwable cause);
}



package cn.com.helei.depin.core.netty.constants;

import io.netty.util.AttributeKey;

public class NettyConstants {

    /**
     * 一朕的最大长度
     */
    public final static int MAX_FRAME_LENGTH = 1024;


    /**
     * 放在netty channel 里的 client_name 的 key
     */
    public static final AttributeKey<String> CLIENT_NAME = AttributeKey.valueOf("client_name");

    /**
     * 请求等待时间
     */
    public static final long REQUEST_WAITE_SECONDS = 60;

    /**
     * netty客户端断线重连时间
     */
    public static final int RECONNECT_DELAY_SECONDS = 5;


    /**
     * netty客户端断线重连次数
     */
    public static final int RECONNECT_LIMIT = 3;
}


package cn.com.helei.depin.core.netty.constants;


/**
 * WS客户端状态
 */
public enum WebsocketClientStatus {

    /**
     * 新建
     */
    NEW,

    /**
     * 正在启动
     */
    STARTING,

    /**
     * 正在运行
     */
    RUNNING,

    /**
     * 已暂停
     */
    STOP,

    /**
     * 已禁止使用
     */
    SHUTDOWN
}


package cn.com.helei.depin.core.netty.handler;

import cn.com.helei.depin.core.netty.constants.NettyConstants;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.function.Consumer;


@Slf4j
public class RequestResponseHandler<T> {

    private final ConcurrentMap<String, HandlerEntity<T>> requestIdMap = new ConcurrentHashMap<>();


    /**
     * 注册request
     *
     * @param id request的id
     * @return 是否注册成功
     */
    public boolean registryRequest(String id, Consumer<T> callback) {
        AtomicBoolean res = new AtomicBoolean(false);
        requestIdMap.compute(id, (k, v) -> {
            if (v == null) {
                res.set(true);
                long expireTime = System.currentTimeMillis() + NettyConstants.REQUEST_WAITE_SECONDS * 1000;
                v = new HandlerEntity<>(expireTime, callback);
                log.debug("registry request id[{}] success, expire time [{}]", id, expireTime);
            }
            return v;
        });

        return res.get();
    }

    /**
     * 提交resoonse
     *
     * @param id       id
     * @param response response
     */
    public boolean submitResponse(String id, T response) {
        HandlerEntity<T> entity = requestIdMap.get(id);
        if (entity == null) {
            log.warn("request id[{}} didn't exist", id);
            return false;
        } else {
            long currentTimeMillis = System.currentTimeMillis();
            if (entity.expireTime < currentTimeMillis) {
                log.warn("request id[{}] expired, expire time[{}], currentTime[{}] cancel invoke callback",
                        id, entity.expireTime, currentTimeMillis);
                return false;
            } else {
                entity.callback.accept(response);
                log.debug("invoke request id[{}] callback success", id);
                return true;
            }
        }
    }

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    @EqualsAndHashCode
    static class HandlerEntity<T> {
        private long expireTime;

        private Consumer<T> callback;
    }
}


package cn.com.helei.depin.core.netty.handler;

public interface WSCloseHandler {


    void onClosed();
}


package cn.com.helei.depin.core.network;

import lombok.Data;

import java.net.InetSocketAddress;
import java.net.SocketAddress;

@Data
public class NetworkProxy {
    private Integer id;

    private String host;

    private int port;

    private String username;

    private String password;

    public SocketAddress getAddress() {
        return new InetSocketAddress(host, port);
    }
}

package cn.com.helei.depin.core.network;

import lombok.Setter;
import org.yaml.snakeyaml.Yaml;

import java.io.IOException;
import java.io.InputStream;
import java.util.HashSet;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

public class NetworkProxyPool {

    @Setter
    private HashSet<NetworkProxy> pool;

    private ConcurrentMap<Integer, NetworkProxy> idMapProxy;

    public static NetworkProxyPool loadYamlNetworkPool(String filename) {
        Yaml yaml = new Yaml();
        try (InputStream inputStream = NetworkProxyPool.class.getClassLoader().getResourceAsStream(filename)) {
            Map<String, Object> yamlData = yaml.load(inputStream);
            Map<String, Object> depin = (Map<String, Object>) yamlData.get("depin");
            Map<String, Object> network = (Map<String, Object>) depin.get("network");
            Map<String, Object> proxy = (Map<String, Object>) network.get("proxy");

            NetworkProxyPool networkProxyPool = yaml.loadAs(yaml.dump(proxy), NetworkProxyPool.class);

            ConcurrentMap<Integer, NetworkProxy> map = new ConcurrentHashMap<>();
            networkProxyPool.pool.forEach(networkProxy -> map.put(networkProxy.getId(), networkProxy));
            networkProxyPool.idMapProxy = map;

            return networkProxyPool;
        } catch (IOException e) {
            throw new RuntimeException(String.format("价值配置网络代理池文件[%s]发生错误", filename));
        }
    }


    public NetworkProxy getProxy(Integer id) {
        return idMapProxy.get(id);
    }

}




package cn.com.helei.depin.core.util;

import java.util.concurrent.ThreadFactory;
import java.util.concurrent.atomic.AtomicInteger;

public class NamedThreadFactory implements ThreadFactory {

    private final String namePrefix;
    private final AtomicInteger threadNumber = new AtomicInteger(1);

    public NamedThreadFactory(String namePrefix) {
        this.namePrefix = namePrefix;
    }

    @Override
    public Thread newThread(Runnable r) {
        // 使用指定的名称前缀和自动编号来创建线程名称
        Thread thread = new Thread(r, namePrefix + "-" + threadNumber.getAndIncrement());
        // 设置为守护线程（可选）
        thread.setDaemon(false);
        return thread;
    }
}


package cn.com.helei.depin.core.util;

import cn.com.helei.depin.core.network.NetworkProxy;
import com.alibaba.fastjson.JSONObject;
import lombok.extern.slf4j.Slf4j;
import okhttp3.*;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.io.IOException;
import java.net.Proxy;
import java.net.SocketTimeoutException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;

@Slf4j
public class RestApiClient {

    private static final int RETRY_TIMES = 3;

    private final OkHttpClient okHttpClient;

    private final ExecutorService executorService;

    public RestApiClient(
            NetworkProxy proxy,
            ExecutorService executorService
    ) {
        this.executorService = executorService;
        OkHttpClient.Builder builder = new OkHttpClient.Builder();
        if (proxy != null) {
            builder.proxy(new Proxy(Proxy.Type.HTTP, proxy.getAddress()))
                    .authenticator(new Authenticator() {
                        @NotNull
                        @Override
                        public Request authenticate(@Nullable Route route, @NotNull Response response) throws IOException {
                            String credential = Credentials.basic(proxy.getUsername(), proxy.getPassword());
                            return response.request().newBuilder()
                                    .header("Authorization", credential)
                                    .build();
                        }
                    });
        }
        this.okHttpClient = builder.build();
    }


    /**
     * 发送请求，如果有asKey参数不为null，则会鉴权
     *
     * @param method method
     * @param params params
     * @param body   body
     * @return CompletableFuture<JSONObject>
     */
    public CompletableFuture<String> request(
            String url,
            String method,
            JSONObject params,
            JSONObject body
    ) {
        return CompletableFuture.supplyAsync(() -> {
            // 创建表单数据
            StringBuilder queryString = new StringBuilder();


            if (params != null) {
                params.keySet().forEach(key -> {
                    queryString.append(key).append("=").append(params.get(key)).append("&");
                });

                if (!queryString.isEmpty()) {
                    queryString.deleteCharAt(queryString.length() - 1);
                }
            }

            String requestUrl = url + "?" + queryString;
            FormBody.Builder bodyBuilder = new FormBody.Builder();

            if (body != null) {
                body.forEach((k, v) -> bodyBuilder.add(k, String.valueOf(v)));
            }

            Request.Builder builder = new Request.Builder();
            builder.header("Content-Type", "application/json");

            // 创建 POST 请求
            builder.url(requestUrl);
            String upperCase = method.toUpperCase();
            if (upperCase.equals("GET")) {
                builder.get();
            } else {
                builder.method(upperCase, bodyBuilder.build());
            }

            Request request = builder.build();

            log.info("创建请求 url[{}], method[{}]成功，开始请求服务器", url, method);

            for (int i = 0; i < RETRY_TIMES; i++) {
                // 发送请求并获取响应
                try (Response response = okHttpClient.newCall(request).execute()) {
                    if (response.isSuccessful()) {
                        return response.body() == null ? "{}" : response.body().string();
                    } else {
                        log.error("请求url [{}] 失败， code [{}]， {}", url, response.code(), response.body());
                        break;
                    }
                } catch (SocketTimeoutException e) {
                    log.warn("请求[{}]超时，尝试重新请求 [{}/{}]", url, i, RETRY_TIMES);
                } catch (IOException e) {
                    log.error("请求url [{}] 失败", url, e);
                    throw new RuntimeException(e);
                }
            }

            return null;
        }, executorService);
    }
}


package cn.com.helei.depin.core.util;

import java.util.*;

public class UserAgentPool {

    public static final UserAgentPool DEFAULT = new UserAgentPool();

    private volatile boolean isInit = false;

    private final Map<String, Integer> userAgentPool = new HashMap<>();


    public UserAgentPool() {
        init();
    }


    public synchronized String getUserAgent() {

        String res = "";
        Optional<String> first = userAgentPool.entrySet().stream().sorted((e1, e2) -> e1.getValue().compareTo(e2.getValue()))
                .map(Map.Entry::getKey).findFirst();

        if (first.isPresent()) {
            userAgentPool.compute(first.get(), (k, v) -> (v == null ? 0 : v) + 1);
            res = first.get();
        }

        return res;
    }


    public synchronized void backUserAgent(String userAgent) {
        userAgentPool.compute(userAgent, (k, v) -> Math.max((v == null ? 0 : v) - 1, 0));
    }


    private void init() {
        if (isInit) return;

        synchronized (this) {
            if (isInit) return;
            userAgentPool.put("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36", 0);

            isInit = true;
        }
    }
}

package cn.com.helei.depin.core;

import cn.com.helei.depin.core.dto.DepinClientAccount;
import cn.com.helei.depin.core.netty.base.AbstractWebsocketClient;
import cn.com.helei.depin.core.util.RestApiClient;
import cn.com.helei.depin.core.util.UserAgentPool;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;


@Slf4j
@Getter
public class AbstractDepinClient<T extends DepinClientAccount, Req, Resp> extends AbstractWebsocketClient<Req, Resp> {

    public static final UserAgentPool userAgentPool = UserAgentPool.DEFAULT;

    private final RestApiClient restApiClient;

    private final T depinClientAccount;

    public AbstractDepinClient(
            T depinClientAccount,
            AbstractDepinWSClientHandler<Req, Resp> handler
    ) {
        super(
                depinClientAccount.getConnectUrl(),
                handler
        );
        super.setName(depinClientAccount.getName());
        super.setProxy(depinClientAccount.getNetworkProxy());
        super.setHeaders(depinClientAccount.getHeaders());

        this.depinClientAccount = depinClientAccount;
        this.restApiClient = new RestApiClient(depinClientAccount.getNetworkProxy(), super.getCallbackInvoker());
    }
}


package cn.com.helei.depin.core;

import cn.com.helei.depin.core.netty.base.AbstractWebSocketClientHandler;
import io.netty.channel.ChannelHandlerContext;

public abstract class AbstractDepinWSClientHandler<Req, Resp> extends AbstractWebSocketClientHandler<Req, Resp> {


    @Override
    protected void handleAllIdle(ChannelHandlerContext ctx) {
        websocketClient.sendRequest(heartBeatMessage());
    }


    protected abstract Req heartBeatMessage();
}


package cn.com.helei.depin.project.openLedger;

import cn.com.helei.depin.core.dto.DepinClientAccount;
import cn.com.helei.depin.core.env.BrowserEnvPool;
import cn.com.helei.depin.core.network.NetworkProxyPool;
import io.netty.handler.codec.http.DefaultHttpHeaders;
import io.netty.handler.codec.http.HttpHeaders;
import lombok.Data;
import lombok.EqualsAndHashCode;
import org.yaml.snakeyaml.Yaml;

import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.Map;

@Data
public class OpenLedgerConfig {

    /**
     * 并发数量
     */
    private int concurrentCount = 20;


    /**
     * 网络代理池配置文件名
     */
    private String networkPoolConfig = "network-proxy.yaml";

    /**
     * 网络代理池
     */
    private NetworkProxyPool networkProxyPool;

    /**
     * 浏览器环境池配置文件名
     */
    private String browserEnvPoolConfig = "browser-env.yaml";

    /**
     * 浏览器环境池
     */
    private BrowserEnvPool browserEnvPool;

    /**
     * 连接url
     */
    private String baseUrl;

    /**
     * 浏览器标识
     */
    private String origin;

    /**
     * 账户列表
     */
    private List<OpenLedgerAccount> accounts;


    public static void main(String[] args) {
        OpenLedgerConfig openLedgerConfig = loadYamlConfig("openledger.yaml");
        System.out.println(openLedgerConfig);
    }

    public static OpenLedgerConfig loadYamlConfig(String classpath) {
        Yaml yaml = new Yaml();
        try (InputStream inputStream = OpenLedgerConfig.class.getClassLoader().getResourceAsStream(classpath)) {
            Map<String, Object> yamlData = yaml.load(inputStream);
            Map<String, Object> depin = (Map<String, Object>) yamlData.get("depin");
            Map<String, Object> openledger = (Map<String, Object>) depin.get("openledger");

            //Step 1 基础配置文件
            OpenLedgerConfig openLedgerConfig = yaml.loadAs(yaml.dump(openledger), OpenLedgerConfig.class);

            //Step 2 网络代理池
            NetworkProxyPool loadedYamlNetworkProxyPool = NetworkProxyPool.loadYamlNetworkPool(openLedgerConfig.getNetworkPoolConfig());
            openLedgerConfig.setNetworkProxyPool(loadedYamlNetworkProxyPool);

            //Step 3 环境池
            BrowserEnvPool loadedYamlBrowserEnvPool = BrowserEnvPool.loadYamlBrowserEnvPool(openLedgerConfig.getBrowserEnvPoolConfig());
            openLedgerConfig.setBrowserEnvPool(loadedYamlBrowserEnvPool);


            //Step 4 账户列表完善
            openLedgerConfig.getAccounts().forEach(openLedgerAccount -> {
                openLedgerAccount.setOpenLedgerConfig(openLedgerConfig);

                openLedgerAccount.setNetworkProxy(loadedYamlNetworkProxyPool.getProxy(openLedgerAccount.getProxyId()));
                openLedgerAccount.setBrowserEnv(loadedYamlBrowserEnvPool.getBrowserEnv(openLedgerAccount.getBrowserEnvId()));
            });

            return openLedgerConfig;
        } catch (IOException e) {
            throw new RuntimeException(String.format("价值配置网络代理池文件[%s]发生错误", classpath));
        }
    }


    @EqualsAndHashCode(callSuper = true)
    @Data
    public static class OpenLedgerAccount extends DepinClientAccount {

        private OpenLedgerConfig openLedgerConfig;

        private String token;

        @Override
        public String getConnectUrl() {
            return openLedgerConfig.baseUrl + "?authToken=" + token;
        }

        @Override
        public HttpHeaders getHeaders() {
            HttpHeaders headers = new DefaultHttpHeaders();
            headers.add("Upgrade", "websocket")
                    .add("Origin", openLedgerConfig.origin)
                    .add("Cache-Control", "no-cache")
                    .add("Accept-Language", "zh-CN,zh;q=0.9,en;q=0.8")
                    .add("Pragma", "no-cache")
                    .add("Connection", "Upgrade");
            return headers;
        }

        @Override
        public String toString() {
            return "OpenLedgerAccount{" +
                    "token='" + token + '\'' +
                    '}';
        }
    }
}


package cn.com.helei.depin.project.openLedger;

import lombok.extern.slf4j.Slf4j;

import java.util.List;
import java.util.concurrent.Semaphore;

@Slf4j
public class OpenLedgerDepinApp {

    private final OpenLedgerConfig openLedgerConfig;

    private final Semaphore semaphore;

    public OpenLedgerDepinApp(String configClasspath) {
        this.openLedgerConfig = OpenLedgerConfig.loadYamlConfig(configClasspath);

        this.semaphore = new Semaphore(openLedgerConfig.getConcurrentCount());
    }


    public void startAll() {
        log.info("开始创建OpenLedger客户端");

        List<OpenLedgerDepinClient> ledgerDepinClients = openLedgerConfig.getAccounts().stream().map(OpenLedgerDepinClient::new).toList();

        log.info("OpenLedger客户端创建完毕");

        for (OpenLedgerDepinClient ledgerDepinClient : ledgerDepinClients) {
            try {
                String name = ledgerDepinClient.getName();

                log.info("账号[{}]开始连接", name);
                ledgerDepinClient
                        .connect()
                        .thenAcceptAsync(success -> {
                            if (!success) {
                                log.error("账号[{}]连接失败", name);
                            } else {
                                log.info("账号[{}]连接成功", name);
                            }
                        });

            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
    }
}

package cn.com.helei.depin.project.openLedger;

import cn.com.helei.depin.core.AbstractDepinWSClientHandler;

public class OpenLedgerDepinAutoAppHandler extends AbstractDepinWSClientHandler<String, String> {

    private final OpenLedgerConfig.OpenLedgerAccount openLedgerAccount;

    public OpenLedgerDepinAutoAppHandler(OpenLedgerConfig.OpenLedgerAccount openLedgerAccount) {
        this.openLedgerAccount = openLedgerAccount;
    }

    @Override
    protected void handleOtherMessage(String message) {

    }

    @Override
    public String convertMessageToRespType(String message) {
        return message;
    }

    @Override
    public String getRequestId(String request) {
        return "";
    }

    @Override
    public String getResponseId(String response) {
        return "";
    }

    @Override
    protected String heartBeatMessage() {
        return "";
    }
}


package cn.com.helei.depin.project.openLedger;


import cn.com.helei.depin.core.AbstractDepinClient;
import lombok.extern.slf4j.Slf4j;



@Slf4j
public class OpenLedgerDepinClient extends AbstractDepinClient<OpenLedgerConfig.OpenLedgerAccount, String, String> {

    public OpenLedgerDepinClient(OpenLedgerConfig.OpenLedgerAccount openLedgerAccount) {
        super(openLedgerAccount, new OpenLedgerDepinAutoAppHandler(openLedgerAccount));
    }


}


depin:
  browser:
    envs:
      - id: 1
        headers:
          User-Agent:
          Cache-Control:  no-cache
          Accept-Language: zh-CN,zh;q=0.9,en;q=0.8


depin:
  network:
    proxy:
      pool:
        - id: 1
          host: 172.0.0.1
          port: 12135
          username: 12321
          password: 412312

depin:
  openledger:
    browserEnvPoolConfig: browser-env.yaml
    networkPoolConfig: network-proxy.yaml

    baseUrl: wss://apitn.openledger.xyz/ws/v1/orch
    origin: chrome-extension://ekbbplmjjgoobhdlffmgeokalelnmjjc

    accounts:
      - name: 914577981@qq.com
        token: 123
        proxyId: 1
        browserEnvId: 1



//package cn.com.helei.depin.core;
//
//import java.io.IOException;
//
//import com.alibaba.fastjson.JSONObject;
//import okhttp3.*;
//import org.junit.jupiter.api.Test;
//
//public class OpenLeaguedTest {
//
//
//    @Test
//    public void set() throws IOException {
//
//        OkHttpClient client = new OkHttpClient();
//
//        String requestBody = "{\"key\":\"043fa106e6bee656626ebb7936c36796d118b24a30b8a4e3b94371d2d1c7d75384dccaff9deff284130ddb0cdb32ee47e045ee0e4b783762e5084a318cf4d032c6\",\"data\":\"{\\\"iv\\\":\\\"d0bfebc08fb341686b00e3b047c6530b\\\",\\\"ephemPublicKey\\\":\\\"04a8036d01e65fd79eedef56083bfb66af9d7acb50b64e3bf8efa91b02ccde51699a2bb0ef2cf64c3491dd1d226e4f429300b4f544dc24f5c064e14e1a7caafe79\\\",\\\"ciphertext\\\":\\\"\\\",\\\"mac\\\":\\\"2dbf661e60262374607c570d4965c30e2818bbf34587e2c2ead90a618c3d1136\\\"}\",\"signature\":\"304502210092189a957d2d82da6649dde82d9aef818c2a70faa4c7b2832ee56c483ab15c4302205f436d95912d2c359f2fbdb8634aae90361526b7acc43ae1dea5e1435dbde268\",\"timeout\":600,\"allowedOrigin\":\"https://auth.web3auth.io\"}";
//        JSONObject jb = JSONObject.parseObject(requestBody);
//        FormBody.Builder bodyBuilder = new FormBody.Builder();
//
//        jb.keySet().forEach(key->bodyBuilder.add(key, jb.getString(key)));
//
//        Request request = new Request.Builder()
//                .url("https://api.web3auth.io/session-service/v2/store/set")
//                .post(bodyBuilder.build())
//                .header("Accept", "*/*")
//                .header("Accept-Language", "zh-CN,zh;q=0.9,en;q=0.8")
//                .header("Cache-Control", "no-cache")
//                .header("Connection", "keep-alive")
//                .header("Content-Type", "application/json; charset=utf-8")
//                .header("Cookie", "_ga=GA1.1.398799594.1730295772; _ga_DY71GQK057=GS1.1.1736778675.2.1.1736778863.0.0.0; AWSALBTG=OCIkjRYg+HrdZkhZhJwZrv8xDCUR6o6ayjU6d3/iUr7XQAgeTBxHtYEGqWn8XeLvRaHbWZZXJLf3hR7VcmcycXv0yjtjQn6YVGhBS5HcR9ZEc7Q25EftVBH79trLaCm88Ms6SAs6PH9EwpBGwhlFK25VO7UWuNwOGKZ6Cm6ofdDL; AWSALBTGCORS=OCIkjRYg+HrdZkhZhJwZrv8xDCUR6o6ayjU6d3/iUr7XQAgeTBxHtYEGqWn8XeLvRaHbWZZXJLf3hR7VcmcycXv0yjtjQn6YVGhBS5HcR9ZEc7Q25EftVBH79trLaCm88Ms6SAs6PH9EwpBGwhlFK25VO7UWuNwOGKZ6Cm6ofdDL; AWSALB=e1PEof/Ex57ATBQijmS077jdt2TjizalYLCrH0p32wGx+TEnLAfmjCbfcxQPnV24vSSRFHHZNJeN7PTUtS5+TK4BT9Xo+BesxBjCFtRGu1Fx7ecgIBGOOsHHtQkw; AWSALBCORS=e1PEof/Ex57ATBQijmS077jdt2TjizalYLCrH0p32wGx+TEnLAfmjCbfcxQPnV24vSSRFHHZNJeN7PTUtS5+TK4BT9Xo+BesxBjCFtRGu1Fx7ecgIBGOOsHHtQkw")
//                .header("Origin", "chrome-extension://ekbbplmjjgoobhdlffmgeokalelnmjjc")
//                .header("Pragma", "no-cache")
//                .header("Sec-Fetch-Dest", "empty")
//                .header("Sec-Fetch-Mode", "cors")
//                .header("Sec-Fetch-Site", "none")
//                .header("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36")
//                .header("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"")
//                .header("sec-ch-ua-mobile", "?0")
//                .header("sec-ch-ua-platform", "\"macOS\"")
//                .build();
//
//        try (Response response = client.newCall(request).execute()) {
//            if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
//            response.body().string();
//        }
//    }
//
//
//    @Test
//    public void get() throws IOException {
//        OkHttpClient client = new OkHttpClient();
//
//        String requestBody = "{\"key\":\"04cacbf9f6923083bb597c9f79b13d37948f1e98307a4f19b0e0f447d6faa7090e61683bb655c99b69e08c2ffa32d68e86530a67e9f5c347c7dd8b25f20f307350\"}";
//        JSONObject jb = JSONObject.parseObject(requestBody);
//        FormBody.Builder bodyBuilder = new FormBody.Builder();
//
//        jb.keySet().forEach(key->bodyBuilder.add(key, jb.getString(key)));
//
//        Request request = new Request.Builder()
//                .url("https://api.web3auth.io/session-service/v2/store/get")
//                .post(bodyBuilder.build())
//                .header("Accept", "*/*")
//                .header("Accept-Language", "zh-CN,zh;q=0.9,en;q=0.8")
//                .header("Cache-Control", "no-cache")
//                .header("Connection", "keep-alive")
//                .header("Content-Type", "application/json; charset=utf-8")
//                .header("Cookie", "_ga=GA1.1.398799594.1730295772; AWSALBTG=SOvHYZA1GRqHCz1nruHniL27Y8DJYPOiCnQJyCKW8IKMO/JeBbvvTb4cW/QXiJr/fRGLGaZRW+NEs8mMTsA9cwIzVn4h7LgzrqM7sm250p5T4svxiWwXsJ62PRDnKcgvqGfrKRWJuBIXaf4MWAJE+TBIBaofb9ft5uCzazjfClMo; AWSALBTGCORS=SOvHYZA1GRqHCz1nruHniL27Y8DJYPOiCnQJyCKW8IKMO/JeBbvvTb4cW/QXiJr/fRGLGaZRW+NEs8mMTsA9cwIzVn4h7LgzrqM7sm250p5T4svxiWwXsJ62PRDnKcgvqGfrKRWJuBIXaf4MWAJE+TBIBaofb9ft5uCzazjfClMo; AWSALB=GXRSPsMEiUl29mpI7gwYaHBUjjLYDjQZW4E2iIUQxBQhNf36yV44VOWe0rN4dPXe70QewP9ufkcJD2BrQyL/WKIRxc3YbWE/sNJK8P6Oy95drKZEYVSbnZkH/Ovi; AWSALBCORS=GXRSPsMEiUl29mpI7gwYaHBUjjLYDjQZW4E2iIUQxBQhNf36yV44VOWe0rN4dPXe70QewP9ufkcJD2BrQyL/WKIRxc3YbWE/sNJK8P6Oy95drKZEYVSbnZkH/Ovi; _ga_DY71GQK057=GS1.1.1736953824.3.1.1736955051.0.0.0")
//                .header("Origin", "chrome-extension://ekbbplmjjgoobhdlffmgeokalelnmjjc")
//                .header("Pragma", "no-cache")
//                .header("Sec-Fetch-Dest", "empty")
//                .header("Sec-Fetch-Mode", "cors")
//                .header("Sec-Fetch-Site", "none")
//                .header("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36")
//                .header("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"")
//                .header("sec-ch-ua-mobile", "?0")
//                .header("sec-ch-ua-platform", "\"macOS\"")
//                .build();
//
//        try (Response response = client.newCall(request).execute()) {
//            if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
//            response.body().string();
//        }
//    }
//
//
//    public void me() {
//        import java.io.IOException;
//import okhttp3.OkHttpClient;
//import okhttp3.Request;
//import okhttp3.Response;
//
//        OkHttpClient client = new OkHttpClient();
//
//        Request request = new Request.Builder()
//                .url("https://apitn.openledger.xyz/api/v1/users/me")
//                .header("accept", "application/json, text/plain, */*")
//                .header("accept-language", "zh-CN,zh;q=0.9,en;q=0.8")
//                .header("authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZGRyZXNzIjoiMHgzMmVhZDg0NWRkNGQyY2U0NWQ1ZmFiODFiZDBmOTdjMWI0M2U4OTY0IiwiaWQiOjAsImV4cCI6MTc2ODQ5MjU5NX0.T_gielpE_1CL1GeJXgM3VlQp3pt_HaURu_y5nhbh8yo")
//                .header("cache-control", "no-cache")
//                .header("cookie", "_ga=GA1.1.1498815278.1736778795; _gcl_aw=GCL.1736778795.Cj0KCQiAkJO8BhCGARIsAMkswyjwN4CVnn7Bdd8LgfBi9OORTuZZHLwWEyL92Hv4br4iy7uNAsvWL_saAiJiEALw_wcB; _gcl_gs=2.1.k1$i1736778778$u260728712; __adroll_fpc=8ba35f432065f87026fcc1f91d07ae32-1736778795959; _ga_13BNN0Y51H=GS1.1.1736953043.2.0.1736953043.0.0.0")
//                .header("pragma", "no-cache")
//                .header("priority", "u=1, i")
//                .header("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"")
//                .header("sec-ch-ua-mobile", "?0")
//                .header("sec-ch-ua-platform", "\"macOS\"")
//                .header("sec-fetch-dest", "empty")
//                .header("sec-fetch-mode", "cors")
//                .header("sec-fetch-site", "none")
//                .header("user-agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36")
//                .build();
//
//        try (Response response = client.newCall(request).execute()) {
//            if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
//            response.body().string();
//        }
//        {
//            "status": 200,
//                "data": {
//            "address": "0x32ead845dd4d2ce45d5fab81bd0f97c1b43e8964",
//                    "id": 398731,
//                    "referral_code": "wzfglgfcgu"
//        },
//            "timestamp": "2025-01-15T21:39:01.286856824+05:30"
//        }
//    }
//
//
//    public void rewordReltime() {
//        import java.io.IOException;
//import okhttp3.OkHttpClient;
//import okhttp3.Request;
//import okhttp3.Response;
//
//        OkHttpClient client = new OkHttpClient();
//
//        Request request = new Request.Builder()
//                .url("https://rewardstn.openledger.xyz/api/v1/reward_realtime")
//                .header("accept", "application/json, text/plain, */*")
//                .header("accept-language", "zh-CN,zh;q=0.9,en;q=0.8")
//                .header("authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZGRyZXNzIjoiMHgzMmVhZDg0NWRkNGQyY2U0NWQ1ZmFiODFiZDBmOTdjMWI0M2U4OTY0IiwiaWQiOjAsImV4cCI6MTc2ODQ5MjU5NX0.T_gielpE_1CL1GeJXgM3VlQp3pt_HaURu_y5nhbh8yo")
//                .header("cache-control", "no-cache")
//                .header("cookie", "_ga=GA1.1.1498815278.1736778795; _gcl_aw=GCL.1736778795.Cj0KCQiAkJO8BhCGARIsAMkswyjwN4CVnn7Bdd8LgfBi9OORTuZZHLwWEyL92Hv4br4iy7uNAsvWL_saAiJiEALw_wcB; _gcl_gs=2.1.k1$i1736778778$u260728712; __adroll_fpc=8ba35f432065f87026fcc1f91d07ae32-1736778795959; _ga_13BNN0Y51H=GS1.1.1736953043.2.0.1736953043.0.0.0; connect.sid=s%3AGhIwNh0SrA1AvRqbLYIhH-4kSB6KdkAQ.y4esG%2BouhpfXSzoPTWi7S4gzlWzy8F%2B5931%2F5iXha8c; AWSALB=lijvyLQGt8bJvgyRYeClKV/OQnXIDAg8ASt2qJKD4DRjHBk8AQknKBXYrnBANmOj2nVg0k/MeOM/xmzk+7HhoQb2R70OIFM/evIMBlRfIvLjDd32ouXeUnr5j0HZ")
//                .header("pragma", "no-cache")
//                .header("priority", "u=1, i")
//                .header("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"")
//                .header("sec-ch-ua-mobile", "?0")
//                .header("sec-ch-ua-platform", "\"macOS\"")
//                .header("sec-fetch-dest", "empty")
//                .header("sec-fetch-mode", "cors")
//                .header("sec-fetch-site", "none")
//                .header("user-agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36")
//                .build();
//
//        try (Response response = client.newCall(request).execute()) {
//            if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
//            response.body().string();
//        }
//        {
//            "status": "SUCCESS",
//                "message": null,
//                "data": [
//            {
//                "date": "2025-01-15",
//                    "total_heartbeats": "1497",
//                    "total_scraps": "0",
//                    "total_prompts": "0"
//            }
//    ]
//        }
//    }
//
//
//
//    public void rewordHis() {
//        import java.io.IOException;
//import okhttp3.OkHttpClient;
//import okhttp3.Request;
//import okhttp3.Response;
//
//        OkHttpClient client = new OkHttpClient();
//
//        Request request = new Request.Builder()
//                .url("https://rewardstn.openledger.xyz/api/v1/reward_history")
//                .header("accept", "application/json, text/plain, */*")
//                .header("accept-language", "zh-CN,zh;q=0.9,en;q=0.8")
//                .header("authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZGRyZXNzIjoiMHgzMmVhZDg0NWRkNGQyY2U0NWQ1ZmFiODFiZDBmOTdjMWI0M2U4OTY0IiwiaWQiOjAsImV4cCI6MTc2ODQ5MjU5NX0.T_gielpE_1CL1GeJXgM3VlQp3pt_HaURu_y5nhbh8yo")
//                .header("cache-control", "no-cache")
//                .header("cookie", "_ga=GA1.1.1498815278.1736778795; _gcl_aw=GCL.1736778795.Cj0KCQiAkJO8BhCGARIsAMkswyjwN4CVnn7Bdd8LgfBi9OORTuZZHLwWEyL92Hv4br4iy7uNAsvWL_saAiJiEALw_wcB; _gcl_gs=2.1.k1$i1736778778$u260728712; __adroll_fpc=8ba35f432065f87026fcc1f91d07ae32-1736778795959; _ga_13BNN0Y51H=GS1.1.1736953043.2.0.1736953043.0.0.0; connect.sid=s%3AGhIwNh0SrA1AvRqbLYIhH-4kSB6KdkAQ.y4esG%2BouhpfXSzoPTWi7S4gzlWzy8F%2B5931%2F5iXha8c; AWSALB=ucl6keHuccIqtxDNiaiUFVJfHFyYZmPhKEetgvypoPXhVfD6FTRehdr5xCFDpa9kjMTj7Hw/LQL72y37Z1KiOocstqRK14nMRIEsv+tJdPR+DElVtNRtpq/JJONs")
//                .header("pragma", "no-cache")
//                .header("priority", "u=1, i")
//                .header("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"")
//                .header("sec-ch-ua-mobile", "?0")
//                .header("sec-ch-ua-platform", "\"macOS\"")
//                .header("sec-fetch-dest", "empty")
//                .header("sec-fetch-mode", "cors")
//                .header("sec-fetch-site", "none")
//                .header("user-agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36")
//                .build();
//
//        try (Response response = client.newCall(request).execute()) {
//            if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
//            response.body().string();
//        }
//
//        {
//            "status": "SUCCESS",
//                "message": null,
//                "data": [
//            {
//                "date": "2025-01-15",
//                    "total_points": 50,
//                    "details": [
//                {
//                    "claim_type": 2,
//                        "points": 50
//                }
//            ]
//            },
//            {
//                "date": "2025-01-13",
//                    "total_points": 70,
//                    "details": [
//                {
//                    "claim_type": 2,
//                        "points": 50
//                },
//                {
//                    "claim_type": 5,
//                        "points": 20
//                }
//            ]
//            },
//            {
//                "date": "2025-01-14",
//                    "total_points": 1704,
//                    "details": [
//                {
//                    "claim_type": 2,
//                        "points": 50
//                },
//                {
//                    "claim_type": 3,
//                        "points": 1654
//                }
//            ]
//            }
//    ]
//        }
//    }
//
//
//    public void reword() {
//        import java.io.IOException;
//import okhttp3.OkHttpClient;
//import okhttp3.Request;
//import okhttp3.Response;
//
//        OkHttpClient client = new OkHttpClient();
//
//        Request request = new Request.Builder()
//                .url("https://rewardstn.openledger.xyz/api/v1/reward")
//                .header("accept", "application/json, text/plain, */*")
//                .header("accept-language", "zh-CN,zh;q=0.9,en;q=0.8")
//                .header("authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZGRyZXNzIjoiMHgzMmVhZDg0NWRkNGQyY2U0NWQ1ZmFiODFiZDBmOTdjMWI0M2U4OTY0IiwiaWQiOjAsImV4cCI6MTc2ODQ5MjU5NX0.T_gielpE_1CL1GeJXgM3VlQp3pt_HaURu_y5nhbh8yo")
//                .header("cache-control", "no-cache")
//                .header("cookie", "_ga=GA1.1.1498815278.1736778795; _gcl_aw=GCL.1736778795.Cj0KCQiAkJO8BhCGARIsAMkswyjwN4CVnn7Bdd8LgfBi9OORTuZZHLwWEyL92Hv4br4iy7uNAsvWL_saAiJiEALw_wcB; _gcl_gs=2.1.k1$i1736778778$u260728712; __adroll_fpc=8ba35f432065f87026fcc1f91d07ae32-1736778795959; _ga_13BNN0Y51H=GS1.1.1736953043.2.0.1736953043.0.0.0; connect.sid=s%3AGhIwNh0SrA1AvRqbLYIhH-4kSB6KdkAQ.y4esG%2BouhpfXSzoPTWi7S4gzlWzy8F%2B5931%2F5iXha8c; AWSALB=kJzSrpxtsUgvZRa7xzMiVUXLspZYZROb5VN9ZcVR3+fyvL5wrc3q0JWyL7lpQ3LL5Vn97VzpLbR0QTT01/GZQinvNXt2UCg5r6ruBmnr4nT8WYWMGwU6XvE+H6R5")
//                .header("pragma", "no-cache")
//                .header("priority", "u=1, i")
//                .header("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"")
//                .header("sec-ch-ua-mobile", "?0")
//                .header("sec-ch-ua-platform", "\"macOS\"")
//                .header("sec-fetch-dest", "empty")
//                .header("sec-fetch-mode", "cors")
//                .header("sec-fetch-site", "none")
//                .header("user-agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36")
//                .build();
//
//        try (Response response = client.newCall(request).execute()) {
//            if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
//            response.body().string();
//        }
//
//        {
//            "status": "SUCCESS",
//                "message": null,
//                "data": {
//            "totalPoint": "1824.00",
//                    "point": "1824.00",
//                    "name": "Epoch 1",
//                    "endDate": "2025-01-31"
//        }
//        }
//    }
//
//    public void ws() {
//
//        OkHttpClient client = new OkHttpClient();
//
//        Request request = new Request.Builder()
//                .url("wss://apitn.openledger.xyz/ws/v1/orch?authToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZGRyZXNzIjoiMHgzMmVhZDg0NWRkNGQyY2U0NWQ1ZmFiODFiZDBmOTdjMWI0M2U4OTY0IiwiaWQiOjAsImV4cCI6MTc2ODQ5MjU5NX0.T_gielpE_1CL1GeJXgM3VlQp3pt_HaURu_y5nhbh8yo")
//                .header("Upgrade", "websocket")
//                .header("Origin", "chrome-extension://ekbbplmjjgoobhdlffmgeokalelnmjjc")
//
//                .header("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36")
//
//                .header("Cache-Control", "no-cache")
//                .header("Accept-Language", "zh-CN,zh;q=0.9,en;q=0.8")
//                .header("Pragma", "no-cache")
//                .header("Connection", "Upgrade")
//                .header("Sec-WebSocket-Key", "+NesbIUcRmBqCnqFzamlJw==")
//                .header("Sec-WebSocket-Version", "13")
//                .header("Sec-WebSocket-Extensions", "permessage-deflate; client_max_window_bits")
//                .build();
//
//        try (Response response = client.newCall(request).execute()) {
//            if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);
//            response.body().string();
//        }
//    }
//}
