
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

public class TwitterStreamExample {

    // Twitter API Bearer Token
    private static final String BEARER_TOKEN = "YOUR_BEARER_TOKEN";

    public static void main(String[] args) {
        try {
            // 设置过滤规则，如：从某个用户的推文
            addFilterRule("from:TwitterDev");

            // 监听流式数据
            listenToStream();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // 添加过滤规则，监听某个用户的推文
    private static void addFilterRule(String rule) throws Exception {
        URL url = new URL("https://api.twitter.com/2/tweets/search/stream/rules");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("POST");
        connection.setRequestProperty("Authorization", "Bearer " + BEARER_TOKEN);
        connection.setRequestProperty("Content-Type", "application/json");
        connection.setDoOutput(true);

        String jsonRule = "{\"add\": [{\"value\": \"" + rule + "\"}]}";
        connection.getOutputStream().write(jsonRule.getBytes());

        int responseCode = connection.getResponseCode();
        if (responseCode == 201) {
            System.out.println("规则添加成功");
        } else {
            System.out.println("添加规则失败，响应码：" + responseCode);
        }
    }

    // 监听流式数据
    private static void listenToStream() throws Exception {
        URL url = new URL("https://api.twitter.com/2/tweets/search/stream");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("GET");
        connection.setRequestProperty("Authorization", "Bearer " + BEARER_TOKEN);

        try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {
            String line;
            while ((line = reader.readLine()) != null) {
                System.out.println(line);  // 打印推文的 JSON 数据
            }
        } catch (Exception e) {
            System.err.println("读取流数据时发生错误：" + e.getMessage());
        }
    }
}

public static Schema buildSchema(Map<String, String> columns) {
    Schema.Builder schemaBuilder = Schema.newBuilder();

    for (Map.Entry<String, String> entry : columns.entrySet()) {
        String columnName = entry.getKey();
        String typeName = entry.getValue();

        switch (typeName.toLowerCase()) {
            case "string":
                schemaBuilder.column(columnName, DataTypes.STRING());
                break;
            case "boolean":
                schemaBuilder.column(columnName, DataTypes.BOOLEAN());
                break;
            case "bytes":
                schemaBuilder.column(columnName, DataTypes.BYTES());
                break;
            case "char":
                schemaBuilder.column(columnName, DataTypes.CHAR(1)); // specify length as needed
                break;
            case "varchar":
                schemaBuilder.column(columnName, DataTypes.VARCHAR(255)); // specify length as needed
                break;
            case "int":
                schemaBuilder.column(columnName, DataTypes.INT());
                break;
            case "bigint":
                schemaBuilder.column(columnName, DataTypes.BIGINT());
                break;
            case "float":
                schemaBuilder.column(columnName, DataTypes.FLOAT());
                break;
            case "double":
                schemaBuilder.column(columnName, DataTypes.DOUBLE());
                break;
            case "decimal":
                schemaBuilder.column(columnName, DataTypes.DECIMAL(10, 2)); // specify precision and scale as needed
                break;
            case "date":
                schemaBuilder.column(columnName, DataTypes.DATE());
                break;
            case "time":
                schemaBuilder.column(columnName, DataTypes.TIME());
                break;
            case "timestamp":
                schemaBuilder.column(columnName, DataTypes.TIMESTAMP());
                break;
            case "array":
                schemaBuilder.column(columnName, DataTypes.ARRAY(DataTypes.STRING())); // change inner type as needed
                break;
            case "map":
                schemaBuilder.column(columnName, DataTypes.MAP(DataTypes.STRING(), DataTypes.INT())); // change key/value types as needed
                break;
            case "multiset":
                schemaBuilder.column(columnName, DataTypes.MULTISET(DataTypes.STRING())); // specify the element type
                break;
            case "row":
                schemaBuilder.column(columnName, DataTypes.ROW(DataTypes.FIELD("field1", DataTypes.STRING()))); // example structure
                break;
            case "binary":
                schemaBuilder.column(columnName, DataTypes.BINARY(255)); // specify length as needed
                break;
            case "varbinary":
                schemaBuilder.column(columnName, DataTypes.VARBINARY(255)); // specify length as needed
                break;
            case "interval":
                schemaBuilder.column(columnName, DataTypes.INTERVAL(DataTypes.DAY())); // specify interval type
                break;
            default:
                throw new IllegalArgumentException("Unsupported type: " + typeName);
        }
    }
    return schemaBuilder.build();
}
