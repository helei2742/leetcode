public static Schema buildSchema(Map<String, String> columns) {
    Schema.Builder schemaBuilder = Schema.newBuilder();

    for (Map.Entry<String, String> entry : columns.entrySet()) {
        String columnName = entry.getKey();
        String typeName = entry.getValue();

        switch (typeName.toLowerCase()) {
            case "string":
                schemaBuilder.column(columnName, DataTypes.STRING());
                break;
            case "boolean":
                schemaBuilder.column(columnName, DataTypes.BOOLEAN());
                break;
            case "bytes":
                schemaBuilder.column(columnName, DataTypes.BYTES());
                break;
            case "char":
                schemaBuilder.column(columnName, DataTypes.CHAR(1)); // specify length as needed
                break;
            case "varchar":
                schemaBuilder.column(columnName, DataTypes.VARCHAR(255)); // specify length as needed
                break;
            case "int":
                schemaBuilder.column(columnName, DataTypes.INT());
                break;
            case "bigint":
                schemaBuilder.column(columnName, DataTypes.BIGINT());
                break;
            case "float":
                schemaBuilder.column(columnName, DataTypes.FLOAT());
                break;
            case "double":
                schemaBuilder.column(columnName, DataTypes.DOUBLE());
                break;
            case "decimal":
                schemaBuilder.column(columnName, DataTypes.DECIMAL(10, 2)); // specify precision and scale as needed
                break;
            case "date":
                schemaBuilder.column(columnName, DataTypes.DATE());
                break;
            case "time":
                schemaBuilder.column(columnName, DataTypes.TIME());
                break;
            case "timestamp":
                schemaBuilder.column(columnName, DataTypes.TIMESTAMP());
                break;
            case "array":
                schemaBuilder.column(columnName, DataTypes.ARRAY(DataTypes.STRING())); // change inner type as needed
                break;
            case "map":
                schemaBuilder.column(columnName, DataTypes.MAP(DataTypes.STRING(), DataTypes.INT())); // change key/value types as needed
                break;
            case "multiset":
                schemaBuilder.column(columnName, DataTypes.MULTISET(DataTypes.STRING())); // specify the element type
                break;
            case "row":
                schemaBuilder.column(columnName, DataTypes.ROW(DataTypes.FIELD("field1", DataTypes.STRING()))); // example structure
                break;
            case "binary":
                schemaBuilder.column(columnName, DataTypes.BINARY(255)); // specify length as needed
                break;
            case "varbinary":
                schemaBuilder.column(columnName, DataTypes.VARBINARY(255)); // specify length as needed
                break;
            case "interval":
                schemaBuilder.column(columnName, DataTypes.INTERVAL(DataTypes.DAY())); // specify interval type
                break;
            default:
                throw new IllegalArgumentException("Unsupported type: " + typeName);
        }
    }
    return schemaBuilder.build();
}
