package cn.com.vortexa.control.dto;


import cn.com.vortexa.common.dto.control.RegisteredService;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;

/**
 * @author helei
 * @since 2025-03-12
 */
@Data
@AllArgsConstructor
@NoArgsConstructor
public class ServiceInstanceVO {
    private List<RegisteredService> instances;
}
package cn.com.vortexa.control;

import cn.com.vortexa.control.config.ScriptAgentConfig;
import cn.com.vortexa.control.constant.*;
import cn.com.vortexa.control.dto.RemoteControlServerStatus;
import cn.com.vortexa.control.dto.RemotingCommand;
import cn.com.vortexa.common.dto.control.ServiceInstance;
import cn.com.vortexa.control.exception.CustomCommandException;
import cn.com.vortexa.control.handler.CustomRequestHandler;
import cn.com.vortexa.control.processor.CustomCommandProcessor;
import cn.com.vortexa.control.processor.ScriptAgentProcessorAdaptor;
import cn.com.vortexa.control.protocol.Serializer;
import cn.com.vortexa.control.service.ScriptAgentMetricsUploadService;
import cn.com.vortexa.control.util.DistributeIdMaker;
import cn.com.vortexa.control.util.RemotingCommandDecoder;
import cn.com.vortexa.control.util.RemotingCommandEncoder;
import cn.com.vortexa.websocket.netty.base.AbstractWebsocketClient;
import cn.com.vortexa.websocket.netty.constants.NettyConstants;
import cn.hutool.core.util.StrUtil;
import io.netty.channel.*;
import io.netty.handler.codec.LengthFieldBasedFrameDecoder;
import io.netty.handler.codec.LengthFieldPrepender;
import io.netty.handler.timeout.IdleStateHandler;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;

import java.util.function.Consumer;
import java.util.function.Supplier;

/**
 * @author helei
 * @since 2025-03-13
 */
@Slf4j
@Getter
public class ScriptAgent extends AbstractWebsocketClient<RemotingCommand> {

    private final ScriptAgentConfig clientConfig;  // 配置
    private final ServiceInstance serviceInstance;
    private final RemoteControlServerStatus remoteStatus; // 远程服务命名中心状态
    private final CustomCommandProcessor customCommandProcessor;    // 自定义命令处理器
    private final ScriptAgentMetricsUploadService metricsUploadService; // 指标上传服务

    @Setter
    private Supplier<Object> registryBodySetter = null; // 注册时的body
    @Setter
    private Consumer<RemotingCommand> afterRegistryHandler = null;  // 注册成功后回调

    public ScriptAgent(ScriptAgentConfig clientConfig) {
        this(clientConfig, new ScriptAgentProcessorAdaptor(clientConfig));
    }

    public ScriptAgent(ScriptAgentConfig clientConfig, ScriptAgentProcessorAdaptor scriptAgentProcessorAdaptor) {
        super(clientConfig.getRegistryCenterUrl(), clientConfig.getServiceInstance().toString(),
            scriptAgentProcessorAdaptor);
        super.setHandshake(false);
        this.clientConfig = clientConfig;
        this.serviceInstance = clientConfig.getServiceInstance();
        super.setName(this.serviceInstance.toString());
        this.remoteStatus = new RemoteControlServerStatus();
        this.customCommandProcessor = new CustomCommandProcessor();

        this.metricsUploadService = new ScriptAgentMetricsUploadService(this, this.getCallbackInvoker());
        ((ScriptAgentProcessorAdaptor) getHandler()).setScriptAgent(this);
    }

    @Override
    protected void afterBoostrapConnected(Channel channel) {
        // 每次连接成功，都发送注册消息
        channel.attr(NettyConstants.CLIENT_NAME).set(getName());
        sendRegistryCommand();
    }

    @Override
    public void addPipeline(ChannelPipeline p) {
        p.addLast(new IdleStateHandler(0,
            0, clientConfig.getServiceOfflineTtl()));

        p.addLast(new LengthFieldBasedFrameDecoder(NameserverSystemConstants.MAX_FRAME_LENGTH,
            0, 4, 0, 4));
        p.addLast(new LengthFieldPrepender(4));

        p.addLast(new RemotingCommandDecoder());
        p.addLast(new RemotingCommandEncoder());
        p.addLast(getHandler());
    }

    @Override
    protected void doSendMessage(RemotingCommand message, boolean b) {
        log.debug("send message to nameserver: {}", message);

        ServiceInstance serviceInstance = clientConfig.getServiceInstance();

        if (b && StrUtil.isBlank(message.getTransactionId())) {
            message.setTransactionId(nextTxId());
        }

        message.setGroup(serviceInstance.getGroup());
        message.setServiceId(serviceInstance.getServiceId());
        message.setClientId(serviceInstance.getInstanceId());

        Channel channel;
        if ((channel = getChannel()) != null) {
            channel.writeAndFlush(message);
        } else {
            throw new RuntimeException("channel is null");
        }
    }

    /**
     * 发送服务注册命令
     */
    public void sendRegistryCommand() {
        RemotingCommand remotingCommand = buildRequestCommand(RemotingCommandFlagConstants.CLIENT_REGISTRY_SERVICE);
        Object body = null;
        if (registryBodySetter != null) {
            body = registryBodySetter.get();
        }
        remotingCommand.setBodyFromObject(body);

        sendRequest(remotingCommand).whenComplete((response, throwable) -> {
            if (throwable != null) {
                log.error("{} -> [{}] channel active error",
                    clientConfig.getServiceInstance(), clientConfig.getRegistryCenterUrl(), throwable);
            }

            // 注册成功
            if (response.getCode() == RemotingCommandCodeConstants.SUCCESS) {
                log.info("{} client registry success", clientConfig.getServiceInstance());
                if (afterRegistryHandler != null) {
                    afterRegistryHandler.accept(response);
                }

                ServiceInstance nameserviceInstance = Serializer.Algorithm.Protostuff
                    .deserialize(response.getBody(), ServiceInstance.class);

                remoteStatus.setNameserverInstance(nameserviceInstance);
            } else {
                // 注册失败
                log.error("{} client registry failed, response: {}", clientConfig.getServiceInstance(), response);
                close();
            }

            remoteStatus.setLastUpdateTimestamp(System.currentTimeMillis());
            remoteStatus.setNameserverState(NameserverState.valueOf(
                response.getExtFieldsValue(ExtFieldsConstants.NAMESERVER_STATUS)
            ));
        });
    }

    /**
     * 添加自定义命令处理器
     *
     * @param commandFlag commandFlag 命令标识
     * @param customRequestHandler customRequestHandler    处理器
     */
    public void addCustomCommandHandler(String commandFlag, CustomRequestHandler customRequestHandler)
        throws CustomCommandException {
        customCommandProcessor.addCustomCommandHandler(commandFlag, customRequestHandler);
    }

    /**
     * 处理自定义请求
     *
     * @param remotingCommand request
     * @return response
     */
    public RemotingCommand tryResolveCustomRequest(RemotingCommand remotingCommand) {
        RemotingCommand response = null;
        try {
            response = customCommandProcessor.tryInvokeCustomCommandHandler(getChannel(), remotingCommand);
        } catch (Exception e) {
            log.error("custom request[{}] execute error, ", remotingCommand, e);
            response = new RemotingCommand();
            response.setTransactionId(remotingCommand.getTransactionId());
            response.setCode(RemotingCommandCodeConstants.FAIL);
            response.setBody(
                Serializer.Algorithm.Protostuff.serialize(e)
            );
        }
        return response;
    }

    /**
     * 构建命令
     *
     * @param commandFlag commandFlag
     * @return RemotingCommand
     */
    public RemotingCommand buildRequestCommand(int commandFlag) {
        RemotingCommand command = new RemotingCommand();
        command.setGroup(serviceInstance.getGroup());
        command.setServiceId(serviceInstance.getServiceId());
        command.setClientId(serviceInstance.getInstanceId());
        command.setTransactionId(nextTxId());

        command.setFlag(commandFlag);
        return command;
    }

    /**
     * 获取下一个事务id
     *
     * @return String
     */
    public String nextTxId() {
        return DistributeIdMaker.DEFAULT.nextId(getName());
    }
}
package cn.com.vortexa.control.processor;

import cn.com.vortexa.control.constant.RemotingCommandCodeConstants;
import cn.com.vortexa.control.constant.RemotingCommandFlagConstants;
import cn.com.vortexa.common.dto.control.RegisteredService;
import cn.com.vortexa.control.dto.RemotingCommand;
import cn.com.vortexa.control.dto.ServiceInstanceVO;
import cn.com.vortexa.control.service.IRegistryService;
import cn.com.vortexa.websocket.netty.util.ProtostuffUtils;
import io.netty.channel.Channel;
import lombok.extern.slf4j.Slf4j;

import java.util.List;

/**
 * @author helei
 * @since 2025-03-12
 */
@Slf4j
public class ServiceDiscoverProcessor {

    private final IRegistryService registryService;

    public ServiceDiscoverProcessor(IRegistryService registryService) {
        this.registryService = registryService;
    }

    /**
     * 处理服务发现请求
     *
     * @param channel         channel
     * @param remotingCommand remotingCommand
     * @return RemotingCommand
     */
    public RemotingCommand handlerDiscoverService(Channel channel, RemotingCommand remotingCommand) {
        String group = remotingCommand.getGroup();
        String serviceId = remotingCommand.getServiceId();
        String clientId = remotingCommand.getClientId();


        List<RegisteredService> services = discoverServiceList(group, clientId, serviceId);

        RemotingCommand response = new RemotingCommand();
        response.setFlag(RemotingCommandFlagConstants.CLIENT_DISCOVER_SERVICE_RESPONSE);
        response.setCode(RemotingCommandCodeConstants.SUCCESS);
        response.setBody(ProtostuffUtils.serialize(new ServiceInstanceVO(services)));
        return response;
    }

    /**
     * 查询服务列表
     *
     * @param group     group
     * @param serviceId serviceId
     * @param clientId  clientId
     * @return List<RegisteredService>
     */
    public List<RegisteredService> discoverServiceList(
            String group,
            String serviceId,
            String clientId
    ) {
        List<RegisteredService> serviceInstances = registryService.queryServiceInstance(group, serviceId, clientId);
        log.debug("[{}]-[{}]-[{}] discover service total [{}]", group, serviceId, clientId, serviceInstances.size());
        // TODO 根据策略宣泄

        return serviceInstances;
    }
}
package cn.com.vortexa.control.processor;

import cn.com.vortexa.control.constant.ExtFieldsConstants;
import cn.com.vortexa.control.constant.RegistryState;
import cn.com.vortexa.control.constant.RemotingCommandCodeConstants;
import cn.com.vortexa.control.constant.RemotingCommandFlagConstants;
import cn.com.vortexa.control.dto.RemotingCommand;
import cn.com.vortexa.common.dto.control.ServiceInstance;
import cn.com.vortexa.control.service.IRegistryService;
import io.netty.channel.Channel;
import lombok.extern.slf4j.Slf4j;

import java.util.HashMap;
import java.util.Map;

/**
 * @author helei
 * @since 2025-03-12
 */
@Slf4j
public class ServiceRegistryProcessor {

    private final IRegistryService registryService;

    public ServiceRegistryProcessor(IRegistryService registryService) {
        this.registryService = registryService;
    }

    /**
     * 注册客户端服务
     *
     * @param channel channel
     * @param remotingCommand remotingCommand
     * @return CompletableFuture<RegistryState>
     */
    public RemotingCommand handlerClientServiceRegistry(
            Channel channel,
            RemotingCommand remotingCommand
    ) {
        // Step 1 解析获取参数
        String group = remotingCommand.getGroup();
        String serviceId = remotingCommand.getServiceId();
        String clientId = remotingCommand.getClientId();

        String[] serviceAddress = channel.remoteAddress().toString().split(":");

        ServiceInstance serviceInstance = ServiceInstance.builder()
                .group(group)
                .serviceId(serviceId)
                .instanceId(clientId)
                .host(serviceAddress[0])
                .port(Integer.parseInt(serviceAddress[1]))
                .build();

        Map<Object, Object> serviceProps = null;
        if (remotingCommand.getBody() != null && remotingCommand.getBody().length > 0) {
            try {
                serviceProps = remotingCommand.getObjBodY(HashMap.class);
            } catch (Exception e) {
                log.warn("get service props from remoting command error, {}", e.getMessage());
            }
        }

        // Step 2 注册服务实例
        RemotingCommand response = new RemotingCommand();
        response.setFlag(RemotingCommandFlagConstants.CLIENT_REGISTRY_SERVICE_RESPONSE);
        response.setTransactionId(remotingCommand.getTransactionId());
        RegistryState registryState;

        try {
            registryState = registryService.registryService(serviceInstance, serviceProps);

            if (registryState == RegistryState.OK) {
                response.setCode(RemotingCommandCodeConstants.SUCCESS);
            } else {
                response.setCode(RemotingCommandCodeConstants.FAIL);
            }

            log.info("client[{}] registry state [{}]", serviceInstance, registryState);
        } catch (Exception e) {
            log.error("[{}]-[{}] registry error", group, serviceId, e);
            registryState = RegistryState.UNKNOWN_ERROR;
            response.setCode(RemotingCommandCodeConstants.FAIL);
        }

        // Step 3 添加注册状态
        response.addExtField(ExtFieldsConstants.NAMESERVER_REGISTRY_STATUS, registryState.name());
        return response;
    }
}
package cn.com.vortexa.control.service.impl;

import cn.com.vortexa.control.constant.RegistryState;
import cn.com.vortexa.common.dto.control.RegisteredService;
import cn.com.vortexa.common.dto.control.ServiceInstance;
import cn.com.vortexa.control.service.IRegistryService;
import cn.com.vortexa.control.util.NameserverUtil;
import cn.hutool.core.util.BooleanUtil;
import cn.hutool.core.util.StrUtil;

import com.alibaba.fastjson.JSONObject;

import lombok.Setter;
import lombok.extern.slf4j.Slf4j;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * @author helei
 * @since 2025-03-17
 */
@Slf4j
public class FileRegistryService implements IRegistryService {

    private static final String FILE_NAME = "nameserver-registry.dat";
    private final ConcurrentHashMap<String, RegisteredService> registryServiceMap = new ConcurrentHashMap<>();
    private final AtomicBoolean updated = new AtomicBoolean(false);
    @Setter
    private int saveIntervalSecond = 60;
    private boolean running = true;

    public FileRegistryService(ExecutorService executorService) {
        executorService.execute(()->{
            while (running) {
                try {
                    saveRegistryInfo();

                    TimeUnit.SECONDS.sleep(saveIntervalSecond);
                } catch (IOException e) {
                    throw new RuntimeException(e);
                } catch (InterruptedException e) {
                    log.warn("registry file auto store task interrupted", e);
                    running = false;
                }
            }
        });
    }

    @Override
    public RegistryState registryService(ServiceInstance serviceInstance, Map<Object, Object> props) {
        String group = serviceInstance.getGroup();
        String serviceId = serviceInstance.getServiceId();
        String clientId = serviceInstance.getInstanceId();

        if (StrUtil.isBlank(group) && StrUtil.isBlank(serviceId) && StrUtil.isBlank(clientId)) {
            return RegistryState.PARAM_ERROR;
        }

        try {
            String key = NameserverUtil.generateServiceInstanceKey(group, serviceId, clientId);

            // 存内存
            registryServiceMap.put(key, new RegisteredService(serviceInstance, props));
            updated.set(true);

            // 存磁盘
            Boolean b = null;
            try {
                b = saveRegistryInfo();
                return BooleanUtil.isTrue(b) ? RegistryState.OK : RegistryState.STORE_ERROR;
            } catch (Exception e) {
                log.error("store registry error", e);
                return RegistryState.STORE_ERROR;
            }
        } catch (Exception e) {
            log.error("registry config error", e);
            return RegistryState.UNKNOWN_ERROR;
        }
    }

    @Override
    public Boolean saveRegistryInfo() throws IOException {
        if (updated.compareAndSet(true, false)) {
            log.info("start save registry info - [{}]", registryServiceMap.keySet());

            Path path = Paths.get(NameserverUtil.getStoreFileResourcePath(FILE_NAME));
            if (!Files.exists(path.getParent())) {
                Files.createDirectories(path.getParent());
            }

            try (BufferedWriter bw = new BufferedWriter(new FileWriter(path.toFile()))) {
                bw.write(JSONObject.toJSONString(registryServiceMap));
                bw.flush();
                return true;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        } else {
            log.debug("no update cancel save registry info to file");
            return true;
        }
    }

    @Override
    public List<RegisteredService> queryServiceInstance(String keyPattern) {
        Pattern compile = Pattern.compile(keyPattern);

        return registryServiceMap.keySet().stream().filter(key -> {
            Matcher matcher = compile.matcher(key);
            return matcher.find();
        }).map(registryServiceMap::get).toList();
    }

    @Override
    public List<RegisteredService> queryServiceInstance(
            String groupId,
            String serviceId,
            String clientId
    ) {
        String keyPattern = NameserverUtil.generateServiceInstanceKey(
                StrUtil.isBlank(groupId) ? "*" : groupId,
                StrUtil.isBlank(serviceId) ? "*" : serviceId,
                StrUtil.isBlank(clientId) ? "*" : clientId
        );

        return queryServiceInstance(keyPattern);
    }

    @Override
    public boolean existServiceInstance(String key) {
        return registryServiceMap.containsKey(key);
    }
}
package cn.com.vortexa.control.service.impl;

import cn.com.vortexa.control.dto.ConnectEntry;
import cn.com.vortexa.control.service.IConnectionService;
import cn.com.vortexa.control.util.NameserverUtil;
import cn.com.vortexa.websocket.netty.constants.NettyConstants;
import io.netty.channel.Channel;
import lombok.extern.slf4j.Slf4j;

import org.apache.commons.lang3.BooleanUtils;

import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

/**
 * @author helei
 * @since 2025/3/18 15:03
 */
@Slf4j
public class MemoryConnectionService implements IConnectionService {

    private final ConcurrentMap<String, ConnectEntry> connectionMap = new ConcurrentHashMap<>();

    @Override
    public void addServiceChannel(String key, Channel channel) {
        connectionMap.compute(key, (k,v)->{
            if (v == null) {
                channel.attr(NettyConstants.CLIENT_NAME).set(key);
                v = ConnectEntry.builder()
                        .channel(channel)
                        .build();
            }

            v.setUsable(true);
            v.setLastActiveTimestamp(System.currentTimeMillis());
            return v;
        });
    }

    @Override
    public void addServiceChannel(String group, String serviceId, String instanceId, Channel channel) {
        String key = NameserverUtil.generateServiceInstanceKey(
                group,
                serviceId,
                instanceId
        );
        addServiceChannel(key, channel);
    }

    @Override
    public void closeServiceChannel(Channel channel, String key) {
        ConnectEntry remove = connectionMap.remove(key);
        if (remove != null) {
            remove.close();
        }
        if (channel != null && channel.isActive()) {
            channel.close();
        }
        log.debug("close service instance [{}] channel", key);
    }

    @Override
    public ConnectEntry getServiceInstanceChannel(String key) {
        return connectionMap.get(key);
    }

    @Override
    public void freshServiceInstanceConnection(String key, Channel channel) {
        addServiceChannel(key, channel);
    }

    @Override
    public List<String> queryOnlineInstanceKey() {
        return connectionMap.entrySet().stream()
            .filter(entry -> BooleanUtils.isTrue(entry.getValue().isUsable()))
            .map(Map.Entry::getKey)
            .toList();
    }
}
package cn.com.vortexa.control.service;

import cn.com.vortexa.control.dto.ConnectEntry;
import io.netty.channel.Channel;

import java.util.List;

/**
 * @author helei
 * @since 2025/3/18 15:02
 */
public interface IConnectionService {

    /**
     * 添加服务连接
     *
     * @param key     key
     * @param channel channel
     */
    void addServiceChannel(String key, Channel channel);

    /**
     * 添加服务连接
     *
     * @param group      group
     * @param serviceId  serviceId
     * @param instanceId instanceId
     * @param channel    channel
     */
    void addServiceChannel(String group, String serviceId, String instanceId, Channel channel);

    /**
     * 关闭服务连接
     *
     * @param channel channel
     * @param key     key
     */
    void closeServiceChannel(Channel channel, String key);

    /**
     * 获取连接
     *
     * @param key key
     * @return ConnectEntry
     */
    ConnectEntry getServiceInstanceChannel(String key);

    /**
     * 刷新服务实例连接
     *
     * @param key     key
     * @param channel channel
     */
    void freshServiceInstanceConnection(String key, Channel channel);

    List<String> queryOnlineInstanceKey();
}
package cn.com.vortexa.control.service;

import cn.com.vortexa.control.constant.RegistryState;
import cn.com.vortexa.common.dto.control.RegisteredService;
import cn.com.vortexa.common.dto.control.ServiceInstance;

import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * @author helei
 * @since 2025-03-17
 */
public interface IRegistryService {

    /**
     * 注册服务
     *
     * @param serviceInstance serviceInstance
     * @return 注册状态
     */
    RegistryState registryService(ServiceInstance serviceInstance, Map<Object, Object> props);

    /**
     * 保存注册信息
     *
     * @return Boolean
     */
    Boolean saveRegistryInfo() throws IOException;

    /**
     * 查找服务实例
     *
     * @param keyPattern keyPattern
     * @return List<ServiceInstance>
     */
    List<RegisteredService> queryServiceInstance(
        String keyPattern
    );

    /**
     * 查找服务实例
     *
     * @param groupId groupId
     * @param serviceId serviceId
     * @param clientId clientId
     * @return List<ServiceInstance>
     */
    List<RegisteredService> queryServiceInstance(
            String groupId,
            String serviceId,
            String clientId
    );

    /**
     * 是否存在已注册的实例
     *
     * @param key key
     * @return  boolean
     */
    boolean existServiceInstance(String key);
}
package cn.com.vortexa.control;

import cn.com.vortexa.common.util.NamedThreadFactory;
import cn.com.vortexa.control.config.ControlServerConfig;
import cn.com.vortexa.control.constant.NameserverState;
import cn.com.vortexa.control.constant.NameserverSystemConstants;
import cn.com.vortexa.control.constant.RemotingCommandCodeConstants;
import cn.com.vortexa.control.constant.RemotingCommandFlagConstants;
import cn.com.vortexa.control.dto.ConnectEntry;
import cn.com.vortexa.control.dto.RemotingCommand;
import cn.com.vortexa.control.dto.RPCResultWrapper;
import cn.com.vortexa.control.exception.CustomCommandException;
import cn.com.vortexa.control.exception.ControlServerException;
import cn.com.vortexa.control.handler.CustomRequestHandler;
import cn.com.vortexa.control.processor.ControlServerProcessorAdaptor;
import cn.com.vortexa.control.protocol.Serializer;
import cn.com.vortexa.control.service.IConnectionService;
import cn.com.vortexa.control.service.IMetricsService;
import cn.com.vortexa.control.service.IRegistryService;
import cn.com.vortexa.control.processor.CustomCommandProcessor;
import cn.com.vortexa.control.service.impl.InfluxDBMetricsService;
import cn.com.vortexa.control.util.DistributeIdMaker;
import cn.com.vortexa.control.util.NameserverUtil;
import cn.com.vortexa.control.util.RemotingCommandDecoder;
import cn.com.vortexa.control.util.RemotingCommandEncoder;
import cn.com.vortexa.websocket.netty.constants.NettyConstants;
import io.netty.bootstrap.ServerBootstrap;
import io.netty.channel.*;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.nio.NioServerSocketChannel;
import io.netty.channel.socket.nio.NioSocketChannel;
import io.netty.handler.codec.LengthFieldBasedFrameDecoder;
import io.netty.handler.codec.LengthFieldPrepender;
import io.netty.handler.timeout.IdleStateHandler;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;

import static cn.com.vortexa.control.constant.NameserverState.*;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicReference;

@Slf4j
@Getter
public class BotControlServer {
    private final ControlServerConfig controlServerConfig;    // nameServerConfig
    private final CustomCommandProcessor customCommandProcessor;   // 自定义命令处理服务
    private final ExecutorService executorService;
    private final long startTime;   //启动时间

    private volatile NameserverState state; // name server state
    private ServerBootstrap serverBootstrap;    //serverBootstrap
    private ChannelFuture nameserverChannelFuture;  //nameserverChannelFuture

    private ControlServerProcessorAdaptor processorAdaptor;  // 消息处理器
    private IRegistryService registryService;   // 注册服务
    private IConnectionService connectionService;   // 连接服务
    private IMetricsService metricsService; // 指标服务

    public BotControlServer(ControlServerConfig controlServerConfig) throws ControlServerException {
        this(controlServerConfig, Executors.newThreadPerTaskExecutor(
                new NamedThreadFactory(controlServerConfig.getServiceInstance().toString())
        ));
    }

    public BotControlServer(
            ControlServerConfig controlServerConfig,
            ExecutorService executorService
    ) throws ControlServerException {
        this.controlServerConfig = controlServerConfig;
        updateNameServerState(JUST_START);
        this.startTime = System.currentTimeMillis();
        this.executorService = executorService;

        this.customCommandProcessor = new CustomCommandProcessor();
    }

    /**
     * 初始化
     *
     * @param registryService registryService
     */
    public void init(
            IRegistryService registryService,
            IConnectionService connectionService
    ) throws ControlServerException {
        this.registryService = registryService;
        this.connectionService = connectionService;
        this.processorAdaptor = new ControlServerProcessorAdaptor(
                this,
                registryService
        );
        this.metricsService = new InfluxDBMetricsService();

        serverBootstrap = new ServerBootstrap()
                .group(new NioEventLoopGroup(controlServerConfig.getNioThreadCount()), new NioEventLoopGroup())
                .channel(NioServerSocketChannel.class)
                .option(ChannelOption.SO_BACKLOG, 1024)
                .option(ChannelOption.SO_REUSEADDR, true)
                .childOption(ChannelOption.SO_KEEPALIVE, false)
                .childOption(ChannelOption.TCP_NODELAY, true)
                .childOption(ChannelOption.SO_SNDBUF, 65535)
                .childOption(ChannelOption.SO_RCVBUF, 65535)
                .childHandler(new ChannelInitializer<NioSocketChannel>() {
                    @Override
                    protected void initChannel(NioSocketChannel ch) throws Exception {
                        ch.pipeline().addLast(new IdleStateHandler(
                                0, 0, controlServerConfig.getServiceOfflineTtl()));

                        ch.pipeline().addLast(new LengthFieldBasedFrameDecoder(
                                NameserverSystemConstants.MAX_FRAME_LENGTH, 0,
                                4, 0, 4));

                        ch.pipeline().addLast(new LengthFieldPrepender(4));

                        ch.pipeline().addLast(new RemotingCommandDecoder());
                        ch.pipeline().addLast(new RemotingCommandEncoder());
                        ch.pipeline().addLast(processorAdaptor);
                    }
                });

        updateNameServerState(INIT_FINISH);
    }

    /**
     * 启动
     *
     * @throws ControlServerException NameserverStartException
     */
    public ChannelFuture start() throws ControlServerException {
        log.info("start nameserver [{}], configuration:\n {}",
                controlServerConfig.getServiceInstance(), controlServerConfig);

        try {
            nameserverChannelFuture = serverBootstrap.bind(
                    controlServerConfig.getServiceInstance().getHost(),
                    controlServerConfig.getServiceInstance().getPort()
            );

            nameserverChannelFuture.addListener(new ChannelFutureListener() {
                @Override
                public void operationComplete(ChannelFuture channelFuture) throws Exception {
                    updateNameServerState(RUNNING);
                }
            });

            return nameserverChannelFuture;
        } catch (Exception e) {
            updateNameServerState(SHUT_DOWN);
            throw new ControlServerException("start error", e);
        }
    }

    /**
     * 添加自定义命令处理器
     *
     * @param commandKey           commandKey 命令标识
     * @param customRequestHandler customRequestHandler    处理器
     */
    public void addCustomCommandHandler(String commandKey, CustomRequestHandler customRequestHandler)
            throws CustomCommandException {
        customCommandProcessor.addCustomCommandHandler(commandKey, customRequestHandler);
    }

    /**
     * 调用自定义命令handler
     *
     * @param channel channel
     * @param request request
     * @return response
     */
    public RemotingCommand tryInvokeCustomCommand(Channel channel, RemotingCommand request) {
        RemotingCommand response = null;

        try {
            // Step 1 校验是否注册服务
            String key = channel.attr(NettyConstants.CLIENT_NAME).get();

            if (!registryService.existServiceInstance(key)) {
                log.debug("channel[{}] didn't registry, drop request [{}]", key, request);
                closeChannel(channel);
                return null;
            }

            // Step 2 运行自定义命令
            response = customCommandProcessor.tryInvokeCustomCommandHandler(channel, request);

            if (response.getTransactionId() == null) {
                response.setTransactionId(request.getTransactionId());
            }
        } catch (Exception e) {
            log.error("client custom command[{}] execute error", request, e);

            response = new RemotingCommand();
            response.setTransactionId(request.getTransactionId());
            response.setFlag(RemotingCommandFlagConstants.CUSTOM_COMMAND_RESPONSE);
            response.setCode(RemotingCommandCodeConstants.FAIL);
            response.setBody(Serializer.Algorithm.JDK.serialize(new RPCResultWrapper<>(null, e)));
        }

        return response;
    }

    /**
     * 给服务实例发送命令
     *
     * @param group           group
     * @param serviceId       serviceId
     * @param instanceId      instanceId
     * @param remotingCommand remotingCommand
     * @return CompletableFuture<RemotingCommand>
     */
    public CompletableFuture<RemotingCommand> sendCommandToServiceInstance(
            String group,
            String serviceId,
            String instanceId,
            RemotingCommand remotingCommand
    ) {
        // Step 1 获取连接
        String key = NameserverUtil.generateServiceInstanceKey(group, serviceId, instanceId);
        ConnectEntry connectEntry = connectionService.getServiceInstanceChannel(key);

        if (connectEntry == null || !connectEntry.isUsable()) {
            log.error("[{}] channel is unusable", key);
            return CompletableFuture.completedFuture(null);
        }

        return CompletableFuture.supplyAsync(() -> {
            try {
                CountDownLatch latch = new CountDownLatch(1);
                AtomicReference<RemotingCommand> result = new AtomicReference<>();

                // Step 2 注册请求
                boolean registry = processorAdaptor.registryRequest(remotingCommand, response -> {
                    result.set(response);
                    latch.countDown();
                });

                if (registry) {
                    connectEntry.getChannel().writeAndFlush(remotingCommand);
                }

                latch.await();
                return result.get();
            } catch (InterruptedException e) {
                throw new RuntimeException("send command %s error".formatted(remotingCommand), e);
            }
        }, executorService);
    }

    /**
     * 关闭连接某客户端的channel连接
     *
     * @param channel channel
     */
    public void closeChannel(Channel channel) {
        if (channel == null) {
            return;
        }

        String key = channel.attr(NettyConstants.CLIENT_NAME).get();

        if (registryService.existServiceInstance(key)) {
            connectionService.closeServiceChannel(channel, key);
        } else if (channel.isActive()) {
            channel.close();
        }
    }

    public String nextTxId() {
        return DistributeIdMaker.DEFAULT.nextId(controlServerConfig.getServiceInstance().toString());
    }

    /**
     * 更新状态
     *
     * @param newState newState
     * @throws ControlServerException NameserverException
     */
    private void updateNameServerState(NameserverState newState) throws ControlServerException {
        synchronized (this) {
            boolean isUpdate = switch (newState) {
                case JUST_START: {
                    yield state == null || state == JUST_START;
                }
                case INIT_FINISH:
                    yield state == JUST_START || state == INIT_FINISH;
                case RUNNING:
                    yield state == INIT_FINISH;
                case SHUT_DOWN:
                    yield state != SHUT_DOWN;
            };

            if (isUpdate) {
                log.info("nameserver[{}] status updated [{}]->[{}]", controlServerConfig.getServiceInstance(), state,
                        newState);
                state = newState;
            } else {
                throw new ControlServerException("state cannot from [%s] to [%s]".formatted(state, newState));
            }
        }
    }
}
