package com.helei.solanarpc.constants;

public enum SolanaCommitment {

    /**
     * 进行中
     */
    processed,
    /**
     * 已确认
     */
    confirmed,
    /**
     * 已完成
     */
    finalized
}


package com.helei.solanarpc.constants;


public enum SolanaHttpRequestType {

    /**
     * 查询账号信息
     */
    getAccountInfo,
    /**
     * 查询账号余额
     */
    getBalance,
    /**
     * 查询区块数据
     */
    getBlock,
    /**
     * 查询区块高度
     */
    getBlockHeight,
    /**
     * 查询区块生产信息
     */
    getBlockProduction,
    /**
     * 查询区块提交信息
     */
    getBlockCommitment,
    /**
     * 查询区块集
     */
    getBlocks,
    /**
     * 查询指定区间内的区块
     */
    getBlocksWithLimit,
    /**
     * 查询区块时间
     */
    getBlockTime,
    /**
     * 查询集群节点
     */
    getClusterNodes,
    /**
     * 查询周期信息
     */
    getEpochInfo,
    /**
     * 查询周期计划
     */
    getEpochSchedule,
    /**
     * 查询指定区块的费率计算器
     */
    getFeeCalculatorForBlockhash,
    /**
     * 查询费率治理人
     */
    getFeeRateGovernor,
    /**
     * 查询费率
     */
    getFees,
    /**
     * 查询第一个有效区块
     */
    getFirstAvailableBlock,
    /**
     * 查询创世哈希
     */
    getGenesisHash,
    /**
     * 查询健康状态
     */
    getHealth,
    /**
     * 查询实体标识
     */
    getIdentity,
    /**
     * 查询通胀治理人
     */
    getInflationGovernor,
    /**
     * 查询通胀率
     */
    getInflationRate,
    /**
     * 查询通胀奖励
     */
    getInflationReward,
    /**
     * 查询最大账号
     */
    getLargestAccounts,
    /**
     * 查询主导人计划表
     */
    getLeaderSchedule,
    /**
     * 查询最大重发槽位
     */
    getMaxRetransmitSlot,
    /**
     * 查询最大插入槽位
     */
    getMaxShredInsertSlot,
    /**
     * 查询可豁免租金的最小余额
     */
    getMinimumBalanceForRentExemption,
    /**
     * 查询多个账号
     */
    getMultipleAccounts,
    /**
     * 查询程序账号
     */
    getProgramAccounts,
    /**
     * 查询最近的区块哈希
     */
    getLatestBlockhash,
    /**
     * 查询最近的性能样本
     */
    getRecentPerformanceSamples,
    /**
     * 获取快照槽位
     */
    getSnapshotSlot,
    /**
     * 获取地址签名
     */
    getSignaturesForAddress,
    /**
     * 获取签名状态
     */
    getSignatureStatuses,
    /**
     * 查询槽位
     */
    getSlot,
    /**
     * 查询槽位主导人
     */
    getSlotLeader,
    /**
     * 查询槽位主导人集合
     */
    getSlotLeaders,
    /**
     * 查询抵押激活信息
     */
    getStakeActivation,
    /**
     * 查询供应量
     */
    getSupply,
    /**
     * 查询通证账号余额
     */
    getTokenAccountBalance,
    /**
     * 按代表查询通证账号
     */
    getTokenAccountsByDelegate,
    /**
     * 按持有人查询通证账号
     */
    getTokenAccountsByOwner,
    /**
     * 查询通证的最大账号
     */
    getTokenLargestAccounts,
    /**
     * 查询通证供应量
     */
    getTokenSupply,
    /**
     * 查询交易
     */
    getTransaction,
    /**
     * 查询交易数量
     */
    getTransactionCount,
    /**
     * 查询版本
     */
    getVersion,
    /**
     * 查询投票账号
     */
    getVoteAccounts,
    /**
     * 最小账本槽位
     */
    minimumLedgerSlot,
    /**
     * 请求空投
     */
    requestAirdrop,
    /**
     * 发送交易
     */
    sendTransaction,
    /**
     * 模拟交易
     */
    simulateTransaction,
}


package com.helei.solanarpc.constants;

public enum SolanaWSEventType {

    /**
     * 订阅与指定账户相关的日志消息，包含合约调用、转账等信息。
     */
    logsNotification,

    /**
     * 订阅某个账户的状态变化，包括余额或数据更新。
     */
    accountNotification,

    /**
     * 订阅某个程序（智能合约）相关的账户变化。例如，监控某个代币合约的所有账户。
     */
    programNotification,

    /**
     * 订阅新区块槽位的变化事件。
     */
    slotNotification,

    /**
     * 订阅区块插槽的更新事件，包括未确认、确认和根槽位更新
     */
    slotsUpdatesNotification,

    /**
     * 订阅验证者投票的变化事件。
     */
    voteNotification

    ;
}


package com.helei.solanarpc.constants;

/**
 * Solana Json Rpc Api Websocket api method type
 */
public enum SolanaWSRequestType {

    /**
     * 订阅账号事件
     */
    accountSubscribe,
    /**
     * 取消订阅账号事件
     */
    accountUnsubscribe,
    /**
     * 订阅日志事件
     */
    logsSubscribe,
    /**
     * 取消订阅日志事件
     */
    logsUnsubscribe,

    /**
     * 订阅程序事件
     */
    programSubscribe,
    /**
     * 取消订阅程序事件
     */
    programUnsubscribe,
    /**
     * 订阅签名事件
     */
    signatureSubscribe,

    /**
     * 取消订阅签名事件
     */
    signatureUnsubscribe,
    /**
     * 订阅槽位事件
     */
    slotSubscribe,
    /**
     * 取消订阅槽位事件
     */
    slotUnsubscribe,
}



package com.helei.solanarpc.dto;

import com.helei.solanarpc.SolanaEventInvocation;
import com.helei.solanarpc.constants.SolanaWSRequestType;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
@Builder
public class SolanaWSRequestContext {

    private String address;

    private Long requestId;

    private Long subscription;

    private SolanaWSRequestType requestType;

    private SolanaEventInvocation invocation;
}

package com.helei.solanarpc.handler;

import com.alibaba.fastjson.JSONObject;

/**
 * Solana Websocket 订阅事件处理器
 */
public class SolanaWSEventHandler {


    public void logsNotification(String accountAddress, JSONObject message) {
    }

    public void accountNotification(String accountAddress, JSONObject message) {
    }

    public void programNotification(String accountAddress, JSONObject message) {
    }

    public void slotNotification(String accountAddress, JSONObject message) {
    }

    public void slotsUpdatesNotification(String accountAddress, JSONObject message) {
    }

    public void voteNotification(String accountAddress, JSONObject message) {
    }
}



package com.helei.solanarpc;

import com.alibaba.fastjson.JSONObject;
import com.helei.solanarpc.constants.SolanaWSEventType;
import com.helei.solanarpc.dto.SolanaWSRequestContext;

public interface SolanaEventInvocation {


    /**
     * 执行solana websocket 订阅的事件
     *
     * @param eventType    eventType
     * @param context      context
     * @param event        event
     */
    void invoke(SolanaWSEventType eventType, SolanaWSRequestContext context, JSONObject event);

}






package com.helei.solanarpc;

import cn.hutool.http.HttpException;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.helei.snowflack.SnowFlakeFactory;
import com.helei.solanarpc.constants.SolanaHttpRequestType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;

public class SolanaRestHttpClient {

    private final String url;

    private final OkHttpClient okHttpClient;

    private final ExecutorService executor;

    private final SnowFlakeFactory snowFlakeFactory = new SnowFlakeFactory(3, 23);

    public SolanaRestHttpClient(InetSocketAddress proxy, String url, ExecutorService executor) {
        this.url = url;
        this.executor = executor;

        OkHttpClient.Builder builder = new OkHttpClient.Builder();
        if (proxy != null) {
            builder.proxy(new Proxy(Proxy.Type.HTTP, proxy));
        }
        this.okHttpClient = builder.build();
    }


    /**
     * 模拟交易
     *
     * @param transactionSignature "签名后的交易数据(Base64编码)
     * @return
     *{
     *   "jsonrpc": "2.0",
     *   "id": 8,
     *   "result": {
     *     "context": {
     *       "slot": 12345678
     *     },
     *     "value": {
     *       "err": null,
     *       "logs": [
     *         "Program xxx invoked by...",
     *         "Transfer 10 SOL from ... to ..."
     *       ]
     *     }
     *   }
     * }
     */
    public CompletableFuture<JSONObject> simulateTransaction(String transactionSignature) {
        JSONArray params= new JSONArray();
        params.add(transactionSignature);

        JSONObject jb1 = new JSONObject();
        jb1.put("encoding", "base64");
        jb1.put("commitment", "processed");
        params.add(jb1);

        return solanaRestRequest(SolanaHttpRequestType.simulateTransaction, params);
    }


    /**
     *  发送交易
     *
     * @param transactionSignature "签名后的交易数据(Base64编码)
     * @return
     *{
     *   "jsonrpc": "2.0",
     *   "id": 7,
     *   "result": "交易签名"
     * }
     */
    public CompletableFuture<JSONObject> sendTransaction(String transactionSignature) {
        JSONArray params= new JSONArray();
        params.add(transactionSignature);

        JSONObject jb1 = new JSONObject();
        jb1.put("encoding", "base64");
        jb1.put("commitment", "confirmed");
        params.add(jb1);

        return solanaRestRequest(SolanaHttpRequestType.sendTransaction, params);
    }

    /**
     * 获取区块健康状态
     *
     * @return
     *{
     *   "jsonrpc": "2.0",
     *   "id": 6,
     *   "result": "ok" // 表示网络健康
     * }
     */
    public CompletableFuture<JSONObject> getHealth() {
        JSONArray params= new JSONArray();
        return solanaRestRequest(SolanaHttpRequestType.getHealth, params);
    }

    /**
     * 获取多个账户的信息
     *
     * @param accountAddressArray 账户地址数组
     * @return
     * {
     * "jsonrpc": "2.0",
     *   "id": 5,
     *   "result": {
     *     "context": {
     *       "slot": 12345678
     *     },
     *     "value": [
     *       {
     *         "data": [],
     *         "lamports": 1000000000,
     *         "owner": "11111111111111111111111111111111",
     *         "executable": false,
     *         "rentEpoch": 345
     *       },
     *       {
     *         "data": [],
     *         "lamports": 2000000000,
     *         "owner": "11111111111111111111111111111111",
     *         "executable": false,
     *         "rentEpoch": 345
     *       }
     *     ]
     *   }
     * }
     */
    public CompletableFuture<JSONObject> getMultipleAccounts(JSONArray accountAddressArray) {
        JSONArray params= new JSONArray();
        params.add(accountAddressArray);

        JSONObject jb1 = new JSONObject();
        jb1.put("encoding", "jsonParsed");
        jb1.put("commitment", "finalized");
        params.add(jb1);

        return solanaRestRequest(SolanaHttpRequestType.getMultipleAccounts, params);
    }

    /**
     * 获取区块信息
     *
     * @param slotId slot id
     * @return
     * {
     *   "jsonrpc": "2.0",
     *   "id": 4,
     *   "result": {
     *     "blockhash": "区块哈希",
     *     "parentSlot": 12345677,
     *     "transactions": [
     *       {
     *         "transaction": {
     *           "signatures": ["签名"],
     *           "message": {
     *             "accountKeys": ["账户地址1", "账户地址2"],
     *             "instructions": [
     *               {
     *                 "programId": "TokenProgram1111111111111111111111111",
     *                 "data": "指令数据",
     *                 "accounts": ["账户地址1", "账户地址2"]
     *               }
     *             ],
     *             "recentBlockhash": "区块哈希"
     *           }
     *         },
     *         "meta": {
     *           "err": null,
     *           "fee": 5000,
     *           "preBalances": [1000000000, 2000000000],
     *           "postBalances": [999995000, 2000000000]
     *         }
     *       }
     *     ],
     *     "rewards": []
     *   }
     * }
     */
    public CompletableFuture<JSONObject> getBlock(String slotId) {
        JSONArray params= new JSONArray();
        params.add(slotId);

        JSONObject jb1 = new JSONObject();
        jb1.put("encoding", "jsonParsed");
        jb1.put("transactionDetails", "jsonParsed");
        jb1.put("rewards", true);
        params.add(jb1);

        return solanaRestRequest(SolanaHttpRequestType.getBlock, params);
    }

    /**
     * 获取最新区块
     *
     * @return
     *{
     *   "jsonrpc": "2.0",
     *   "id": 3,
     *   "result": {
     *     "context": {
     *       "slot": 12345678
     *     },
     *     "value": {
     *       "blockhash": "区块哈希",
     *       "lastValidBlockHeight": 12346000
     *     }
     *   }
     * }
     */
    public CompletableFuture<JSONObject> getLatestBlockhash() {
        JSONArray params= new JSONArray();

        JSONObject jb1 = new JSONObject();
        jb1.put("commitment", "finalized");
        params.add(jb1);

        return solanaRestRequest(SolanaHttpRequestType.getLatestBlockhash, params);
    }


    /**
     * 获取交易详情
     *
     * @param signature 交易签名
     * @return
     * {
     *   "jsonrpc": "2.0",
     *   "id": 2,
     *   "result": {
     *     "slot": 12345678,
     *     "transaction": {
     *       "signatures": ["签名"],
     *       "message": {
     *         "accountKeys": [
     *           "账户1地址",
     *           "账户2地址"
     *         ],
     *         "instructions": [
     *           {
     *             "programId": "TokenProgram1111111111111111111111111",
     *             "data": "指令数据",
     *             "accounts": ["账户1地址", "账户2地址"]
     *           }
     *         ],
     *         "recentBlockhash": "区块哈希"
     *       }
     *     },
     *     "meta": {
     *       "err": null,
     *       "fee": 5000,
     *       "preBalances": [1000000000, 2000000000],
     *       "postBalances": [999995000, 2000000000],
     *       "preTokenBalances": [],
     *       "postTokenBalances": []
     *     }
     *   }
     * }
     */
    public CompletableFuture<JSONObject> getTransaction(String signature) {
        JSONArray params= new JSONArray();
        params.add(signature);

        JSONObject jb1 = new JSONObject();
        jb1.put("encoding", "jsonParsed");
        params.add(jb1);

        return solanaRestRequest(SolanaHttpRequestType.getTransaction, params);
    }

    /**
     * 获取账户信息
     *
     * @param address address
     * @return
     * {
     *   "jsonrpc": "2.0",
     *   "id": 1,
     *   "result": {
     *     "context": {
     *       "slot": 12345678
     *     },
     *     "value": {
     *       "data": [],  // 账户数据
     *       "executable": false,
     *       "lamports": 1000000000, // 余额 (单位: lamports)
     *       "owner": "11111111111111111111111111111111",
     *       "rentEpoch": 123
     *     }
     *   }
     * }
     */
    public CompletableFuture<JSONObject> getAccountInfo(String address) {
        JSONArray params= new JSONArray();
        params.add(address);

        JSONObject jb1 = new JSONObject();
        jb1.put("encoding", "jsonParsed");
        jb1.put("commitment", "finalized");
        params.add(jb1);

        return solanaRestRequest(SolanaHttpRequestType.getAccountInfo, params);
    }


    /**
     * solana http 请求
     *
     * @param requestType 请求类型
     * @param params      参数
     * @return 结果
     */
    public CompletableFuture<JSONObject> solanaRestRequest(SolanaHttpRequestType requestType, JSONArray params) {

        return CompletableFuture.supplyAsync(() -> {
            Request.Builder builder = new Request.Builder();
            builder.addHeader("Content-Type", "application/json");

            JSONObject bodyJson = new JSONObject();
            bodyJson.put("jsonrpc", "2.0");
            bodyJson.put("id", snowFlakeFactory.nextId());
            bodyJson.put("method", requestType.name());
            bodyJson.put("params", params);

            RequestBody requestBody = RequestBody.create(bodyJson.toJSONString().getBytes(StandardCharsets.UTF_8));

            builder.url(url).post(requestBody);

            try (Response response = okHttpClient.newCall(builder.build()).execute()) {
                if (response.isSuccessful()) {
                    return response.body() == null ? new JSONObject() : JSONObject.parseObject(response.body().string());
                } else {
                    throw new HttpException(String.format("请求url [%s] 失败,code [%s], %s", url, response.code(), response.body() == null ? "" : response.body().string()));
                }
            } catch (IOException e) {
                throw new RuntimeException(String.format("请求solana rest api [%s],method[%s]发生错误", url, requestType), e);
            }
        }, executor);
    }
}



package com.helei.solanarpc;

import cn.hutool.core.util.BooleanUtil;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.helei.dto.base.KeyValue;
import com.helei.netty.base.AbstractWebsocketClient;
import com.helei.snowflack.SnowFlakeFactory;
import com.helei.solanarpc.constants.SolanaCommitment;
import com.helei.solanarpc.constants.SolanaWSRequestType;
import com.helei.solanarpc.dto.SolanaWSRequestContext;
import lombok.extern.slf4j.Slf4j;

import java.util.concurrent.CompletableFuture;

@Slf4j
public class SolanaWebsocketClient extends AbstractWebsocketClient<JSONObject, JSONObject> {


    private static final SnowFlakeFactory snoFlakeFactory = new SnowFlakeFactory(2, 2);


    public SolanaWebsocketClient(String url) {
        super(url, new SolanaWebsocketClientHandler());
    }


    /**
     * 订阅指定地址的日志
     *
     * @param address    地址
     * @param invocation 回调
     * @return 订阅id
     *
     * 推送消息：
     *{
     *   "jsonrpc": "2.0",
     *   "method": "logsNotification",
     *   "params": {
     *     "subscription": 1,
     *     "result": {
     *       "context": {
     *         "slot": 12345678
     *       },
     *       "value": {
     *         "signature": "交易签名",
     *         "logMessages": [
     *           "Program xxx invoked by...",
     *           "Transfer 10 SOL from ... to ..."
     *         ]
     *       }
     *     }
     *   }
     * }
     */
    public CompletableFuture<Long> logsSubscribe(String address, SolanaEventInvocation invocation) {
        JSONArray params = new JSONArray();

        JSONObject jb1 = new JSONObject();
        jb1.put("mentions", address);
        params.add(jb1);

        JSONObject jb2 = new JSONObject();
        jb2.put("encoding", "jsonParsed");
        params.add(jb2);

        return sendSolanaWSRequest(SolanaWSRequestType.logsSubscribe, address, null, params, invocation);
    }

    /**
     * 订阅某个账户的状态变化，包括余额或数据更新。
     *
     * @param address 需要订阅的账户地址。
     * @param commitment 数据确认等级（processed、confirmed、finalized）。
     * @param invocation 收到事件的回调
     * @return
     *推送示例：
     * {
     *   "jsonrpc": "2.0",
     *   "method": "accountNotification",
     *   "params": {
     *     "subscription": 2,
     *     "result": {
     *       "context": {
     *         "slot": 12345678
     *       },
     *       "value": {
     *         "lamports": 1000000000, // 账户余额
     *         "owner": "TokenProgram1111111111111111111111111",
     *         "data": [], // 账户数据
     *         "executable": false,
     *         "rentEpoch": 345
     *       }
     *     }
     *   }
     * }
     */
    public CompletableFuture<Long> accountSubscribe(String address, SolanaCommitment commitment, SolanaEventInvocation invocation) {
        JSONArray params = new JSONArray();

        JSONObject jb1 = new JSONObject();
        jb1.put("mentions", address);
        params.add(jb1);

        JSONObject jb2 = new JSONObject();
        jb2.put("encoding", "jsonParsed");
        jb2.put("commitment", commitment.name());
        params.add(jb2);

        return sendSolanaWSRequest(SolanaWSRequestType.accountSubscribe, address, null, params, invocation);
    }


    /**
     * 订阅某个程序（智能合约）相关的账户变化。例如，监控某个代币合约的所有账户。
     *
     * @param programId     程序 ID（合约地址）
     * @param commitment    数据确认等级（processed、confirmed、finalized）。
     * @param invocation    回调
     * @return
     *推送示例：
     * {
     *   "jsonrpc": "2.0",
     *   "method": "programNotification",
     *   "params": {
     *     "subscription": 3,
     *     "result": {
     *       "context": {
     *         "slot": 12345678
     *       },
     *       "value": {
     *         "pubkey": "账户地址",
     *         "account": {
     *           "lamports": 2000000,
     *           "owner": "TokenProgram1111111111111111111111111",
     *           "data": [],
     *           "executable": false,
     *           "rentEpoch": 345
     *         }
     *       }
     *     }
     *   }
     * }
     */
    public CompletableFuture<Long> programSubscribe(String programId, SolanaCommitment commitment, SolanaEventInvocation invocation) {
        JSONArray params = new JSONArray();

        params.add(programId);

        JSONObject jb2 = new JSONObject();
        jb2.put("encoding", "base64");
        jb2.put("commitment", commitment.name());
        params.add(jb2);

        return sendSolanaWSRequest(SolanaWSRequestType.programSubscribe, programId, null, params, invocation);
    }


    /**
     *订阅新区块槽位的变化事件。
     * @param invocation 回调
     * @return
     *推送示例：
     * {
     *   "jsonrpc": "2.0",
     *   "method": "slotNotification",
     *   "params": {
     *     "subscription": 4,
     *     "result": {
     *       "parent": 12345677,
     *       "slot": 12345678,
     *       "root": 12345676
     *     }
     *   }
     * }
     */
    public CompletableFuture<Long> slotSubscribe(SolanaEventInvocation invocation) {
        JSONArray params = new JSONArray();

        return sendSolanaWSRequest(SolanaWSRequestType.slotSubscribe, null, null, params, invocation);
    }


    /**
     * 发送订阅请求
     *
     * @param request    请求类型
     * @param address    地址
     * @param params     参数
     * @param invocation 时间的回调
     * @return 订阅id future
     */
    public CompletableFuture<Long> sendSolanaWSRequest(SolanaWSRequestType request, String address, Long unsubId,JSONArray params, SolanaEventInvocation invocation) {
        long requestId = snoFlakeFactory.nextId();

        JSONObject rb = new JSONObject();
        rb.put("jsonrpc", "2.0");
        rb.put("method", request.name());
        rb.put("id", requestId);
        rb.put("params", params);

        return super.sendRequest(rb).thenApplyAsync(response -> {
            JSONObject result = response.getJSONObject("result");
            Long subscription = result.getLong("subscription");

            if (subscription != null) {
                // 订阅
                log.info("账户/合约地址[{}]订阅[{}], 订阅id为[{}]", address, request, subscription);

                // 更新订阅id map content
                getClientHandler().getSubscribeIdMapContext().put(
                        subscription,
                        SolanaWSRequestContext
                                .builder()
                                .requestId(requestId)
                                .requestType(request)
                                .address(address)
                                .invocation(invocation)
                                .build()
                );

            } else {
                // 取消订阅
                Boolean unsubResult = result.getBoolean("result");
                log.info("账户/合约地址[{}]取消订阅[{}], status[{}]", address, request, unsubResult);

                if (BooleanUtil.isTrue(unsubResult)) {
                    SolanaWSRequestContext solanaWSRequestContext = getClientHandler().getSubscribeIdMapContext().remove(unsubId);

                    if (solanaWSRequestContext == null) {
                        log.warn("没有[{}]的订阅信息", unsubId);
                        return null;
                    }
                }
            }

            return subscription;
        }, callbackInvoker);
    }


    /**
     * 获取clientHandler
     *
     * @return SolanaWebsocketClientHandler
     */
    private SolanaWebsocketClientHandler getClientHandler() {
        return (SolanaWebsocketClientHandler) handler;
    }
}


package com.helei.solanarpc;

import com.alibaba.fastjson.JSONObject;
import com.helei.netty.base.AbstractWebSocketClientHandler;
import com.helei.solanarpc.constants.SolanaWSEventType;
import com.helei.solanarpc.dto.SolanaWSRequestContext;
import com.helei.solanarpc.handler.SolanaWSEventHandler;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;

@Getter
@Slf4j
public class SolanaWebsocketClientHandler extends AbstractWebSocketClientHandler<JSONObject, JSONObject> {

    /**
     * 订阅id map accountAddress
     */
    private final ConcurrentHashMap<Long, SolanaWSRequestContext> subscribeIdMapContext = new ConcurrentHashMap<>();


    @Override
    protected void handleOtherMessage(JSONObject message) {

        if (message.containsKey("method")) {
            SolanaWSEventType solanaWSEventType = SolanaWSEventType.valueOf(message.getString("method"));
            log.debug("收到事件[{}]推送消息[{}]", solanaWSEventType, message);

            Long subscription = message.getJSONObject("params").getLong("subscription");
            SolanaWSRequestContext context = subscribeIdMapContext.get(subscription);

            if (context == null) {
                log.warn("订阅id[{}]没有对应的账户地址信息, 将不会处理事件[{}]", subscription, message);
                return;
            }

            SolanaEventInvocation invocation = context.getInvocation();

            CompletableFuture.runAsync(()->{
                invocation.invoke(solanaWSEventType, context, message);
            }).exceptionally(throwable -> {
                log.error("处理事件[{}]发生错误, context[{}], subscription[{}], message[{}]", solanaWSEventType, context, subscription, message, throwable);
                return null;
            });
        } else {
            log.warn("收到未知消息[{}]", message);
        }
    }

    @Override
    public JSONObject convertMessageToRespType(String message) {
        return JSONObject.parseObject(message);
    }

    @Override
    public String getRequestId(JSONObject request) {
        return request.getString("id");
    }

    @Override
    public String getResponseId(JSONObject response) {
        return response.getString("id");
    }
}




package com.helei.solanarpc;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.concurrent.Executors;

class SolanaWebsocketClientTest {

    private static final String SOLANA_WS_URL = "wss://api.mainnet-beta.solana.com";
    private static final String SOLANA_HTTP_URL = "wss://api.mainnet-beta.solana.com";

    private SolanaWebsocketClient solanaWebsocketClient;

    private SolanaRestHttpClient solanaRestHttpClient;

    private String address = "12312315uyi12b1p243hs9hdas";

    @BeforeEach
    void setUp() {
        solanaWebsocketClient = new SolanaWebsocketClient(SOLANA_WS_URL);
        solanaRestHttpClient = new SolanaRestHttpClient(null, SOLANA_HTTP_URL, Executors.newFixedThreadPool(2));
    }

    @AfterEach
    void tearDown() {
    }

    @Test
    void sendSolanaWSRequest() {

        solanaWebsocketClient.logsSubscribe(address, (eventType, context, event) -> {
            JSONObject value = event.getJSONObject("params").getJSONObject("value");

            // 1.监听事件获取签名
            String signature = value.getString("signature");

            // 2.根据签名后去交易信息
            solanaRestHttpClient.getTransaction(signature).thenAcceptAsync(response->{
                JSONObject result = response.getJSONObject("result");
                JSONObject transaction = result.getJSONObject("transaction");
                JSONObject meta = result.getJSONObject("meta");

                JSONArray addressArray = transaction.getJSONObject("message").getJSONArray("accountKeys");
                JSONArray preBalances = meta.getJSONArray("preBalances");
                JSONArray postBalances = meta.getJSONArray("postBalances");


            });
        });

    }
}
