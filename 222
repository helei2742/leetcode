import request from '@/util/request.ts'
import type {PageQuery} from "@/types/vortexa-type-common.ts";

/**
 * 分页查询浏览器环境
 * @param pageQuery pageQuery
 * @returns {*}
 */
export function pageQueryBotInfoNetwork(pageQuery: PageQuery) {
  return request({
    url: '/bot/pageQuery',
    method: 'post',
    data: pageQuery
  })
}

/**
 * 创建bot
 * @param botId
 * @param botKey
 * @param accountIds
 */
export function createBot({botId, botKey, accountIds}) {
  return request({
    url: '/bot/create',
    method: 'post',
    data: {
      botId,
      botKey,
      accountIds
    }
  })
}

/**
 * 分页查询bot实例
 * @param pageQuery
 */
export function pageQueryBotInstanceNetwork(pageQuery: PageQuery) {
  return request({
    url: '/botInstance/pageQuery',
    method: 'post',
    data: pageQuery
  })
}


bot.js


components\horizontal-scroll-bar

<script setup lang="ts">
import {CaretLeft, CaretRight} from "@element-plus/icons-vue";
import {ref} from "vue";

const props = withDefaults(defineProps<{step:number}>(), {
  step: 50
});

const scrollWrapper = ref(null)

const scrollRight = () => {
  if (scrollWrapper.value) {
    console.log(scrollWrapper.value.scrollLeft)
    scrollWrapper.value.wrapRef.scrollLeft += props.step
  }
}

const scrollLeft = () => {
  if (scrollWrapper.value) {
    scrollWrapper.value.wrapRef.scrollLeft -= props.step
  }
}
</script>

<template>
  <div class="horizontal-scroll-bar">
    <el-icon class="control-left" @click="scrollLeft">
      <CaretLeft/>
    </el-icon>
    <div style="width: calc(100% - 20px)">
      <el-scrollbar ref="scrollWrapper">
        <div  style="display: flex; width: fit-content">
          <slot></slot>
        </div>
      </el-scrollbar>
    </div>
    <el-icon class="control-right" @click="scrollRight">
      <CaretRight/>
    </el-icon>
  </div>
</template>

<style scoped>
.horizontal-scroll-bar {
  height: 100%;
  display: flex;
}

.control-left {
  font-size: 18px;
}

.control-left:hover {
  font-weight: 700;
  font-size: 22px;
  cursor: pointer;
}

.control-right {
  font-size: 18px;
}

.control-right:hover {
  font-weight: 700;
  font-size: 22px;
  cursor: pointer;
}
</style>

vortexa-config.tx
export enum BotInstanceStatus {
  ALL='',
  RUNNING='RUNNING',
  STOPPED='STOPPED',
  UN_USABLE='UN_USABLE'
}


export const API_BASE_URL:string = 'http://localhost:10110'
export const API_TIME_OUT:number = 5000

export const API_DEFAULT_PAGE:number = 1
export const API_DEFAULT_PAGE_SIZE:number = 20

export const PAGINATION_PAGE_SIZES:number[] = [20, 50, 100, 200, 400];


vortexa-tpe-common.ts

import {API_DEFAULT_PAGE, API_DEFAULT_PAGE_SIZE} from "@/config/vortexa-config.ts";

/**
 * 上传实体
 */
export class UploadEntry {
  rawLines: Array<Map<string, object>>

  constructor(rawLines: Array<Map<string, object>>) {
    this.rawLines = rawLines
  }
}

/**
 * Http 响应实体
 */
export class Result<T> {
  success: boolean
  errorMsg: string
  data: T

  constructor({success, errorMsg, data}) {
    this.success = success
    this.errorMsg = errorMsg
    this.data = data
  }
}

export class PageQuery {
  page: number = API_DEFAULT_PAGE
  limit: number = API_DEFAULT_PAGE_SIZE
  filterMap?: Map<string, object>

  constructor({page, limit, filterMap}:{page?:number, limit?:number, filterMap?:Map<string,object>}) {
    this.page = page == undefined ? API_DEFAULT_PAGE : page
    this.limit = limit == undefined ? API_DEFAULT_PAGE_SIZE : limit
    this.filterMap = filterMap
  }
}

/**
 * 分页响应实体
 */
export class PageResult<T> {
  total: number;
  list: Array<T>;
  pages: number;
  pageNum: number;
  pageSize: number;

  constructor({total, pages, pageNum, pageSize, list}) {
    this.total = total
    this.pages = pages
    this.pageNum = pageNum
    this.pageSize = pageSize
    this.list = list
  }
}


common.ts

export function flattenObject(obj: never): Record<string, never> {
  const result: Record<string, never> = {}

  for (const key in obj) {
    if (obj[key] instanceof Map) {
      // 处理 Map 类型
      obj[key].forEach((value: never, mapKey: never) => {
        result[mapKey] = value
      })
    } else if (typeof obj[key] === 'object' && obj[key] !== null) {
      // 递归处理嵌套对象
      Object.assign(result, flattenObject(obj[key]))
    } else {
      // 普通属性
      result[key] = obj[key]
    }
  }

  return result
}


export function stringToEnum(value: string, enumValues: { [key: string]: any }): any {
  for (let key in enumValues) {
    if (enumValues[key] === value) {
      return key;
    }
  }
  return undefined;
}

export function generateRandomGreenColor(): string {
  const g = Math.floor(Math.random() * 156) + 100;
  const r = Math.floor(Math.random() * 100);
  const b = Math.floor(Math.random() * 100);
  return `rgb(${r}, ${g}, ${b})`
}


view\homepage\script\component\bot-job-detail
<script setup lang="ts">
import {CaretLeft, EditPen, SemiSelect} from "@element-plus/icons-vue";
import {ref} from "vue";

const props = defineProps<{
  jobName: string,
  jobParams: object,
  isRunning: boolean
}>()


const editJobParamsDialogVisible = ref(false)

// 事件
const emit = defineEmits([
  'start-task',
  'stop-task'
])

const startTaskHandler = () => {
  emit('start-task', {jobName: jobName})
}

const stopTaskHandler = () => {
  emit('stop-task', {instanceId: jobName})
}
</script>

<template>
  <div>
    <div v-if="jobName==''">
      概况图
    </div>
    <div v-else>
      <el-descriptions
        class="margin-top"
        :title="jobName"
        border
        :column="1"
      >
        <template #extra>
          <el-button-group class="ml-4">
            <el-button
              v-if="!props.isRunning"
              size="small"
              @click="startTaskHandler">
              <el-icon>
                <CaretLeft/>
              </el-icon>
            </el-button>
            <el-button
              v-else
              size="small"
              @click="stopTaskHandler"
            >
              <el-icon>
                <SemiSelect/>
              </el-icon>
            </el-button>
            <el-button
              size="small"
              @click="editJobParamsDialogVisible = true"
            >
              <el-icon>
                <EditPen/>
              </el-icon>
            </el-button>
          </el-button-group>
        </template>
        <el-descriptions-item label="Launch Times">1</el-descriptions-item>
        <el-descriptions-item label="Last Start">2024-03-28 22:12:33</el-descriptions-item>
        <el-descriptions-item label="Job Type">
          <el-tag size="small">Timed Job</el-tag>
        </el-descriptions-item>
        <el-descriptions-item label="Description">
          <el-text line-clamp="2">
            The -webkit-line-clamp CSS property<br/>
            allows limiting of the contents of<br/>
            a block to the specified number of lines.
          </el-text>
        </el-descriptions-item>
      </el-descriptions>
    </div>

    <el-dialog v-model="editJobParamsDialogVisible" title="Edit Job Params" width="480">
      <template #footer>
        <div>
          {{jobParams}}
        </div>
        <div class="dialog-footer">
          <el-button @click="editJobParamsDialogVisible = false">Cancel</el-button>
          <el-button type="primary" @click="editJobParamsDialogVisible = false">
            Confirm
          </el-button>
        </div>
      </template>
    </el-dialog>
  </div>
</template>

<style scoped>

</style>

bo-runtime-display-card
<script lang="ts" setup>
import {SwitchButton, Setting} from '@element-plus/icons-vue'
import {ElMessage, ElMessageBox} from "element-plus";
import type {BotInstanceInfo} from "@/types/vortexa-type.ts";
import {computed, ref} from "vue";
import {stringToEnum} from "@/util/common.ts";
import {BotInstanceStatus} from "@/config/vortexa-config.ts";
import HorizontalScrollBar from "@/components/horizontal-scroll-bar/horizontal-scroll-bar.vue";
import BotJobDetiail from "@/views/homepage/script/components/bot-job-detiail.vue";


const props = defineProps<{
  botInstance: BotInstanceInfo
}>();

// 运行状态
const botInstanceStatus = computed(() => {
  return stringToEnum(props.botInstance.params['bot_instance_status'], BotInstanceStatus)
})

// 基本任务
const botInstanceBasicTask = computed(() => {
  return props.botInstance.params['basic_job_list']
})
// 任务
const botInstanceTask = computed(() => {
  return props.botInstance.jobParams
})
// 当前显示的job
const activeJobName = ref('')
const activeJobParams = computed(()=>{
  if (activeJobName.value) {
    return props.botInstance.jobParams[activeJobName.value]
  }
  return {}
})
// 当前显示的job 变化
const activeJobChangeHandler = (newJobName: string) => {
  activeJobName.value = newJobName
}

// 事件
const emit = defineEmits([
  'start-script',
  'stop-script',
  'delete-script',
])

const startScriptHandler = () => {
  emit('start-script', {instanceId: props.botInstance.id})
}

const stopScriptHandler = () => {
  emit('stop-script', {instanceId: props.botInstance.id})
}

const deleteInstanceHandler = () => {
  ElMessageBox.confirm(
    'delete the script instance. Continue?',
    'Warning',
    {
      confirmButtonText: 'OK',
      cancelButtonText: 'Cancel',
      type: 'danger',
    }
  )
    .then(() => {
      emit('delete-task', {instanceId: props.botInstance.id})
    })
    .catch(() => {
      ElMessage({
        type: 'info',
        message: 'Delete canceled',
      })
    })
}

</script>

<template>
  <div class="bot-runtime-display-card">
    <div class="card-header clearfix">
      <div style="display:flex; align-items: start">
        <div style="width: 60px;">
          <el-image class="head-image"/>
        </div>
        <div
          style="flex: 1;overflow: hidden;font-weight: 700; cursor: pointer"
          @click="activeJobName=''"
        >
          <el-text truncated>{{ botInstance.botKey }}</el-text>
          <div style="font-weight: 400;">
            <el-text truncated>
              {{ botInstance.insertDatetime ? botInstance.insertDatetime : 'unknown start time' }}
            </el-text>
          </div>
        </div>

        <el-dropdown placement="bottom-end">
          <el-icon class="setting-button">
            <Setting/>
          </el-icon>
          <template #dropdown>
            <el-dropdown-menu>
              <el-dropdown-item>Account edit</el-dropdown-item>
              <el-dropdown-item
                @click="deleteInstanceHandler"
              >
                <span  style="color: red">delete</span>
              </el-dropdown-item>
            </el-dropdown-menu>
          </template>
        </el-dropdown>
      </div>
    </div>


    <div class="data-print-line">
      <horizontal-scroll-bar :step="180">
          <el-button
            v-for="basicTaskName in botInstanceBasicTask"
            size="small"
            :key="basicTaskName"
            class="button-morandi"
            :class="{'active-job-button': activeJobName==basicTaskName}"
            @click="activeJobChangeHandler(basicTaskName)"
            plain
          >
            {{ basicTaskName }}
          </el-button>
          <el-button
            v-for="task in botInstanceTask"
            size="small"
            :key="task.jobName"
            class="button-morandi"
            :class="{'active-job-button': activeJobName==task.jobName}"
            @click="activeJobChangeHandler(task.jobName)"
            plain
          >
            {{ task.jobName }}
          </el-button>
      </horizontal-scroll-bar>
    </div>


    <div class="card-detail">
      <el-scrollbar class="card-detail-content">
        <bot-job-detiail
          :job-name="activeJobName"
          :job-params="activeJobParams"
          :is-running="false"
        />
      </el-scrollbar>

      <el-button v-if="botInstanceStatus==BotInstanceStatus.RUNNING"
                 @click="stopScriptHandler"
                 class="opt-button"
                 type="danger"
                 plain
      >
        <el-icon>
          <SwitchButton/>
        </el-icon>
        Stop Task
      </el-button>
      <el-button
        v-else
        class="opt-button"
        type="success"
        @click="startScriptHandler"
        plain
      >
        <el-icon>
          <SwitchButton/>
        </el-icon>
        Start Script
      </el-button>
    </div>
  </div>
</template>

<style scoped>
.bot-runtime-display-card {
  width: 300px;
  min-width: 300px;
  //max-width: 500px;
  height: 350px;
  background-color: rgba(110, 110, 110, 0.1);
  padding: 24px;

  margin-left: 12px;

  color: #9da3ae;
  border-radius: 10px;
}

.card-header {
  height: 48px;
}

.data-print-line {
  height: 28px;
  margin-top: 4px;
  border-bottom: 1px solid #9da3ae;
}

.card-detail {
  height: 222px;
  margin-top: 16px;
}

.head-image {
  height: 48px;
  width: 48px;
  margin-right: 8px;
}

.icon-button {
  width: 24px;
  height: 24px;
  color: #9da3ae;
  font-size: 20px;

  cursor: pointer;
}

.icon-button:hover {
  transform: scale(1.2); /* 鼠标悬浮时放大 */
  color: #007BFF; /* 鼠标悬浮时改变颜色 */
}

.card-detail-content {
  height: 222px;
}

.opt-button {
  margin-top: 4px;
  width: 100%;
  font-size: 16px;
  font-weight: 600;
  text-align: center;
}

.setting-button {
  font-size: 23px;
  cursor: pointer;
}

.setting-button:hover {
  color: #000000;
}

.active-job-button {
  background-color: aquamarine !important;
  color: #000000 !important;
}

:deep(.el-descriptions__body), :deep(.el-descriptions__label.el-descriptions__cell.is-bordered-label) {
  background-color: transparent!important;
}
</style>


vortexa-script-ciew
<script setup lang="ts">
import {Filter, RefreshRight} from '@element-plus/icons-vue'
import BotRuntimeDisplayCard from "@/views/homepage/script/components/bot-runtime-display-card.vue";
import {BotInstanceInfo} from "@/types/vortexa-type.ts";
import {onMounted, ref, nextTick, computed, reactive} from "vue";
import ContentBlock from "@/components/content-block/content-block.vue";
import {BotInstanceStatus} from "@/config/vortexa-config.ts";
import {pageQueryBotInstanceNetwork} from "@/api/bot.ts";
import {PageQuery, PageResult} from "@/types/vortexa-type-common.ts";
import {ElMessage} from "element-plus";

const filters = ref<{
  status: BotInstanceStatus
}>({status: BotInstanceStatus.ALL})

const botInstanceList = ref<Array<BotInstanceInfo>>([])

const displayInstanceList = computed(() => {
  console.log(botInstanceList.value)
  return botInstanceList.value.filter(info => {
    let filter: boolean = true
    if (filterValue.value != null) {
      filter = info.botName.includes(filterValue.value) || info.botKey.includes(filterValue.value)
    }
    if (filters.value.status != BotInstanceStatus.ALL) {
      filter = info.params['bot_instance_status'] == filters.value.status
    }
    return filter
  })
})

const isLoading = ref(false)
// 分页查询数据
const totalCount = ref(0)
const pageQuery = reactive(new PageQuery({
  page: 1,
  limit: 10,
  filterMap: new Map<string, object>()
}))


// 1. 过滤
// 过滤下拉框宽度
const dropdownWidth = ref(0)
const filterValue = ref('')


function filterByStatus(filterStatus: BotInstanceStatus) {
  filters.value.status = filterStatus
}

// 2.BotInstance
// 网络请求获取实例
const scrolQueryDisabled = ref(false)
const pageQueryBotInstance = () => {
  if (isLoading.value) return
  isLoading.value = true
  pageQueryBotInstanceNetwork(pageQuery)
    .then(result => {
      const pageResult: PageResult<BotInstanceInfo> = result.data
      botInstanceList.value.push(...pageResult.list)
      totalCount.value = pageResult.total
      pageQuery.page += 1

      if (pageResult.total == botInstanceList.value.length) {
        ElMessage({
          message: 'Total script loaded',
          type: 'warning',
        })
        scrolQueryDisabled.value = true
      }
    })
    .catch(() => {
      scrolQueryDisabled.value = true
    })
    .finally(() => {
      isLoading.value = false
    })
}


const reload = () => {
  totalCount.value = 0
  pageQuery.page = 1
  pageQuery.limit = 10
  pageQuery.filterMap = new Map()
  botInstanceList.value = []
  pageQueryBotInstance()
}

onMounted(async () => {
  await nextTick()
  dropdownWidth.value = document.querySelector('.filter-button').offsetWidth
})
</script>

<template>
  <div class="vortexa-script-view">

    <!--    搜索块-->
    <content-block class="vortexa-script-viw-block-1">
      <div>
        <el-input v-model="filterValue" placeholder="Search by name"/>
        <div>
          <el-button
            style="width: 90px"
            @click="reload"
          >
            <el-icon>
              <RefreshRight/>
            </el-icon>
            Fresh
          </el-button>
          <el-dropdown
            trigger="click"
            placement="bottom"
            style="width:calc(100% - 90px); "
            :hide-on-click="false"
          >
            <el-button class="filter-button">
              <el-icon>
                <Filter/>
              </el-icon>
              Filter
            </el-button>
            <template #dropdown>
              <el-dropdown-menu class="filter-menu" :style="{'width': dropdownWidth + 'px'}">
                <el-dropdown-item>The Action 1st</el-dropdown-item>
                <el-dropdown-item>The Action 2st</el-dropdown-item>
                <el-dropdown-item>The Action 3st</el-dropdown-item>
              </el-dropdown-menu>
            </template>
          </el-dropdown>
        </div>
      </div>
    </content-block>

    <!--展示块-->
    <content-block class="vortexa-script-viw-block-2">
      <template #header>
        <el-button-group style="margin-bottom: 12px">
          <el-button
            type="info"
            @click="filterByStatus(BotInstanceStatus.ALL)"
            :disabled="filters.status == BotInstanceStatus.ALL"
          >
            All
          </el-button>
          <el-button
            type="success"
            @click="filterByStatus(BotInstanceStatus.RUNNING)"
            :disabled="filters.status == BotInstanceStatus.RUNNING"
          >
            Running
          </el-button>
          <el-button
            type="danger"
            @click="filterByStatus(BotInstanceStatus.STOPPED)"
            :disabled="filters.status == BotInstanceStatus.STOPPED"
          >
            Stopped
          </el-button>
        </el-button-group>
      </template>
      <div class="scroll-bar-wrapper" v-loading="isLoading">
        <div
          class="vortexa-script-display-content"
          v-infinite-scroll="pageQueryBotInstance"
          :infinite-scroll-disabled="scrolQueryDisabled"
        >
          <bot-runtime-display-card
            v-for="botInstance in displayInstanceList"
            :key="botInstance.botKey"
            :bot-instance="botInstance"
            class="vortexa-script-item"
          />
        </div>
        <el-backtop target=".scroll-bar-wrapper" :bottom="100" :right="100">
        </el-backtop>
      </div>

      <span style="float: right;font-size: 14px; font-weight: 600">
        Total:{{ totalCount }}
      </span>
    </content-block>
  </div>
</template>

<style scoped>

.vortexa-script-view {
  display: flex;
  flex-direction: column;
  height: calc(100vh - 130px);
}

.vortexa-script-viw-block-1 {
  max-width: 500px;
  height: 70px;
}

.vortexa-script-viw-block-2 {
  padding-bottom: 60px;
}

.scroll-bar-wrapper {
  height: calc(100vh - 260px);
  overflow-y: scroll;
}

.vortexa-script-display-content {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  justify-items: start;
}

.scroll-bar-wrapper::-webkit-scrollbar {
  width: 0;
  height: 0;
}

.scroll-bar-wrapper {
  -ms-overflow-style: none;
  scrollbar-width: none;
}


.vortexa-script-item {
  flex: 1 0 calc((100% - 30px) / 5);
}

.filter-button {
  width: 100%;
}

.filter-menu {
  min-width: 200px;
}

@media (min-width: 1980px) {
  .vortexa-script-view {
    display: flex;
    flex-direction: row-reverse;
    height: calc(100vh - 100px);
    gap: 10px;
  }

  .vortexa-script-viw-block-2 {
    width: calc(100% - 250px);
    height: calc(100vh - 100px);
  }
}
</style>



