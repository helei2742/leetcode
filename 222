package cn.com.vortexa.script_node.websocket;

import cn.com.vortexa.script_node.bot.AnnoDriveAutoBot;
import cn.com.vortexa.common.dto.Result;
import cn.com.vortexa.common.dto.job.AutoBotJobParam;
import cn.com.vortexa.common.dto.job.AutoBotJobWSParam;
import cn.com.vortexa.common.entity.AccountContext;
import cn.com.vortexa.common.util.NamedThreadFactory;
import cn.com.vortexa.websocket.netty.constants.WebsocketClientStatus;
import lombok.extern.slf4j.Slf4j;
import org.jetbrains.annotations.NotNull;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Map;
import java.util.concurrent.*;


@Slf4j
public class WebSocketClientLauncher {

    public static final Method lanuchMethod;

    static {
        try {
            lanuchMethod = WebSocketClientLauncher.class.getMethod("launchWSClient",
                    Object.class, Object.class, Object.class);
        } catch (NoSuchMethodException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * 线程池
     */
    private final ExecutorService executorService;

    /**
     * bot 对象
     */
    private final AnnoDriveAutoBot<?> bot;

    /**
     * 控制并发数量的信号量
     */
    private final Map<String, Semaphore> wsCCSemapthoreMap = new ConcurrentHashMap<>();

    /**
     * 已启动的ws客户端
     */
    private final Map<String, BaseBotWSClient<?>> launchedWSClientMap = new ConcurrentHashMap<>();

    public WebSocketClientLauncher(
            AnnoDriveAutoBot<?> bot
    ) {
        this.bot = bot;
        this.executorService = Executors.newThreadPerTaskExecutor(new NamedThreadFactory("ws-client-launcher"));
    }

    /**
     * 构建ws客户端
     *
     * @param accountContextObj accountContextObj
     * @param jobParamObj       jobParamObj
     * @return BaseBotWSClient < Req, Resp>
     */
    public final CompletableFuture<Result> launchWSClient(
            Object accountContextObj,
            Object jobParamObj,
            Object wsClientBuilderObj
    ) {
        // 参数处理
        AccountContext accountContext = (AccountContext) accountContextObj;
        AutoBotJobParam jobParam = (AutoBotJobParam) jobParamObj;
        AccountWSClientBuilder wsClientBuilder = (AccountWSClientBuilder) wsClientBuilderObj;

        String key = generateAccountKey(accountContext, jobParam.getJobName());

        String prefix = String.format("bot[%s]-job[%s]-account[%s]-[%s]",
                bot.getBotInstance().getBotKey(), jobParam.getJobName(), accountContext.getId(), accountContext.getName());

        AutoBotJobWSParam autoBotJobWSParam = jobParam.getAutoBotJobWSParam();


        // 已经启动的，不再创建
        if (launchedWSClientMap.containsKey(key)) {
            if (!autoBotJobWSParam.getIsRefreshWSConnection()) {
                log.warn("{} ws client already created", prefix);
                return CompletableFuture.completedFuture(Result.fail(prefix + "ws client already created"));
            } else {
                log.warn(prefix + " 移除旧ws客户端");
                launchedWSClientMap.remove(key).shutdown();
            }
        }

        return buildAndConnectWebSocket(accountContext, autoBotJobWSParam, key, wsClientBuilder, prefix);
    }


    /**
     * 构建并连接ws客户端
     *
     * @param accountContext    accountContext
     * @param autoBotJobWSParam autoBotJobWSParam
     * @param key               key
     * @param wsClientBuilder   wsClientBuilder
     * @param prefix            prefix
     * @return CompletableFuture<Result>
     */
    private @NotNull CompletableFuture<Result> buildAndConnectWebSocket(
            AccountContext accountContext,
            AutoBotJobWSParam autoBotJobWSParam,
            String key,
            AccountWSClientBuilder wsClientBuilder,
            String prefix
    ) {

        // Step 1 ws 连接数量控制
        Semaphore wsConnectSemaphore;
        try {
            wsConnectSemaphore = wsCCSemapthoreMap.computeIfAbsent(key, k -> new Semaphore(autoBotJobWSParam.getWsConnectCount()));
            wsConnectSemaphore.acquire();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }

        //  Step 2 启动
        BaseBotWSClient<?> wsClient = null;

        // Step 3 创建ws client
        try {
            wsClient = wsClientBuilder.build(accountContext);

            if (wsClient == null) {
                return CompletableFuture.completedFuture(Result.fail("ws client create failed"));
            }
            launchedWSClientMap.put(key, wsClient);
        } catch (InvocationTargetException | IllegalAccessException e) {
            log.error("build account ws client error", e);
            return CompletableFuture.completedFuture(Result.fail(prefix + "build account ws client error"));
        }

        // Step 4 设置handler
        init(wsClient, autoBotJobWSParam, wsConnectSemaphore);

        // Step 5 检查当前状态，如果为new或stop才进行启动
        WebsocketClientStatus currentStatus = wsClient.getClientStatus();


        return switch (currentStatus) {
            // 新创建，停止状态，需要建立连接
            case WebsocketClientStatus.NEW, WebsocketClientStatus.STOP -> wsClient
                    .connect() // 异步连接
                    .thenApplyAsync(connectResult -> {
                        if (connectResult) {
                            // 连接成功
                            return Result.ok(prefix + "connect success");
                        } else if (autoBotJobWSParam.getWsUnlimitedRetry()) {
                            // TODO ws需要加入shutdown后的恢复机制
                            // 连接失败，且允许无限重连, 返回ok，ws内部会自动重连
                            return Result.ok(prefix + "connect fail, restarting...");
                        } else {
                            return Result.fail(prefix + "ws client can not connect");
                        }
                    }, executorService)
                    .exceptionallyAsync(throwable -> {
                        log.error("ws client connect error", throwable);
                        return Result.fail(prefix + "connect error, " + throwable.getMessage());
                    }, executorService);
            case WebsocketClientStatus.STARTING, WebsocketClientStatus.RUNNING ->
                    CompletableFuture.completedFuture(Result.ok());
            // 被禁止使用，抛出异常
            case WebsocketClientStatus.SHUTDOWN ->
                    CompletableFuture.completedFuture(Result.fail(prefix + " ws client can not connect"));
        };
    }

    /**
     * 生成账户key
     *
     * @param accountContext accountContext
     * @param jobName        jobName
     * @return String
     */
    private static @NotNull String generateAccountKey(AccountContext accountContext, String jobName) {
        return jobName + accountContext.getName();
    }


    /**
     * 添加ws状态改变的handler
     *
     * @param <T>               t
     * @param wsClient          wsClient
     * @param autoBotJobWSParam autoBotJobWSParam
     */
    private <T> void init(cn.com.vortexa.script_node.websocket.BaseBotWSClient<T> wsClient, AutoBotJobWSParam autoBotJobWSParam, Semaphore wsConnectSemaphore) {
        // 设置参数
        wsClient.setAllIdleTimeSecond(autoBotJobWSParam.getHeartBeatIntervalSecond());
        wsClient.setReconnectCountDownSecond(autoBotJobWSParam.getReconnectCountDownSecond());
        wsClient.setReconnectLimit(autoBotJobWSParam.getReconnectLimit());
        wsClient.setEventLoopGroupThreads(autoBotJobWSParam.getNioEventLoopGroupThreads());

        //设置相关回调
        wsClient.setClientStatusChangeHandler(newStatus -> {
            wsClient.whenClientStatusChange(newStatus);
            // 释放资源
            if (newStatus.equals(WebsocketClientStatus.SHUTDOWN)) {
                // 记录完成的ws数量
                wsConnectSemaphore.release();
            }
        });
    }

    public void clear() {
        for (Map.Entry<String, BaseBotWSClient<?>> entry : launchedWSClientMap.entrySet()) {
            BaseBotWSClient<?> client = entry.getValue();
            client.close();
        }
        launchedWSClientMap.clear();
        wsCCSemapthoreMap.clear();
    }
}
package cn.com.vortexa.script_node;

import cn.com.vortexa.common.util.FileUtil;
import cn.com.vortexa.common.util.typehandler.JsonTypeHandler;
import cn.com.vortexa.common.util.typehandler.LocalDateTimeTypeHandler;
import cn.com.vortexa.common.util.typehandler.MapTextTypeHandler;
import cn.com.vortexa.db_layer.DBLayerAutoConfig;
import cn.com.vortexa.db_layer.plugn.table_shard.TableShardInterceptor;
import cn.com.vortexa.db_layer.plugn.table_shard.strategy.BotIdBasedTableShardStrategy;
import cn.com.vortexa.db_layer.plugn.table_shard.strategy.ITableShardStrategy;
import cn.com.vortexa.job.JobAutoConfig;
import cn.com.vortexa.script_node.config.ScriptNodeConfiguration;
import cn.hutool.core.util.StrUtil;
import com.baomidou.mybatisplus.core.MybatisConfiguration;
import com.baomidou.mybatisplus.core.config.GlobalConfig;
import com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean;
import com.zaxxer.hikari.HikariDataSource;
import org.apache.ibatis.plugin.Interceptor;
import org.apache.ibatis.session.SqlSessionFactory;
import org.mybatis.spring.SqlSessionFactoryBean;
import org.mybatis.spring.annotation.MapperScan;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.support.PathMatchingResourcePatternResolver;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.transaction.PlatformTransactionManager;

import javax.sql.DataSource;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

@Configuration
@ImportAutoConfiguration({DBLayerAutoConfig.class, JobAutoConfig.class})
@ComponentScan({"cn.com.vortexa.script_node.service.impl", "cn.com.vortexa.script_node.config"})
@MapperScan(basePackages = "cn.com.vortexa.script_node.mapper")
public class ScriptNodeAutoConfig {

    @Autowired
    private JsonTypeHandler jsonTypeHandler;

    @Autowired
    private MapTextTypeHandler mapTextTypeHandler;

    @Autowired
    private LocalDateTimeTypeHandler localDateTimeTypeHandler;

    @Autowired
    private ScriptNodeConfiguration scriptNodeConfiguration;

    @Bean("vortexaDataSource")
    public DataSource vortexaDataSource() {
        String botGroup = scriptNodeConfiguration.getBotGroup();
        if (StrUtil.isBlank(botGroup)) {
            throw new IllegalArgumentException("botGroup is empty");
        }

        try {
            String path = tryCreateDBFile(botGroup);
            HikariDataSource dataSource = new HikariDataSource();
            dataSource.setJdbcUrl("jdbc:sqlite:/" + path);
            return dataSource;
        } catch (IOException e) {
            throw new RuntimeException("create Bot[%s]DB file error".formatted(botGroup), e);
        }
    }


    // @Bean
    // public SqlSessionFactory sqlSessionFactory(@Qualifier("vortexaDataSource") DataSource dataSource) throws Exception {
    //     MybatisSqlSessionFactoryBean factoryBean = new MybatisSqlSessionFactoryBean();
    //     factoryBean.setDataSource(dataSource);
    //     factoryBean.setMapperLocations(new PathMatchingResourcePatternResolver().getResources("classpath:/mapper/*.xml"));
    //     factoryBean.setTypeHandlers(
    //             jsonTypeHandler, mapTextTypeHandler, localDateTimeTypeHandler
    //     );
    //     factoryBean.setTypeAliasesPackage("cn.com.vortexa.entity");
    //     MybatisConfiguration configuration = new MybatisConfiguration();
    //     factoryBean.setConfiguration(configuration);
    //     configuration.setMapUnderscoreToCamelCase(true);
    //
    //     GlobalConfig globalConfig = new GlobalConfig();
    //     GlobalConfig.DbConfig dbConfig = new GlobalConfig.DbConfig();
    //     dbConfig.setLogicDeleteField("isValid");
    //     dbConfig.setLogicDeleteValue("0");
    //     dbConfig.setLogicNotDeleteValue("1");
    //     globalConfig.setDbConfig(dbConfig);
    //     factoryBean.setGlobalConfig(globalConfig);
    //     factoryBean.setPlugins(tableShardInterceptor());
    //     return factoryBean.getObject();
    // }

    // 配置事务管理器
    @Bean(name = "transactionManager")
    public PlatformTransactionManager transactionManager() {
        return new DataSourceTransactionManager(vortexaDataSource());
    }

    @Bean
    public ITableShardStrategy tableShardStrategy() {
        return new BotIdBasedTableShardStrategy();
    }

    @Bean
    public Interceptor tableShardInterceptor() {
        return new TableShardInterceptor(tableShardStrategy());
    }


    /**
     * 尝试创建DB File
     *
     * @param scriptNodeGroup scriptNodeGroup
     * @return db file absolutePath
     * @throws IOException IOException
     */
    private static String tryCreateDBFile(String scriptNodeGroup) throws IOException {
        // 创建BotKey对应的数据库文件
        Path absolutePath = Paths.get(
                FileUtil.getBotAppConfigPath(),
                scriptNodeGroup,
                "script_node_" + scriptNodeGroup + ".db"
        );

        if (Files.notExists(absolutePath)) {
            if (Files.notExists(absolutePath.getParent())) {
                Files.createDirectories(absolutePath.getParent());
            }
            Files.createFile(absolutePath);
        }

        return absolutePath.toString();
    }
}
package cn.com.vortexa.script_node;

import cn.com.vortexa.common.dto.config.ClassInfo;
import cn.com.vortexa.common.exception.BotInitException;
import cn.com.vortexa.common.exception.BotStartException;
import cn.com.vortexa.common.util.DynamicJavaLoader;
import cn.com.vortexa.script_node.bot.AutoLaunchBot;
import cn.com.vortexa.common.dto.config.AutoBotConfig;
import cn.com.vortexa.script_node.config.ScriptNodeConfiguration;
import cn.com.vortexa.script_node.constants.BotStatus;
import cn.com.vortexa.script_node.scriptagent.BotScriptAgent;
import cn.com.vortexa.script_node.service.BotApi;
import cn.com.vortexa.script_node.util.ScriptBotLauncher;
import lombok.extern.slf4j.Slf4j;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.ApplicationListener;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Map;
import java.util.Set;

@Slf4j
@Component
public class ScriptNodeStartupListener implements ApplicationListener<ApplicationReadyEvent> {

    @Autowired
    private ScriptNodeConfiguration scriptNodeConfiguration;

    @Autowired
    private BotApi botApi;

    @Autowired
    private BotScriptAgent botScriptAgent;

    @Override
    @SuppressWarnings("unchecked")
    public void onApplicationEvent(ApplicationReadyEvent event) {
        log.info("start launch script bot...");

        Set<String> autoLaunchBotKeys = scriptNodeConfiguration.getAutoLaunchBotKeys();

        // 启动配置的bot
        for (Map.Entry<String, AutoBotConfig> entry : scriptNodeConfiguration.getBotKeyConfigMap().entrySet()) {
            String botKey = entry.getKey();
            AutoBotConfig botConfig = entry.getValue();

            log.info("[{}] start launch...", botKey);
            try {
                // 加载extra class
                List<ClassInfo> extraClass = botConfig.getExtraClass();
                if (extraClass != null && !extraClass.isEmpty()) {
                    for (ClassInfo classInfo : extraClass) {
                        loadScriptNodeResourceClass(classInfo.getClassFilePath(), classInfo.getClassName());
                    }
                }

                // 1 不是class，编译位class
                String classFilePath = botConfig.getClassFilePath();

                // 2 加载class
                Class<?> aClass = loadScriptNodeResourceClass(classFilePath, botConfig.getClassName());

                log.info("[{}] class load success ", botKey);

                if (AutoLaunchBot.class.equals(aClass.getSuperclass())) {
                    Class<AutoLaunchBot<?>> botClass = (Class<AutoLaunchBot<?>>) aClass;

                    boolean launch = autoLaunchBotKeys.contains(botKey);

                    // Step 3 启动bot
                    AutoLaunchBot<?> autoLaunchBot = ScriptBotLauncher.launch(botClass, botConfig, botApi, bot -> {
                        bot.setBotStatusChangeHandler((oldStatus, newStatus) -> {
                            // 3.1 添加监听， bot状态改变时上报
                            if (newStatus == BotStatus.RUNNING) {
                                botScriptAgent.addRunningBot(bot.getBotInfo().getName(), botKey, bot);
                            }

                            if (newStatus == BotStatus.STOPPED || newStatus == BotStatus.SHUTDOWN) {
                                botScriptAgent.removeRunningBot(bot.getBotInfo().getName(), botKey);
                            }
                        });
                        return true;
                    }, launch);

                    // Step 4 添加进菜单
                    if (botConfig.isCommandMenu()) {
                        ScriptBotLauncher.addBotInMenu(botKey, autoLaunchBot);
                    }
                } else {
                    log.info("[{}] class[{}} illegal, must extends AutoLaunchBot.class", botKey, classFilePath);
                }

            } catch (BotStartException | BotInitException e) {
                log.error("script botKey[{}] auto launch error", botKey, e);
            } catch (Exception e) {
                throw new RuntimeException("load class error", e);
            }
        }

        // 启动CMD
        ScriptBotLauncher.startCommandLineMenu();
    }

    /**
     * 加载script bot的class文件
     *
     * @param classFilePath classFilePath
     * @param className className
     * @return 已加载的BotClass文件
     * @throws Exception Exception
     */
    private Class<?> loadScriptNodeResourceClass(String classFilePath, String className) throws Exception {
        if (classFilePath.endsWith(".java") && !DynamicJavaLoader.compileJavaFile(classFilePath)) {
            throw new RuntimeException(classFilePath + " compile to class error");
        }
        classFilePath = classFilePath.replace(".java", ".class");

        return DynamicJavaLoader.loadClassFromFile(classFilePath, className);
    }
}
