package com.huawei.it.scs.entity.input;

import lombok.Data;

/**
 * 服务单 sdi数据
 *
 * @author w30063450
 * @since 2024-10-11
 */

@Data
class ServiceRequestDO {
    public String serviceId;
    public String tenantId;
    public String categoryId;
    public String title;
    public String requestUserId;
    public String locationId;
    public String requestCi;
    public String levelId;
    public String status;
    public String attachment;
    public String incident;
    public String createTime;
    public String modifyTime;
    public String createUser;
    public String modifyUser;
    public String cloudId;
    public String serviceFlg;
    public String supporter;
    public String solution;
    public String realFilename;
    public String category;
    public String subcategoryId;
    public String subCategory;
    public String questionTemplate;
    public String groupId;
    public String groupName;
    public String closeType;
    public String supportLine;
    public String incidentFlgStatus;
    public String incidentStatus;
    public String incidentCloseType;
    public String downtimeStart;
    public String downtimeEnd;
    public String affectedCustomer;
    public String changeNumber;
    public String vendor;
    public String recommendCiSupported;
    public String pendingCustomerFlag;
    public String request;
    public String sourceName;
    public String callsNO;
    public String fromWebFlag;
    public String openTime;
    public String slaStatus;
    public String breakUser;
    public String breakGroup;
    public String closeTime;
    public String openGroup;
    public String label;
    public String satisfactionEvaluation;
    public String isRecommend;
    public String userEvaluation;
    public String otherSupplements;
    public String evaluationTime;
    public String evaluator;
    public String closeBy;
    public String closeGroup;
    public String resolveGroup;
    public String resolveBy;
    public String resolveTime;
    public String responseTime;
    public String formalFlag;
    public String internalNote;
    public String templateId;
    public String dataSource;
    public String solveTimely;
    public String promptResponse;
    public String caseNumber;
    public String dfId;
    public String ciModuleId;
    public String processFlag;
    public String complainBy;
    public String complainTime;
    public String thirdCategory;
    public String secondCategory;
    public String firstCategoryId;
    public String firstCategory;
    public String orderType;
    public String modifyType;
    public String ciModuleName;
    public String ciProductId;
    public String ciProductName;
    public String w3uuid;
    public String suggestionId;
    public String suggestionTitle;
    public String suggestionEvaluation;
    public String remark;
    public String estimatedResolvingTime;
    public String phoneNo;
    public String ownerName;
    public String modelId;
    public String extendVariable;
    public String modelName;
    public String requirementCiModuleId;
    public String requirementCiModuleName;
    public String requirementCiProductId;
    public String requirementCiProductName;
    public String expectResolvingTime;
    public String requestDescription;
    public String rrOwnerName;
    public String rrDemandId;
    public String rrDemandLinkAddress;
    public String rrDemandStatus;
    public String extendUrl;
    public String productName;
    public String productId;
    public String requestCiId;
    public String ciId;
    public String recommendRequestCi;
    public String recommendRequestCiId;
    public String solutionViewMode;
    public String requestViewMode;
    public String countryName;
    public String suggestionType;
    public String eaMapVoiceReceiver;
    public String eaMapVoice;
    public String evaluateTag;
    public String rootReasonCiId;
    public String rootReasonCiName;
    public String deliveryDepartName;
    public String deliveryDepartId;
    public String domainId;
    public String nodeName;
    public String nodeId;
    public String ciAppId;
    public String ciAppName;
    public String sessionId;
    public String thirdTicketNumber;
    public String thirdTicketType;
    public String thirdTicketLink;
    public String deptNameCn;
    public String processType;
    public String whetherToCreate;
    public String createTicketType;
    public String reminderCount1;
    public String reminderCount;
    public String opsLabels;
    public String w3todoUuid;
    public String resolveBy_w3account;
    public String w3TodoUuid;
    public String breakTime;
    public String breakCi;
    public String breakModuleId;
    public String estimatedBreakTime;
    public String alertType;
    public String developSlaStatus;
    public String developSlaBreakUser;
    public String developSlaBreakGroup;
    public java.sql.Timestamp opsCreateDate;
    public java.sql.Timestamp opsDt;
}
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2023-2023. All rights reserved.
 */

package com.huawei.it.scs;

import static org.apache.flink.table.api.Expressions.$;
import static org.apache.flink.table.api.Expressions.lit;

import com.huawei.it.scs.commons.event.DatasourceInfoResp;
import com.huawei.it.scs.commons.util.StartupPropertiesUtil;
import com.huawei.it.scs.commons.util.unidata.UniDataSourceUtil;

import com.alibaba.fastjson.JSONObject;

import lombok.extern.slf4j.Slf4j;

import org.apache.flink.api.common.restartstrategy.RestartStrategies;
import org.apache.flink.api.common.time.Time;
import org.apache.flink.api.java.utils.ParameterTool;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
import org.apache.flink.streaming.api.functions.source.SourceFunction;
import org.apache.flink.table.api.DataTypes;
import org.apache.flink.table.api.EnvironmentSettings;
import org.apache.flink.table.api.Table;
import org.apache.flink.table.api.Tumble;
import org.apache.flink.table.api.bridge.java.StreamTableEnvironment;

import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.TimeUnit;

/**
 * flink api 对接公共数据源
 *
 * @author fwx960259
 * @since 2022-12-26
 */
@Slf4j
public class FlinkApiCommonDsDemo {
    /**
     * main
     *
     * @param args args
     */
    public static void main(String[] args) {
        // 测试错误日志上报功能
        log.error("test scs error log");
        ParameterTool paraTool = ParameterTool.fromArgs(args);
        Properties properties = paraTool.getProperties();
        // 1.添加配置
        StartupPropertiesUtil.getInstance()
                             .attachProps(properties);
        // 2.添加本地调试配置，环境上不需要
        if (System.getProperty("os.name")
                  .contains("Windows")) {
            // 本地调试需要，环境不用 ：群组下的任意一个任务的id  详见readme.docx  2.2.2
            StartupPropertiesUtil.getInstance()
                                 .setProperty("flink.rtt.jobId", "4303295730");
        }
        // 3.添加需要的数据源列表   获取数据源id详见readme.docx  1.1.2
        List<String> dsIdList = new ArrayList<>();
        dsIdList.add("@ipd_ops_kafka_test@Kafka"); // kafka
        dsIdList.add("ioc3000@KWE022307216001"); // mysql
        // 4.获取数据源 DatasourceInfoResp 可参考readme.docx  2.2.3
        List<DatasourceInfoResp> uniDataSource = UniDataSourceUtil.getInstance()
                                                                  .getUniDataSource(dsIdList);
        DatasourceInfoResp kafkaInfoResp = uniDataSource.get(0);
        DatasourceInfoResp pgsqlInfoResp = uniDataSource.get(1);

        // 5.用户代码
        EnvironmentSettings fsSettings = EnvironmentSettings.newInstance()
                                                            .useBlinkPlanner()
                                                            .inStreamingMode()
                                                            .build();

        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();
        env.disableOperatorChaining();
        env.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, Time.of(5, TimeUnit.SECONDS)));

        StreamTableEnvironment fsTableEnv = StreamTableEnvironment.create(env, fsSettings);
        try {
            fsTableEnv.executeSql("CREATE TABLE\n"
                                  + "  `sdi_v2_t_importal_service_request_hi` (\n"
                                  + "    `record_id` STRING,\n"
                                  + "    `user_id` INT,\n"
                                  + "    `dept_id` STRING,\n"
                                  + "    `inspect_time` TIMESTAMP(3),\n"
                                  + "    WATERMARK FOR inspect_time AS inspect_time - INTERVAL '5' SECOND\n"
                                  + "  )\n"
                                  + "WITH\n"
                                  + "  (\n"
                                  + "    'connector' = 'kafka',\n"
                                  + "    'topic' = 'ipd_ops_yygzt_sd',\n"
                                  + "    'properties.bootstrap.servers' = '"
                                  + kafkaInfoResp.getConnectUrl()
                                  + "',\n"
                                  + "    'properties.group.id' = 'weigaoxi_test',\n"
                                  + "    'scan.startup.mode' = 'latest-offset',\n"
                                  + "    'format' = 'json'\n"
                                  + "  )");

            fsTableEnv.executeSql("CREATE TABLE dim_product(\n"
                                  + "\tdept_id STRING,\n"
                                  + "\tdept_cn_name STRING,\n"
                                  + "\tdept_en_name STRING\n"
                                  + ")  WITH (\n"
                                  + "'connector' = 'jdbc',\n"
                                  + "'password' = '"
                                  + pgsqlInfoResp.getPassword()
                                  + "',\n"
                                  + "'lookup.cache.max-rows' = '30000000',\n"
                                  + "'lookup.cache.ttl' = '3000',\n"
                                  + "'driver' = 'org.postgresql.Driver',\n"
                                  + "'table-name' = 'ioc3000.dim_pub_dept_t_copy',\n"
                                  + "'url' = '"
                                  + pgsqlInfoResp.getConnectUrl()
                                  + "',\n"
                                  + "'username' = '"
                                  + pgsqlInfoResp.getDbAccount()
                                  + "'\n"
                                  + ")");

            fsTableEnv.executeSql("CREATE TABLE outSink(\n"
                                  + "\trecord_id STRING,\n"
                                  + "\twindow_start_time TIMESTAMP(3),\n"
                                  + "\twindow_end_time TIMESTAMP(3),\n"
                                  + "\tdept_id STRING,\n"
                                  + "\tdept_cn_name STRING,\n"
                                  + "\tdept_en_name STRING,\n"
                                  + "\tuser_cnt INT\n"
                                  + ")  WITH (\n"
                                  + "'connector' = 'jdbc',\n"
                                  + "'password' = '"
                                  + pgsqlInfoResp.getPassword()
                                  + "',\n"
                                  + "'driver' = 'org.postgresql.Driver',\n"
                                  + "'sink.buffer-flush.interval' = '5s',\n"
                                  + "'sink.buffer-flush.max-rows' = '3000',\n"
                                  + "'table-name' = 'dev_unidata.dwr_ipd_ops_data_agg_test',\n"
                                  + "'url' = '"
                                  + pgsqlInfoResp.getConnectUrl()
                                  + "',\n"
                                  + "'username' = '"
                                  + pgsqlInfoResp.getDbAccount()
                                  + "'\n"
                                  + ")");

            Table tmpResult = fsTableEnv.from("ipd_ops_sdi_record_test")
                                        .window(Tumble.over(lit(10).seconds())
                                                      .on($("inspect_time"))
                                                      .as("w"))
                                        .groupBy($("w"), $("record_id"), $("dept_id"))
                                        .select($("w").start()
                                                      .as("window_start"),
                                                $("w").end()
                                                      .as("window_end"),
                                                $("w").proctime()
                                                      .as("proctime"),
                                                $("user_id").count()
                                                            .as("pv"),
                                                $("user_id").count()
                                                            .distinct()
                                                            .cast(DataTypes.INT())
                                                            .as("uv"),
                                                $("record_id"),
                                                $("dept_id").as("a_dept_id"));

            fsTableEnv.createTemporaryView("tmp_result", tmpResult);
            // 用lookup 实现维表key过期来维护维表的正确性
            fsTableEnv.executeSql("INSERT INTO outSink\n"
                                  + "SELECT record_id,\n"
                                  + "window_start as window_start_time,\n"
                                  + "window_end as window_end_time,\n"
                                  + "a_dept_id as dept_id,\n"
                                  + "dept_cn_name,\n"
                                  + "dept_en_name,\n"
                                  + "uv as user_cnt\n"
                                  + "FROM \n"
                                  + "tmp_result \n"
                                  + "LEFT OUTER JOIN\n"
                                  + " dim_product FOR SYSTEM_TIME AS OF tmp_result.proctime\n"
                                  + "ON tmp_result.a_dept_id = dim_product.dept_id");

        } catch (Exception exception) {
            exception.printStackTrace();
            log.error("main execute exception", exception);
        }
    }

    public static class SimpleStringGenerator implements SourceFunction<String> {
        private static final long serialVersionUID = 2174904787118597072L;

        boolean running = true;

        long i = 0;

        @Override
        public void run(SourceContext<String> ctx) throws Exception {
            JSONObject jsonObject = new JSONObject();
            while (running) {
                jsonObject.put("id", i++);
                ctx.collect(jsonObject.toJSONString());
                Thread.sleep(60000);
            }
        }

        @Override
        public void cancel() {
            running = false;
        }
    }
}
package com.huawei.it.scs;

/**
 * 功能描述
 *
 * @author w30063450
 * @since 2024-10-17
 */
interface GraphBuilder {
    GraphBuilder buildSourceGraph();

    GraphBuilder buildTransformGraph();

    GraphBuilder buildSinkGraph();

}
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2023-2023. All rights reserved.
 */

package com.huawei.it.scs;

import com.huawei.it.scs.commons.util.StartupPropertiesUtil;

import lombok.extern.slf4j.Slf4j;

import org.apache.flink.api.common.restartstrategy.RestartStrategies;
import org.apache.flink.api.common.time.Time;
import org.apache.flink.api.java.utils.ParameterTool;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
import org.apache.flink.table.api.EnvironmentSettings;
import org.apache.flink.table.api.bridge.java.StreamTableEnvironment;

import java.util.Properties;
import java.util.concurrent.TimeUnit;

/**
 * flink api 对接公共数据源
 *
 * @author fwx960259
 * @since 2022-12-26
 */
@Slf4j
public class ServiceOrderApp {
    /**
     * main
     *
     * @param args args
     */
    public static void main(String[] args) {

        // 测试错误日志上报功能
        log.info("#########service order app###########");
        ParameterTool paraTool = ParameterTool.fromArgs(args);
        Properties properties = paraTool.getProperties();

        StartupPropertiesUtil.getInstance().attachProps(properties);

        if (System.getProperty("os.name").contains("Windows")) {
            // 本地调试需要，环境不用 ：群组下的任意一个任务的id  详见readme.docx  2.2.2
            StartupPropertiesUtil.getInstance().setProperty("flink.rtt.jobId", "4303295730");
        }
        EnvironmentSettings fsSettings = EnvironmentSettings.newInstance().useBlinkPlanner().inStreamingMode().build();

        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();
        env.disableOperatorChaining();
        env.setRestartStrategy(RestartStrategies.fixedDelayRestart(3, Time.of(5, TimeUnit.SECONDS)));

        StreamTableEnvironment fsTableEnv = StreamTableEnvironment.create(env, fsSettings);
        try {
            // 建立流的执行图
            ServiceOrderGraphDirector director = new ServiceOrderGraphDirector();
            director.createServiceOrderGraph(new ServiceOrderGraphBuilder(fsTableEnv));
        } catch (Exception exception) {
            log.error("main execute exception", exception);
        }
    }

}

package com.huawei.it.scs;

import static org.apache.flink.table.api.Expressions.$;
import static org.apache.flink.table.api.Expressions.call;

import com.huawei.it.scs.commons.event.DatasourceInfoResp;
import com.huawei.it.scs.commons.util.unidata.UniDataSourceUtil;

import org.apache.flink.table.api.Table;
import org.apache.flink.table.api.bridge.java.StreamTableEnvironment;
import org.apache.flink.table.functions.TableFunction;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * 功能描述
 *
 * @author w30063450
 * @since 2024-10-17
 */
final class ServiceOrderGraphBuilder implements GraphBuilder {

    private StreamTableEnvironment tableEnv;

    private ServiceOrderGraphBuilder() {
    }

    ServiceOrderGraphBuilder(StreamTableEnvironment tableEnv) {
        this.tableEnv = tableEnv;
    }

    @Override
    public GraphBuilder buildSourceGraph() {
        return this.buildSubOrderSource()
                   .buildUpdateSemaphoreSource();
    }

    @Override
    public GraphBuilder buildTransformGraph() {
        return this.unionUpdateSignal()
                   .buildSubOrderInfo()
                   .buildServiceOrderProcess().buildServiceOrderCombine();
    }

    @Override
    public GraphBuilder buildSinkGraph() {
        return this.buildServiceOrderSink();
    }

    private ServiceOrderGraphBuilder buildUpdateSemaphoreSource() {
        List<String> dsIdList = new ArrayList<>();
        dsIdList.add("@ipd_ops_kafka_test@Kafka"); // kafka
        dsIdList.add("ioc3000@KWE022307216001"); // mysql
        // 4.获取数据源 DatasourceInfoResp 可参考readme.docx  2.2.3
        List<DatasourceInfoResp> uniDataSource = UniDataSourceUtil.getInstance()
                                                                  .getUniDataSource(dsIdList);
        DatasourceInfoResp kafkaInfoResp = uniDataSource.get(0);
        DatasourceInfoResp pgsqlInfoResp = uniDataSource.get(1);

        String kafkaGourpId = "'weigaoxi_test'";
        tableEnv.executeSql("CREATE TABLE service_order_update (\n"
                            + "  primary key (service_id) not enforced,\n"
                            + "  `service_id` STRING\n"
                            + ")"
                            + "WITH\n"
                            + "  (\n"
                            + "    'connector' = 'kafka',\n"
                            + "    'topic' = 'sdi_importal_service_request_full_sync',\n"
                            + "    'properties.bootstrap.servers' = '"
                            + kafkaInfoResp.getConnectUrl()
                            + "',\n"
                            + "    'properties.group.id' = "
                            + kafkaGourpId
                            + ",\n"
                            + "    'scan.startup.mode' = 'latest-offset',\n"
                            + "    'format' = 'json'\n"
                            + "  )");

        tableEnv.executeSql("CREATE TABLE alm_defect_update (\n"
                            + "  primary key (source_number) not enforced,\n"
                            + "  `source_system` STRING,\n"
                            + "  `source_number` STRING\n"
                            + ")"
                            + "WITH\n"
                            + "  (\n"
                            + "    'connector' = 'kafka',\n"
                            + "    'topic' = 'sdi_alm_defect_real_time_full_sync',\n"
                            + "    'properties.bootstrap.servers' = '"
                            + kafkaInfoResp.getConnectUrl()
                            + "',\n"
                            + "    'properties.group.id' = "
                            + kafkaGourpId
                            + ",\n"
                            + "    'scan.startup.mode' = 'latest-offset',\n"
                            + "    'format' = 'json'\n"
                            + "  )");

        tableEnv.executeSql("CREATE TABLE ticket_td_order_update (\n"
                            + "  primary key (related_service_order) not enforced,\n"
                            + "  `related_service_order` STRING\n"
                            + ")"
                            + "WITH\n"
                            + "  (\n"
                            + "    'connector' = 'kafka',\n"
                            + "    'topic' = 'sdi_ticket_td_order_full_sync',\n"
                            + "    'properties.bootstrap.servers' = '"
                            + kafkaInfoResp.getConnectUrl()
                            + "',\n"
                            + "    'properties.group.id' = "
                            + kafkaGourpId
                            + ",\n"
                            + "    'scan.startup.mode' = 'latest-offset',\n"
                            + "    'format' = 'json'\n"
                            + "  )");

        tableEnv.executeSql("CREATE TABLE importal_suggestion_order_update (\n"
                            + "  primary key (suggestion_id) not enforced,\n"
                            + "  `suggestion_id` STRING\n"
                            + ")"
                            + "WITH\n"
                            + "  (\n"
                            + "    'connector' = 'kafka',\n"
                            + "    'topic' = 'sdi_importal_suggestion_order_full_sync',\n"
                            + "    'properties.bootstrap.servers' = '"
                            + kafkaInfoResp.getConnectUrl()
                            + "',\n"
                            + "    'properties.group.id' = "
                            + kafkaGourpId
                            + ",\n"
                            + "    'scan.startup.mode' = 'latest-offset',\n"
                            + "    'format' = 'json'\n"
                            + "  )");

        tableEnv.executeSql("CREATE TABLE probsummarym_update (\n"
                            + "  primary key (number) not enforced,\n"
                            + "  `number` STRING\n"
                            + ")"
                            + "WITH\n"
                            + "  (\n"
                            + "    'connector' = 'kafka',\n"
                            + "    'topic' = 'sdi_probsummarym_full_sync',\n"
                            + "    'properties.bootstrap.servers' = '"
                            + kafkaInfoResp.getConnectUrl()
                            + "',\n"
                            + "    'properties.group.id' = "
                            + kafkaGourpId
                            + ",\n"
                            + "    'scan.startup.mode' = 'latest-offset',\n"
                            + "    'format' = 'json'\n"
                            + "  )");

        tableEnv.executeSql("CREATE TABLE alm_raw_requirement_update (\n"
                            + "  primary key (integrated_system_id) not enforced,\n"
                            + "  `source_system` STRING,\n"
                            + "  `integrated_system_id` STRING\n"
                            + ")"
                            + "WITH\n"
                            + "  (\n"
                            + "    'connector' = 'kafka',\n"
                            + "    'topic' = 'sdi_alm_raw_requirement_full_sync',\n"
                            + "    'properties.bootstrap.servers' = '"
                            + kafkaInfoResp.getConnectUrl()
                            + "',\n"
                            + "    'properties.group.id' = "
                            + kafkaGourpId
                            + ",\n"
                            + "    'scan.startup.mode' = 'latest-offset',\n"
                            + "    'format' = 'json'\n"
                            + "  )");

        return this;
    }

    private ServiceOrderGraphBuilder buildSubOrderSource() {
        List<String> dsIdList = new ArrayList<>();
        dsIdList.add("@ipd_ops_kafka_test@Kafka"); // kafka
        dsIdList.add("ioc3000@KWE022307216001"); // mysql
        // 4.获取数据源 DatasourceInfoResp 可参考readme.docx  2.2.3
        List<DatasourceInfoResp> uniDataSource = UniDataSourceUtil.getInstance()
                                                                  .getUniDataSource(dsIdList);
        DatasourceInfoResp pgsqlInfoResp = uniDataSource.get(1);

        String kafkaGourpId = "'weigaoxi_test'";

        tableEnv.executeSql("CREATE TABLE importal_service_request (\n"
                            + "  `service_id` STRING,\n"
                            + "  `request_user_id` STRING,\n"
                            + "  `create_user` STRING,\n"
                            + "  `open_time` STRING,\n"
                            + "  `estimated_break_time` STRING,\n"
                            + "  `create_ticket_type` STRING,\n"
                            + "  `source_name` STRING,\n"
                            + "  `title` STRING,\n"
                            + "  `request` STRING,\n"
                            + "  `extend_url` STRING,\n"
                            + "  `supporter` STRING,\n"
                            + "  `alert_type` STRING,\n"
                            + "  `resolve_by` STRING,\n"
                            + "  `resolve_time` STRING,\n"
                            + "  `close_time` STRING,\n"
                            + "  `request_ci_id` STRING,\n"
                            + "  `formal_flag` STRING,\n"
                            + "  `process_type` STRING,\n"
                            + "  `category` STRING,\n"
                            + "  `reminder_count` STRING,\n"
                            + "  `solution` STRING,\n"
                            + "  `rr_demand_id` STRING,\n"
                            + "  `suggestion_id` STRING,\n"
                            + "  `ci_module_id` STRING,\n"
                            + "  `status` STRING,\n"
                            + "  `incident` STRING\n"
                            + "  )  WITH (\n"
                            + "'connector' = 'jdbc',\n"
                            + "'password' = '"
                            + pgsqlInfoResp.getPassword()
                            + "',\n"
                            + "'lookup.cache.max-rows' = '3000000',\n"
                            + "'lookup.cache.ttl' = '3000',\n"
                            + "'driver' = 'org.postgresql.Driver',\n"
                            + "'table-name' = 'ioc3000.sdi_t_importal_service_request_hi',\n"
                            + "'url' = '"
                            + pgsqlInfoResp.getConnectUrl()
                            + "',\n"
                            + "'username' = '"
                            + pgsqlInfoResp.getDbAccount()
                            + "'\n"
                            + ")");

        tableEnv.executeSql("CREATE TABLE importal_suggestion_order (\n"
                            + "  `suggestion_id` STRING,\n"
                            + "  `open_time` STRING,\n"
                            + "  `suggestion_title` STRING,\n"
                            + "  `opened_by` STRING,\n"
                            + "  `supporter` STRING,\n"
                            + "  `owner_name` STRING,\n"
                            + "  `analysis_result` STRING,\n"
                            + "  `update_status` STRING,\n"
                            + "  `rr_demand_status` STRING\n"
                            + "  )   WITH (\n"
                            + "'connector' = 'jdbc',\n"
                            + "'password' = '"
                            + pgsqlInfoResp.getPassword()
                            + "',\n"
                            + "'lookup.cache.max-rows' = '3000000',\n"
                            + "'lookup.cache.ttl' = '3000',\n"
                            + "'driver' = 'org.postgresql.Driver',\n"
                            + "'table-name' = 'ioc3000.sdi_v2_t_importal_suggestion_order_hi',\n"
                            + "'url' = '"
                            + pgsqlInfoResp.getConnectUrl()
                            + "',\n"
                            + "'username' = '"
                            + pgsqlInfoResp.getDbAccount()
                            + "'\n"
                            + ")");

        tableEnv.executeSql("CREATE TABLE probsummarym (\n"
                            + "  `number` STRING,\n"
                            + "  `open_time` STRING,\n"
                            + "  `brief_description` STRING,\n"
                            + "  `problem_status` STRING,\n"
                            + "  `contact_name` STRING,\n"
                            + "  `opened_by` STRING,\n"
                            + "  `assignee_name` STRING,\n"
                            + "  `hw_resolved_by` STRING,\n"
                            + "  `closed_by` STRING,\n"
                            + "  `sla_expire` STRING,\n"
                            + "  `sla_breach` STRING,\n"
                            + "  `priority_code` STRING,\n"
                            + "  `severity` STRING\n"
                            + "  )   WITH (\n"
                            + "'connector' = 'jdbc',\n"
                            + "'password' = '"
                            + pgsqlInfoResp.getPassword()
                            + "',\n"
                            + "'lookup.cache.max-rows' = '3000000',\n"
                            + "'lookup.cache.ttl' = '3000',\n"
                            + "'driver' = 'org.postgresql.Driver',\n"
                            + "'table-name' = 'ioc3000.sdi_probsummarym1_full',\n"
                            + "'url' = '"
                            + pgsqlInfoResp.getConnectUrl()
                            + "',\n"
                            + "'username' = '"
                            + pgsqlInfoResp.getDbAccount()
                            + "'\n"
                            + ")");

        tableEnv.executeSql("CREATE TABLE alm_raw_requirement (\n"
                            + "  `integrated_system_id` STRING,\n"
                            + "  `requirement_number` STRING,\n"
                            + "  `created_date` STRING,\n"
                            + "  `title` STRING,\n"
                            + "  `status` STRING,\n"
                            + "  `submitted_by` STRING,\n"
                            + "  `created_by` STRING,\n"
                            + "  `owner` STRING,\n"
                            + "  `source_system` STRING\n"
                            + "  )  WITH (\n"
                            + "'connector' = 'jdbc',\n"
                            + "'password' = '"
                            + pgsqlInfoResp.getPassword()
                            + "',\n"
                            + "'lookup.cache.max-rows' = '3000000',\n"
                            + "'lookup.cache.ttl' = '3000',\n"
                            + "'driver' = 'org.postgresql.Driver',\n"
                            + "'table-name' = 'ioc3000.sdi_alm_raw_requirement_real_time_full',\n"
                            + "'url' = '"
                            + pgsqlInfoResp.getConnectUrl()
                            + "',\n"
                            + "'username' = '"
                            + pgsqlInfoResp.getDbAccount()
                            + "'\n"
                            + ")");

        tableEnv.executeSql("CREATE TABLE alm_defect (\n"
                            + "  `source_number` STRING,\n"
                            + "  `defect_number` STRING,\n"
                            + "  `created_date` STRING,\n"
                            + "  `title` STRING,\n"
                            + "  `defect_status` STRING,\n"
                            + "  `defect_created_by` STRING,\n"
                            + "  `created_by` STRING,\n"
                            + "  `current_handler` STRING,\n"
                            + "  `turn_confirm_time` STRING,\n"
                            + "  `severity` STRING,\n"
                            + "  `source_system` STRING\n"
                            + "  )  WITH (\n"
                            + "'connector' = 'jdbc',\n"
                            + "'password' = '"
                            + pgsqlInfoResp.getPassword()
                            + "',\n"
                            + "'lookup.cache.max-rows' = '3000000',\n"
                            + "'lookup.cache.ttl' = '3000',\n"
                            + "'driver' = 'org.postgresql.Driver',\n"
                            + "'table-name' = 'ioc3000.sdi_alm_defect_real_time_full',\n"
                            + "'url' = '"
                            + pgsqlInfoResp.getConnectUrl()
                            + "',\n"
                            + "'username' = '"
                            + pgsqlInfoResp.getDbAccount()
                            + "'\n"
                            + ")");

        tableEnv.executeSql("CREATE TABLE ticket_td_order (\n"
                            + "  `related_service_order` STRING,\n"
                            + "  `td_order_id` STRING,\n"
                            + "  `open_datetime` STRING,\n"
                            + "  `title` STRING,\n"
                            + "  `status` STRING,\n"
                            + "  `td_type` STRING,\n"
                            + "  `request_user_id` STRING,\n"
                            + "  `opened_by` STRING,\n"
                            + "  `curr_processor` STRING,\n"
                            + "  `estimated_finish_time` STRING,\n"
                            + "  `sla_status` STRING\n"
                            + "  )  WITH (\n"
                            + "'connector' = 'jdbc',\n"
                            + "'password' = '"
                            + pgsqlInfoResp.getPassword()
                            + "',\n"
                            + "'lookup.cache.max-rows' = '3000000',\n"
                            + "'lookup.cache.ttl' = '3000',\n"
                            + "'driver' = 'org.postgresql.Driver',\n"
                            + "'table-name' = 'ioc3000.sdi_v2_t_ticket_td_order_hi',\n"
                            + "'url' = '"
                            + pgsqlInfoResp.getConnectUrl()
                            + "',\n"
                            + "'username' = '"
                            + pgsqlInfoResp.getDbAccount()
                            + "'\n"
                            + ")");

        tableEnv.executeSql("CREATE TABLE dim_alm_user (\n"
                            + "  `id` STRING,\n"
                            + "  `username` STRING\n"
                            + "  )  WITH (\n"
                            + "'connector' = 'jdbc',\n"
                            + "'password' = '"
                            + pgsqlInfoResp.getPassword()
                            + "',\n"
                            + "'lookup.cache.max-rows' = '3000000',\n"
                            + "'lookup.cache.ttl' = '3000',\n"
                            + "'driver' = 'org.postgresql.Driver',\n"
                            + "'table-name' = 'ioc3000.dim_alm_user_9250',\n"
                            + "'url' = '"
                            + pgsqlInfoResp.getConnectUrl()
                            + "',\n"
                            + "'username' = '"
                            + pgsqlInfoResp.getDbAccount()
                            + "'\n"
                            + ")");

        tableEnv.executeSql("CREATE TABLE dim_pub_dimension_ipmt (\n"
                            + "  `dimension_code` STRING\n"
                            + "  )  WITH (\n"
                            + "'connector' = 'jdbc',\n"
                            + "'password' = '"
                            + pgsqlInfoResp.getPassword()
                            + "',\n"
                            + "'lookup.cache.max-rows' = '3000000',\n"
                            + "'lookup.cache.ttl' = '3000',\n"
                            + "'driver' = 'org.postgresql.Driver',\n"
                            + "'table-name' = 'ioc3000.dim_pub_dimension_ipmt',\n"
                            + "'url' = '"
                            + pgsqlInfoResp.getConnectUrl()
                            + "',\n"
                            + "'username' = '"
                            + pgsqlInfoResp.getDbAccount()
                            + "'\n"
                            + ")");

        tableEnv.executeSql("CREATE TABLE incidentsm_hi (\n"
                            + "  `incident_id` STRING,\n"
                            + "  `open` STRING\n"
                            + "  )  WITH (\n"
                            + "'connector' = 'jdbc',\n"
                            + "'password' = '"
                            + pgsqlInfoResp.getPassword()
                            + "',\n"
                            + "'lookup.cache.max-rows' = '3000000',\n"
                            + "'lookup.cache.ttl' = '3000',\n"
                            + "'driver' = 'org.postgresql.Driver',\n"
                            + "'table-name' = 'ioc3000.dwi_v2_incidentsm1_hi',\n"
                            + "'url' = '"
                            + pgsqlInfoResp.getConnectUrl()
                            + "',\n"
                            + "'username' = '"
                            + pgsqlInfoResp.getDbAccount()
                            + "'\n"
                            + ")");

        tableEnv.executeSql("CREATE TABLE importal_service_history (\n"
                            + "  `service_id` STRING,\n"
                            + "  `create_time` STRING,\n"
                            + "  `create_user` STRING,\n"
                            + "  `update_msg` STRING"
                            + "  )  WITH (\n"
                            + "'connector' = 'jdbc',\n"
                            + "'password' = '"
                            + pgsqlInfoResp.getPassword()
                            + "',\n"
                            + "'lookup.cache.max-rows' = '3000000',\n"
                            + "'lookup.cache.ttl' = '3000',\n"
                            + "'driver' = 'org.postgresql.Driver',\n"
                            + "'table-name' = 'ioc3000.dwi_v2_t_importal_service_history_hi',\n"
                            + "'url' = '"
                            + pgsqlInfoResp.getConnectUrl()
                            + "',\n"
                            + "'username' = '"
                            + pgsqlInfoResp.getDbAccount()
                            + "'\n"
                            + ")");

        tableEnv.executeSql("CREATE TABLE dim_pub_rels_emp_dept (\n"
                            + "  `employee_no` STRING,\n"
                            + "  `sla_breach` STRING,\n"
                            + "  `new_w3_account` STRING\n"
                            + "  )  WITH (\n"
                            + "'connector' = 'jdbc',\n"
                            + "'password' = '"
                            + pgsqlInfoResp.getPassword()
                            + "',\n"
                            + "'lookup.cache.max-rows' = '3000000',\n"
                            + "'lookup.cache.ttl' = '3000',\n"
                            + "'driver' = 'org.postgresql.Driver',\n"
                            + "'table-name' = 'ioc3000.dim_pub_rels_emp_dept_t',\n"
                            + "'url' = '"
                            + pgsqlInfoResp.getConnectUrl()
                            + "',\n"
                            + "'username' = '"
                            + pgsqlInfoResp.getDbAccount()
                            + "'\n"
                            + ")");

        tableEnv.executeSql("CREATE TABLE dim_pub_ops_consumer_dimension_dept (\n"
                            + "  `dept_code` STRING,\n"
                            + "  `dept_cn_name` STRING,\n"
                            + "  `dept_level` STRING,\n"
                            + "  `is_def` STRING\n"
                            + "  )  WITH (\n"
                            + "'connector' = 'jdbc',\n"
                            + "'password' = '"
                            + pgsqlInfoResp.getPassword()
                            + "',\n"
                            + "'lookup.cache.max-rows' = '3000000',\n"
                            + "'lookup.cache.ttl' = '3000',\n"
                            + "'driver' = 'org.postgresql.Driver',\n"
                            + "'table-name' = 'ioc3000.dim_pub_ops_consumer_dimension_dept_t',\n"
                            + "'url' = '"
                            + pgsqlInfoResp.getConnectUrl()
                            + "',\n"
                            + "'username' = '"
                            + pgsqlInfoResp.getDbAccount()
                            + "'\n"
                            + ")");

        return this;
    }

    private ServiceOrderGraphBuilder buildSubOrderInfo() {
        Table dimServiceOrder = tableEnv.from("update_service_order")
                                        .join(tableEnv.from("importal_service_request"), $("service_id"))
                                        .where($(
                                            "COALESCE(status,'') <> '4' and COALESCE(formal_flag,'') <> '-1' and service_id like 'SD%'"))
                                        .select($("service_id"),
                                                $("request_user_id"),
                                                $("create_user"),
                                                $("open_time"),
                                                $("estimated_break_time"),
                                                $("create_ticket_type"),
                                                $("source_name"),
                                                $("title"),
                                                $("request"),
                                                $("extend_url"),
                                                $("supporter"),
                                                $("alert_type"),
                                                $("resolve_by"),
                                                $("resolve_time"),
                                                $("close_time"),
                                                $("request_ci_id"),
                                                $("formal_flag"),
                                                $("process_type"),
                                                $("category"),
                                                $("reminder_count"),
                                                $("solution"),
                                                $("rr_demand_id"),
                                                $("suggestion_id"),
                                                $("ci_module_id"),
                                                $("status"),
                                                $("incident"),
                                                $("create_time"),
                                                $("update_msg"));
        tableEnv.createTemporaryView("dim_service_order", dimServiceOrder);

        Table subOrderInfo = tableEnv.from("dim_service_order")
                                     .select($("service_id"))
                                     .join(
                                         // 意见单
                                         tableEnv.from("dim_service_order")
                                                 .join(tableEnv.from("dim_pub_dimension_ipmt"),
                                                       $("ci_module_id = dimension_code"))
                                                 .where($("COALESCE(suggestion_id,'') <> ''"))
                                                 .join(tableEnv.from("importal_suggestion_order"), $("suggestion_id"))
                                                 .select($("service_id"),
                                                         $("suggestion_id"),
                                                         $("suggestion_title"),
                                                         $("`user_id` as user_by"),
                                                         $("opened_by"),
                                                         $("COALESCE(t2.supporter,t2.owner_name) as curr_person"),
                                                         $("regexp_extract(t2.analysis_result,'解决方案 \\\\(Solution\\\\)：(.*?)\\\\<\\\\/p\\\\>',1) as solution"),
                                                         $("case when update_status = '0' then '意见关闭'\n"
                                                           + "              when rr_demand_status = '待分析' then '意见处理中'\n"
                                                           + "              when rr_demand_status = '处理中' then '需求处理中'\n"
                                                           + "              when rr_demand_status = '纳入变革项目' then '需求处理中'\n"
                                                           + "              when rr_demand_status = '纳入规划' then '需求纳入规划'\n"
                                                           + "              when rr_demand_status = '未采纳' then '需求关闭-未采纳'\n"
                                                           + "              when rr_demand_status = '需求实施' then '需求实施'\n"
                                                           + "              when rr_demand_status = '已实现' then '需求关闭-已实现'\n"
                                                           + "              when rr_demand_status = '已关闭' then '意见处理中'\n"
                                                           + "              when update_status in ('1','2') and COALESCE(solution,'') = '' then '意见待处理'\n"
                                                           + "                  else '意见处理中'\n"
                                                           + "           end                          as status "),
                                                         $("from_unixtime(unix_timestamp(open_time) + 28800,  'yyyy-MM-dd HH:mm:ss') as open_time"),
                                                         $("round((current_timestamp() - open_time) / (60*60*24))) as resolve_duration"))
                                                 .select($("service_id"),
                                                         $("suggestion_id"),
                                                         $("case when status not in ('意见关闭','Closed','已拒绝','关闭','无需实现','已关闭','已拒绝','已取消') \n"
                                                           + "      then 1 else 0 end as is_open_OP")), $("service_id"))
                                     .join(

                                         // 事件单
                                         tableEnv.from("dim_service_order")
                                                 .join(tableEnv.from("dim_pub_dimension_ipmt"),
                                                       $("ci_module_id = dimension_code"))
                                                 .where($("COALESCE(incident,'') <> ''"))
                                                 .join(tableEnv.from("probsummarym"), $("incident = number"))
                                                 .select($("service_id"),
                                                         $("incident"),
                                                         $("brief_description"),
                                                         $("problem_status"),
                                                         $("substring(contact_name, position(' ' IN contact_name) - 1) as user_by"),
                                                         $("opened_by"),
                                                         $("coalesce(assignee_name, hw_resolved_by, closed_by) as curr_person"),
                                                         $("case when problem_status not in ('Closed','Resolved','Pending Customer','Pending Vendor','Pending Change','Pending Bussiness') "
                                                           + "and upper(sla_breach) != 'T' \n"
                                                           + "then from_unixtime(unix_timestamp(sla_expire) + 28800,  'yyyy-MM-dd HH:mm:ss') else cast(null as string) \n"
                                                           + "end as sla_time"),
                                                         $("from_unixtime(unix_timestamp(open_time) + 28800,  'yyyy-MM-dd HH:mm:ss') as open_time"),
                                                         $("round((current_timestamp() - open_time) / (60*60*24))) as resolve_duration"),
                                                         $("case when priority_code = '3' and severity = '1' then '3A' else t1.priority_code end as im_level"),
                                                         $("round((current_timestamp() - open_time) / (60*60*24))) as status_stay_duration"))
                                                 .select($("service_id"),
                                                         $("number as ticket_number"),
                                                         $("case when problem_status not in ('意见关闭','Closed','已拒绝','关闭','无需实现','已关闭','已拒绝','已取消') \n"
                                                           + "      then 1 else 0 end as is_open_IM")), $("service"))
                                     // 需求单
                                     // TODO

                                     .join(
                                         // 缺陷单
                                         tableEnv.from("dim_service_order")
                                                 .join(
                                                     tableEnv.from("alm_defect")
                                                             .where($(
                                                                 "source_number like 'SD%' and source_system in ('UNT','cloudreq')")),
                                                     $("service_id = source_number"))
                                                 .select($("source_number"),
                                                         $("defect_number"),
                                                         $("created_date"),
                                                         $("title"),
                                                         $("case when defect_status = '初始'   then '提交' \n"
                                                           + "       when defect_status = '开发'   then '修复'\n"
                                                           + "       when defect_status = '待发布' then '确认'\n"
                                                           + "       when defect_status = '完成'   then '关闭'\n"
                                                           + "else t1.defect_status end  as status"),
                                                         $("defect_created_by"),
                                                         $("created_by"),
                                                         $("current_handler"),
                                                         $("round(\n"
                                                           + "           (\n"
                                                           + "            current_timestamp - unix_timestamp(created_date, 'yyyy-MM-dd HH:mm:ss')\n"
                                                           + "           ) / (60 * 60 * 24), 2) as resolve_duration"),
                                                         $("turn_confirm_time"),
                                                         $("severity"),
                                                         $("round(\n"
                                                           + "           (\n"
                                                           + "             unix_timestamp(turn_confirm_time, 'yyyy-MM-dd HH:mm:ss') - unix_timestamp(created_date, 'yyyy-MM-dd HH:mm:ss')\n"
                                                           + "           ) / (60 * 60 * 24), 2) as resolve_duration"))
                                                 .select($("service_id"),
                                                         $("defect_number as dts_number"),
                                                         $("case when status not in ('意见关闭','Closed','已拒绝','关闭','无需实现','已关闭','已拒绝','已取消') \n"
                                                           + "      then 1 else 0 end as is_open_DTS")),
                                         $("service_id"))
                                     .join(
                                         // td单
                                         tableEnv.from("dim_service_order")
                                                 .join(tableEnv.from("ticket_td_order")
                                                               .where($("related_service_order like 'SD%'")),
                                                       $("service_id"))
                                                 .select($("related_service_order as service_id"),
                                                         $("td_order_id"),
                                                         $("from_unixtime(unix_timestamp(open_datetime) + 28800,  'yyyy-MM-dd HH:mm:ss') as open_time"),
                                                         $("title"),
                                                         $("case when status = '0'  then '起草中'\n"
                                                           + "      when t1.status = '1'  then '待确认'\n"
                                                           + "      when status = '2'  then '处理中'\n"
                                                           + "      when status = '3'  then '待验证'\n"
                                                           + "      when status = '4'  then '已关闭'\n"
                                                           + "      when status = '11' then '分析中'\n"
                                                           + "      when status = '12' then '拒绝待确认'\n"
                                                           + "      when status = '20' then '已拒绝'\n"
                                                           + "      when status = '30' then '已取消'\n"
                                                           + "end as status"),
                                                         $("td_type as question_type"),
                                                         // $("case when t1.td_type = '1' then '工程能力类'\n" +
                                                         //   "      when t1.td_type = '2' then '数据类'\n" +
                                                         //   "      when t1.td_type = '3' then '流程类'\n" +
                                                         //   "      when t1.td_type = '4' then '业务部门类'\n" + "end as question_type"),
                                                         $("request_user_id"),
                                                         $("opened_by"),
                                                         $("curr_processor"),
                                                         $("case when sla_status = '11'  then '分析中' end as response_sla_status"),
                                                         $("case when sla_status = '2'   then '处理中' end as close_sla_status"),
                                                         $("case when status not in ('待验证','已关闭','已拒绝','已取消') "
                                                           + "       then from_unixtime(unix_timestamp(t1.estimated_finish_time) + 28800,  'yyyy-MM-dd HH:mm:ss') \n"
                                                           + "       else cast(null as string)\n"
                                                           + "end as sla_time"),
                                                         $("round(\n"
                                                           + "           (\n"
                                                           + "             unix_timestamp(turn_confirm_time, 'yyyy-MM-dd HH:mm:ss') - unix_timestamp(created_date, 'yyyy-MM-dd HH:mm:ss')\n"
                                                           + "           ) / (60 * 60 * 24), 2) as resolve_duration")

                                                        )
                                                 .select($("service_id"),
                                                         $("defect_number as td_number"),
                                                         $("case when question_type = '1'  then defect_number\n"
                                                           + "      else cast(null as string)\n"
                                                           + "end as td_capacity_number"),
                                                         $("case when question_type = '2'  then defect_number\n"
                                                           + "      else cast(null as string)\n"
                                                           + "end as td_object_number"),
                                                         $("case when question_type = '3'  then defect_number\n"
                                                           + "      else cast(null as string)\n"
                                                           + "end as td_process_number"),
                                                         $("case when question_type = '4'  then defect_number\n"
                                                           + "      else cast(null as string)\n"
                                                           + "end as td_dept_number"),
                                                         $("case when status not in ('意见关闭','Closed','已拒绝','关闭','无需实现','已关闭','已拒绝','已取消') \n"
                                                           + "      then 1 else 0 end as is_open_TD"))
                                                 .groupBy($("service_id"))
                                                 .select($("service_id"),
                                                         $("td_number").max()
                                                                       .as("td_number"),
                                                         $("td_capacity_number").max()
                                                                                .as("td_capacity_number"),
                                                         $("td_object_number").max()
                                                                              .as("td_object_number"),
                                                         $("td_process_number").max()
                                                                               .as("td_process_number"),
                                                         $("td_dept_number").max()
                                                                            .as("td_dept_number"),
                                                         $("is_open_TD").sum()
                                                                        .as("is_open_TD")), $("service_id"))
                                     .select($("service_id"),
                                             $("suggestion_id"),
                                             $("ticket_number"),
                                             $("dts_number"),
                                             // $("rr_number"),
                                             $("td_number"),
                                             $("td_capacity_number"),
                                             $("td_object_number"),
                                             $("td_process_number"),
                                             $("td_dept_number"),
                                             $("sum(is_open_OP, is_open_IM, is_open_DTS, is_open_TD) as is_open_sub"));

        tableEnv.createTemporaryView("sub_order_info", subOrderInfo);

        return this;
    }

    private ServiceOrderGraphBuilder unionUpdateSignal() {

        // flink table-api 方式
        Table updateServiceOrder = tableEnv.from("service_order_update")
                                           .select($("service_id"))
                                           .union(tableEnv.from("alm_defect_update")
                                                          .where($(
                                                              "source_number like 'SD%' and source_system in ('UNT','cloudreq')"))
                                                          .join(tableEnv.from("importal_service_request"),
                                                                $("source_number = service_id"))
                                                          .select($("service_id")))
                                           .union(tableEnv.from("ticket_td_order_update")
                                                          .where($("related_service_order like 'SD%'"))
                                                          .join(tableEnv.from("service_request"),
                                                                $("related_service_order = service_id"))
                                                          .select($("service_id")))
                                           .union(tableEnv.from("importal_suggestion_order_update")
                                                          .join(tableEnv.from("service_request"), $("suggestion_id"))
                                                          .select($("service_id")))
                                           .union(tableEnv.from("probsummarym_update")
                                                          .join(tableEnv.from("service_request"),
                                                                $("number = incident"))
                                                          .select($("service_id")))
                                           .union(tableEnv.from("alm_raw_requirement_update")
                                                          .where($("instr(integrated_system_id,'SD')  > 0"))
                                                          .joinLateral(call(SplitStringFunction.class, $("service_id")))
                                                          .where($(
                                                              "source_system in ('UNT', 'cloudreq') and service_id like 'SD%'"))
                                                          .join(tableEnv.from("service_request"), $("service_id"))
                                                          .select($("service_id")));

        tableEnv.createTemporaryView("update_service_order", updateServiceOrder);
        return this;
    }

    private ServiceOrderGraphBuilder buildServiceOrderProcess() {

        // 服务处理日志
        Table validProcess = tableEnv.from("dim_service_order")
                                     .join(tableEnv.from("dim_pub_dimension_ipmt"), $("ci_module_id = dimension_code"))
                                     .where($("COALESCE(incident_status,'') <> '10'"))
                                     .join(tableEnv.from("importal_service_history"), $("service_id"))
                                     .select($("service_id"),
                                             $("from_unixtime(unix_timestamp(create_time) + 28800,  'yyyy-MM-dd HH:mm:ss')  as create_time"),
                                             $("create_user"),
                                             $("update_msg"),
                                             $("case when update_msg like '%Resolved -> Open%'         then 1 \n"
                                               + "      when update_msg like '%Resolved -> Rejected%'     then 1 \n"
                                               + "      when update_msg like '%驳回服务单%'               then 1\n"
                                               + "      when update_msg like '%Reject the service order%' then 1\n"
                                               + "      else 0 \n"
                                               + "end as is_reject"),
                                             $("case when update_msg like '%更新: CI名称%' then 1 else 0 end as is_ci_change"),
                                             $("case when update_msg like '%更新: 支持人员%' then 1 else 0 end as is_supporter_change"));

        tableEnv.createTemporaryView("valid_service_process", validProcess);

        Table serviceOrderProcess = tableEnv.from("dim_service_order")
                                            .join(tableEnv.from("dim_pub_dimension_ipmt"),
                                                  $("ci_module_id = dimension_code"))
                                            .where($("COALESCE(incident_status,'') <> '10'"))
                                            .leftOuterJoin(
                                                // 提交pending/Resolved态的最后责任人
                                                tableEnv.from("valid_service_process")
                                                        .where($("update_msg like '%-> Resolved%'\n"
                                                                 + "       or update_msg like '%-> Pending%'\n"
                                                                 + "       or update_msg like '%Creating Verification Service Order%'\n"
                                                                 + "       or update_msg like '%创建验证服务单%'"))
                                                        .select($("service_id"),
                                                                $("create_user"),
                                                                $("create_time"),
                                                                $("row_number() over(partition by service_id order by create_time desc) as rn"))
                                                        .where($("rn = 1"))
                                                        .select($("service_id"),
                                                                $("create_user as trace_person"),
                                                                $("create_time as last_pending_time")), $("service_id"))
                                            .leftOuterJoin(
                                                // 提交Resolved的处理人(判断热线一线二线用途)
                                                tableEnv.from("valid_service_process")
                                                        .where($("update_msg like '%-> Resolved%'\n"
                                                                 + "       or update_msg like '%Creating Verification Service Order%'\n"
                                                                 + "       or update_msg like '%创建验证服务单%'"))
                                                        .select($("service_id"),
                                                                $("create_user"),
                                                                $("row_number() over(partition by service_id order by create_time desc) as rn"))
                                                        .where($("rn = 1"))
                                                        .select($("service_id"),
                                                                $("create_user as commit_resolved_person")),
                                                $("service_id"))
                                            .leftOuterJoin(
                                                // 第一次pending时间
                                                tableEnv.from("valid_service_process")
                                                        .where($("update_msg like '%-> Pending%'"))
                                                        .select($("service_id"),
                                                                $("create_time"),
                                                                $("row_number() over(partition by service_id order by create_time asc) as rn"))
                                                        .where($("rn = 1"))
                                                        .select($("service_id"),
                                                                $("create_time as first_pending_time")),
                                                $("service_id"))
                                            .leftOuterJoin(
                                                // 过程步骤最新处理人、驳回次数、转单次数
                                                tableEnv.from("valid_service_process")
                                                        .select($("service_id"),
                                                                $("create_user"),
                                                                $("is_reject"),
                                                                $("is_ci_change"),
                                                                $("is_supporter_change"),
                                                                $("row_number() over(partition by service_id order by create_time desc) as rn"))
                                                        .groupBy($("service_id"))
                                                        .select(
                                                            $("max(case when rn = 1 then create_user end) as curr_person"),
                                                            $("sum(is_reject) as reject_cnt"),
                                                            $("sum(is_ci_change) + sum(is_supporter_change) as transfer_order_cnt")),
                                                $("service_id"))
                                            .select($("service_id"),
                                                    $("curr_person"),
                                                    $("trace_person"),
                                                    $("commit_resolved_person"),
                                                    $("first_pending_time"),
                                                    $("case when t3.first_pending_time is null then cast(null as string)\n"
                                                      + "             else round(\n"
                                                      + "           (\n"
                                                      + "            current_timestamp() - unix_timestamp(first_pending_time, 'yyyy-MM-dd HH:mm:ss')\n"
                                                      + "              ) / (60 * 60 * 24), 2)\n"
                                                      + "end as pending_duration"),
                                                    $("reject_cnt"),
                                                    $("transfer_order_cnt"),
                                                    $("last_pending_time"),
                                                    $("case when t3.first_pending_time is null then cast(null as string)\n"
                                                      + "             else round(\n"
                                                      + "           (\n"
                                                      + "            current_timestamp() - unix_timestamp(last_pending_time, 'yyyy-MM-dd HH:mm:ss')\n"
                                                      + "              ) / (60 * 60 * 24), 2)\n"
                                                      + "end as status_stay_duration"));
        tableEnv.createTemporaryView("service_order_process", serviceOrderProcess);

        return this;

    }

    private ServiceOrderGraphBuilder buildServiceOrderCombine() {
        Table serviceOrderResult = tableEnv.from("dim_service_order")
                                           .join(
                                               tableEnv.from("incidentsm_hi")
                                                       .where($("COALESCE(open,'') not in ('Closed','Open - Linked') ")),
                                               $("service_id = incident_id"))
                                           .leftOuterJoin(tableEnv.from("dim_pub_rels_emp_dept"),
                                                          $("reques_user_id = employee_no"))
                                           .leftOuterJoin(tableEnv.from("sub_order_info"), $("service_id"))
                                           .leftOuterJoin(tableEnv.from("service_order_process"), $("service_id"))
                                           .leftOuterJoin(tableEnv.from(""))
                                           .select($("service_id as busi_no"),
                                                   $("COALESCE(new_w3_account, request_user_id) as user_by"),
                                                   $("from_unixtime(unix_timestamp(open_time) + 28800,  'yyyy-MM-dd HH:mm:ss')  as open_time"),
                                                   $("round((current_timestamp() - open_time) / (60 * 60 * 24), 2) as resolve_duration"),
                                                   $("from_unixtime(unix_timestamp(estimated_break_time) + 28800,  'yyyy-MM-dd HH:mm:ss') as tmp_sla_time"),
                                                   $("case\n"
                                                     + "            when create_ticket_type = '0' then '用户自助提单'\n"
                                                     + "            when create_ticket_type = '1' then '研究所代用户提单'\n"
                                                     + "            when create_ticket_type = '2' then '产品线装备部代用户提单'\n"
                                                     + "            when create_ticket_type = '3' then '工具运营代表提单'\n"
                                                     + "            when create_ticket_type = '4' then '人工客服提单'\n"
                                                     + "            when create_ticket_type = '5' then '用户群组'\n"
                                                     + "            when create_ticket_type = '6' then '其他'\n"
                                                     + "            when create_ticket_type = 'IPDGPO' then 'IPD GPO办公室代用户提单'   \n"
                                                     + "        end as create_ticket_type"),
                                                   $("source_name as source"),
                                                   $("title"),
                                                   $("regexp_replace(t1.request, '<[^>]+>', '') as description"),
                                                   $("concat_ws(',',\n"
                                                     + "            t6.suggestion_id, \n"
                                                     + "            t6.ticket_number,      \n"
                                                     + "            t6.dts_number,\n"
                                                     + "            t6.rr_number,    \n"
                                                     + "            t6.td_number  \n"
                                                     + "            ) as relate_number"),
                                                   $("extend_url as url"),
                                                   $("supporter"),
                                                   $("case when t1.alert_type = '2' and t3.open in ('Open','Open - Idle','Rejected') then '1' \n"
                                                     + "            when t1.alert_type = '3' and t3.open in ('Open','Open - Idle','Rejected') then '2'\n"
                                                     + "            when t1.alert_type = '4' and t3.open in ('Open','Open - Idle','Rejected') then '3'\n"
                                                     + "            else '0'\n"
                                                     + "        end as tmp_sla_upgrade_cnt"),
                                                   $("resolve_by"),
                                                   $("from_unixtime(unix_timestamp(resolve_time) + 28800, 'yyyy-MM-dd HH:mm:ss') as resolve_time"),
                                                   $("from_unixtime(unix_timestamp(t1.close_time) + 28800, 'yyyy-MM-dd HH:mm:ss')   as close_time"),
                                                   $("ci_module_id"),
                                                   $("request_ci_id"),
                                                   $("formal_flag"),
                                                   $("alert_type"),
                                                   $("open as status"),
                                                   $("process_type"),
                                                   $("cast(null as string) as user_label "),
                                                   $("category"),
                                                   $("cast(null as string) as previous_handler "),
                                                   $("cast(null as string) as hot_line"),
                                                   $("reminder_count as reminder_cnt"),
                                                   $("case when solution like '%://portal.edevops.huawei.com/%'     then 'Y'\n"
                                                     + "             when solution like '%://w3.huawei.com/rdicloudrequire/%' then 'Y'\n"
                                                     + "             when solution like '%://w3.huawei.com/itsmnext/%'        then 'Y'\n"
                                                     + "             when RLIKE(t1.solution,'(RR|IR|US|DTS|TD)[0-9]') then 'Y'\n"
                                                     + "             else 'N' \n"
                                                     + "         end as is_valid_response"),
                                                   $("case when lower(COALESCE(sla_breach,'f')) = 't' then 'Y'\n"
                                                     + "            else 'N' \n"
                                                     + "        end as tmp_break_flag"),
                                                   $("case when nvl(incident,'') <> ''     then 'Y'\n"
                                                     + "       when nvl(rr_demand_id,'') <> '' then 'Y'\n"
                                                     + "            else 'N'\n"
                                                     + "        end as tmp_has_rel_number_from_sd"),
                                                   $("case when alert_type = '1' then '预警'\n"
                                                     + "       when alert_type = '2' then '第一次升级' \n"
                                                     + "       when alert_type = '3' then '第二次升级'\n"
                                                     + "       when alert_type = '4' then '第三次升级'\n"
                                                     + "       else '正常'\n"
                                                     + "end as tmp_sla_status"),
                                                   $("suggestion_id"),
                                                   $("ticket_number"),
                                                   $("dts_number"),
                                                   $("rr_number"),
                                                   $("cast(null as string)  as hwci_number"),
                                                   $("td_number"),
                                                   $("td_capacity_number"),
                                                   $("td_object_number"),
                                                   $("td_process_number"),
                                                   $("td_dept_number"),
                                                   $("td_capacity_number"),
                                                   $("td_capacity_number"),
                                                   $("td_capacity_number"),
                                                   $("td_capacity_number"),
                                                   $("is_open_sub"),
                                                   $("reject_cnt"),
                                                   $("transfer_order_cnt"),
                                                   $("first_pending_time"),
                                                   $("pending_duration"),
                                                   $("last_pending_time"),
                                                   $("status_stay_duration"));
        tableEnv.createTemporaryView("service_order", serviceOrderResult);
        return this;
    }

    private ServiceOrderGraphBuilder buildServiceOrderSink() {
        List<String> dsIdList = new ArrayList<>();
        dsIdList.add("@ipd_ops_kafka_test@Kafka"); // kafka
        dsIdList.add("ioc3000@KWE022307216001"); // mysql
        // 4.获取数据源 DatasourceInfoResp 可参考readme.docx  2.2.3
        List<DatasourceInfoResp> uniDataSource = UniDataSourceUtil.getInstance()
                                                                  .getUniDataSource(dsIdList);
        DatasourceInfoResp pgsqlInfoResp = uniDataSource.get(1);

        tableEnv.executeSql("CREATE TABLE dwr_pub_yygzt_v2_service_order_full(\n"
                            + "    busi_no STRING,\n"
                            + "    user_by STRING,\n"
                            + "    user_label STRING,\n"
                            + "    open_by STRING,\n"
                            + "    open_time STRING,\n"
                            + "    sla_time STRING,\n"
                            + "    sla_status STRING,\n"
                            + "    resolve_duration STRING,\n"
                            + "    first_pending_time STRING,\n"
                            + "    pending_duration STRING,\n"
                            + "    busi_category STRING,\n"
                            + "    category STRING,\n"
                            + "    create_ticket_type STRING,\n"
                            + "    source STRING,\n"
                            + "    status STRING,\n"
                            + "    title STRING,\n"
                            + "    description STRING,\n"
                            + "    relate_number STRING,\n"
                            + "    url STRING,\n"
                            + "    previous_handler STRING,\n"
                            + "    supporter STRING,\n"
                            + "    hot_line STRING,\n"
                            + "    consultation_ticket_flag STRING,\n"
                            + "    resolve_by STRING,\n"
                            + "    resolve_time STRING,\n"
                            + "    close_time STRING,\n"
                            + "    product_code STRING,\n"
                            + "    product_name STRING,\n"
                            + "    product_level STRING,\n"
                            + "    spdt_code STRING,\n"
                            + "    spdt_name STRING,\n"
                            + "    pdt_code STRING,\n"
                            + "    pdt_name STRING,\n"
                            + "    sub_product_code STRING,\n"
                            + "    sub_product_name STRING,\n"
                            + "    module_code STRING,\n"
                            + "    module_cn_name STRING,\n"
                            + "    app_id STRING,\n"
                            + "    app_cn_name STRING,\n"
                            + "    dept_code STRING,\n"
                            + "    dept_cn_name STRING,\n"
                            + "    dept_level STRING,\n"
                            + "    l1_dept_code STRING,\n"
                            + "    l1_dept_cn_name STRING,\n"
                            + "    l2_dept_code STRING,\n"
                            + "    l2_dept_cn_name STRING,\n"
                            + "    l3_dept_code STRING,\n"
                            + "    l3_dept_cn_name STRING,\n"
                            + "    l4_dept_code STRING,\n"
                            + "    l4_dept_cn_name STRING,\n"
                            + "    l5_dept_code STRING,\n"
                            + "    l5_dept_cn_name STRING,\n"
                            + "    l6_dept_code STRING,\n"
                            + "    l6_dept_cn_name STRING,\n"
                            + "    prod_line_code STRING,\n"
                            + "    prod_line_name STRING,\n"
                            + "    prod_line_level STRING,\n"
                            + "    city STRING,\n"
                            + "    suggestion_id STRING,\n"
                            + "    dts_number STRING,\n"
                            + "    rr_number STRING,\n"
                            + "    hwci_number STRING,\n"
                            + "    td_number STRING,\n"
                            + "    td_capacity_number STRING,\n"
                            + "    td_object_number STRING,\n"
                            + "    td_process_number STRING,\n"
                            + "    td_dept_number STRING,\n"
                            + "    sla_upgrade_cnt STRING,\n"
                            + "    sla_break_flag STRING,\n"
                            + "    sla_warn STRING,\n"
                            + "    reminder_cnt STRING,\n"
                            + "    handle_flag STRING,\n"
                            + "    reject_cnt STRING,\n"
                            + "    commit_verify STRING,\n"
                            + "    transfer_order_cnt STRING,\n"
                            + "    label_priority_01 STRING,\n"
                            + "    to_do_person STRING,\n"
                            + "    to_do_applicant STRING,\n"
                            + "    trace_person STRING,\n"
                            + "    trace_upgrade STRING,\n"
                            + "    ops_create_date STRING,\n"
                            + "    ops_update_date STRING,\n"
                            + "    ops_period_id STRING,\n"
                            + "    last_pending_time STRING,\n"
                            + "    status_stay_duration STRING,\n"
                            + "    is_first_mile STRING,\n"
                            + "    emergency_level STRING\n"
                            + ")  WITH (\n"
                            + "'connector' = 'jdbc',\n"
                            + "'password' = '"
                            + pgsqlInfoResp.getPassword()
                            + "',\n"
                            + "'driver' = 'org.postgresql.Driver',\n"
                            + "'sink.buffer-flush.interval' = '5s',\n"
                            + "'sink.buffer-flush.max-rows' = '3000',\n"
                            + "'table-name' = 'dev_unidata.dwr_ipd_ops_data_agg_test',\n"
                            + "'url' = '"
                            + pgsqlInfoResp.getConnectUrl()
                            + "',\n"
                            + "'username' = '"
                            + pgsqlInfoResp.getDbAccount()
                            + "'\n"
                            + ")");

        tableEnv.from("service_order")
                .executeInsert("dwr_pub_yygzt_v2_service_order_full");
        return this;
    }

    public static class SplitStringFunction extends TableFunction<String> {
        public void eval(String originStr, String separator) {
            if (Objects.isNull(originStr) || Objects.isNull(separator)) {
                return;
            }
            for (String str : originStr.split(separator)) {
                collect(str);
            }
        }
    }
}

package com.huawei.it.scs;

/**
 * 功能描述
 *
 * @author w30063450
 * @since 2024-10-17
 */
class ServiceOrderGraphDirector {

    public void createServiceOrderGraph(ServiceOrderGraphBuilder builder) {
        builder.buildSourceGraph().buildTransformGraph().buildSinkGraph();
    }
}

