# SwiftUI入门



## 一、SwiftUI基础知识



### 创建和组合视图

#### 1.创建新项目并浏览画布

* 打开Xcode，在Xcode的启动窗口中单击 ”创建新的项目“，或者点击文件->新建->项目

  ![image-20240918151639078](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918151639078.png)

* 在模板选择器中，选择ios作为平台，选择 App 模板，然后单击 Next。

  ![image-20240918151654114](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918151654114.png)

* 输入“Landmarks”作为产品名称，选择“SwiftUI”作为界面，选择“Swift”作为语言，然后单击“下一步”。选择一个位置以在 Mac 上存储 Landmarks 项目。

  ```swift
  import SwiftUI
  
  
  struct ContentView: View {
  struct LandmarksApp: App {
      var body: some Scene {
              Image(systemName: "globe")
                  .imageScale(.large)
                  .foregroundStyle(.tint)
              Text("Hello, world!")
  }
  ```

  

* 在 Project navigator 中，选择 。`LandmarksApp`

  使用 SwiftUI App 生命周期的 App 具有符合协议的结构。结构的属性返回一个或多个场景，这些场景反过来提供用于显示的内容。该属性标识应用程序的入口点。`App``body``@main`

  ```swift
  import SwiftUI
  
  
  struct ContentView: View {
      var body: some View {
          VStack {
              Image(systemName: "globe")
                  .imageScale(.large)
                  .foregroundStyle(.tint)
              Text("Hello, world!")
          }
          .padding()
      }
  }
  
  
  #Preview {
      ContentView()
  }
  ```

  

* 画布会自动显示预览。

  提示

  如果画布不可见，请选择 Editor > Canvas 以显示它。

  ![image-20240918151911811](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918151911811.png)

* 在 body 属性中，删除除声明之外的所有内容，并将 “Hello， world！” 更改为您自己的问候语。`Text`

  当您更改视图属性中的代码时，预览会更新以反映您的更改。`body`

  ```swift
  import SwiftUI
  
  
  struct ContentView: View {
      var body: some View {
          Text("Hello SwiftUI!")
      }
  }
  
  
  #Preview {
      ContentView()
  }
  ```



#### 2.自定义文本视图

您可以通过更改代码或使用检查器来发现可用内容并帮助您编写代码来自定义视图的显示。

在构建 Landmarks 应用程序时，您可以使用编辑器的任意组合：源编辑器、画布或检查器。无论您使用哪种工具，您的代码都会保持更新状态。

![image-20240918152029009](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918152029009.png)



* 将 canvas 模式更改为 Selectable。

  默认情况下，画布以实时模式显示预览，以便您可以与它们进行交互，但您可以使用 Selectable （可选） 模式来启用编辑。

  ![image-20240918152054242](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918152054242.png)

* 在预览中，按住 Command-Control 键点按问候语以调出结构化编辑弹出窗口，然后选择“显示 SwiftUI 检查器”。

  弹出窗口显示您可以自定义的不同属性，具体取决于您检查的视图类型。

  ![image-20240918152119139](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918152119139.png)

  

* 使用检查器将文本更改为 “Turtle Rock”，这是您将在应用程序中显示的第一个地标的名称。

  ![image-20240918152153742](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918152153742.png)

* 将 Font 修饰符更改为 “Title”。

  这会将系统字体应用于文本，以便它正确响应用户的首选字体大小和设置。

  ![image-20240918152212842](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918152212842.png)

  要自定义 SwiftUI 视图，请调用称为**modifiers**的方法。修饰符包装视图以更改其显示或其他属性。每个修饰符都会返回一个新视图，因此通常会将多个修饰符垂直堆叠起来。

* 手动编辑代码以添加修饰符;这会将文本的颜色更改为绿色。`foregroundColor(.green)`

  ```swift
  import SwiftUI
  
  
  struct ContentView: View {
      var body: some View {
          Text("Turtle Rock")
              .font(.title)
              .foregroundColor(.green)
      }
  }
  
  
  #Preview {
      ContentView()
  }
  ```

  ![image-20240918152454406](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918152454406.png)

* 通过在代码编辑器中按住 Control 键单击声明来打开检查器，然后从弹出窗口中选择“显示 SwiftUI 检查器”。单击“颜色”弹出菜单，然后选择“继承”以再次将文本颜色更改为黑色。

  ![image-20240918152515156](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918152515156.png)

* 请注意，Xcode 会自动更新您的代码以反映更改，并删除修饰符。`foregroundColor(.green)`

  ```swift
  import SwiftUI
  
  
  struct ContentView: View {
      var body: some View {
          Text("Turtle Rock")
              .font(.title)
  
  
      }
  }
  
  
  #Preview {
      ContentView()
  }
  ```

  ![image-20240918152542102](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918152542102.png)

* 将预览设置回 Live 模式。

  在 Live 模式下工作，可以在 Source 中进行编辑时轻松跟踪视图行为。

![image-20240918152551077](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918152551077.png)



#### 3.使用堆栈组合字符

除了在上一节中创建的标题视图之外，您还将添加文本视图以包含有关地标的详细信息，例如公园的名称及其所在的州。

创建 SwiftUI 视图时，您需要在视图的属性中描述其内容、布局和行为;但是，该属性只返回一个视图。您可以将多个视图组合并嵌入*到堆栈*中，这些堆栈将视图水平、垂直或从后到前分组在一起。`body``body`

在本节中，您将使用垂直堆栈将标题放置在包含公园详细信息的水平堆栈上方。

![image-20240918152821160](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918152821160.png)

可以使用 Xcode 将视图嵌入到容器视图中、打开检查器或帮助进行其他有用的更改。

* 按住 Control 键单击文本视图的初始化器以显示上下文菜单，然后选择“Embed in VStack”（嵌入到 VStack 中）。

  ![image-20240918153013663](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918153013663.png)

接下来，您将通过从库中拖动视图来将文本视图添加到堆栈中。`

* 单击 Xcode 窗口右上角的加号按钮 （+） 打开库，然后将视图拖动到代码中“Turtle Rock”文本视图正下方的位置。

  ![image-20240918153030277](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918153030277.png)

* 将视图的占位符文本替换为 “Joshua Tree National Park”。

  ```swift
  import SwiftUI
  
  
  struct ContentView: View {
      var body: some View {
          VStack(alignment: .leading) {
              Text("Turtle Rock")
                  .font(.title)
              Text("Joshua Tree National Park")
                  .font(.subheadline)
                      .font(.subheadline)
                  Text("California")
                      .font(.subheadline)
                      .font(.subheadline)
      ContentView()
  }
  ```

  ![image-20240918153326237](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918153326237.png)

* 将位置的字体设置为 。`subheadline`

  ```swift
  
  import SwiftUI
  
  
  struct ContentView: View {
      var body: some View {
          VStack(alignment: .leading) {
              Text("Turtle Rock")
                  .font(.title)
              Text("Joshua Tree National Park")
                  .font(.subheadline)
          }
      }
  }
  
  
  #Preview {
      ContentView()
  }
  ```

  ![image-20240918153357778](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918153357778.png)

* 编辑初始值设定项以按视图的前导边缘对齐视图。`VStack`

  默认情况下，堆栈沿其轴将其内容居中，并提供适合上下文的间距。

  ```swift
  import SwiftUI
  
  
  struct ContentView: View {
      var body: some View {
          VStack(alignment: .leading) {
              Text("Turtle Rock")
                  .font(.title)
              Text("Joshua Tree National Park")
                  .font(.subheadline)
          }
      }
  }
  
  
  #Preview {
      ContentView()
  }
  ```

  ![image-20240918153421404](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918153421404.png)

接下来，您将在位置右侧添加另一个文本视图

* 将 “Joshua Tree National Park” 文本视图嵌入到 HStack 中。

  ```swift
  import SwiftUI
  
  
  struct ContentView: View {
      var body: some View {
          VStack(alignment: .leading) {
              Text("Turtle Rock")
                  .font(.title)
              HStack {
                  Text("Joshua Tree National Park")
                      .font(.subheadline)
              }
          }
      }
  }
  
  
  #Preview {
      ContentView()
  }
  ```

  ![image-20240918153446137](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918153446137.png)

* 在位置后添加新的文本视图，将占位符文本更改为公园的状态，然后将其字体设置为 。`subheadline`

  ```swift
  import SwiftUI
  
  
  struct ContentView: View {
      var body: some View {
          VStack(alignment: .leading) {
              Text("Turtle Rock")
                  .font(.title)
              HStack {
                  Text("Joshua Tree National Park")
                      .font(.subheadline)
                  Text("California")
                      .font(.subheadline)
              }
          }
      }
  }
  
  
  #Preview {
      ContentView()
  }
  ```

  ![image-20240918153508868](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918153508868.png)

* 要指示布局使用设备的整个宽度，请通过将 a 添加到包含两个文本视图的水平堆栈中来分隔 park 和 state。`Spacer`

  *分隔线*扩展以使其包含视图使用其父视图的所有空间，而不是仅由其内容定义其大小。

  ```swift
  import SwiftUI
  
  
  struct ContentView: View {
      var body: some View {
          VStack(alignment: .leading) {
              Text("Turtle Rock")
                  .font(.title)
              HStack {
                  Text("Joshua Tree National Park")
                      .font(.subheadline)
                  Spacer()
                  Text("California")
                      .font(.subheadline)
              }
          }
      }
  }
  
  
  #Preview {
      ContentView()
  }
  ```

  ![image-20240918153531994](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918153531994.png)

* 最后，使用修饰符为地标的名称和细节在其外边缘周围留出更多空间。`padding()`

  ```swift
  import SwiftUI
  
  
  struct ContentView: View {
      var body: some View {
          VStack(alignment: .leading) {
              Text("Turtle Rock")
                  .font(.title)
              HStack {
                  Text("Joshua Tree National Park")
                      .font(.subheadline)
                  Spacer()
                  Text("California")
                      .font(.subheadline)
              }
          }
          .padding()
      }
  }
  
  
  #Preview {
      ContentView()
  }
  ```

  ![image-20240918153555143](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918153555143.png)





#### 4.创建自定义图像视图

设置完名称和位置视图后，下一步是为地标添加图像。

您无需在此文件中添加更多代码，而是创建一个自定义视图，将蒙版、边框和投影应用于图像。

![image-20240918153720325](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918153720325.png)



首先将图像添加到项目的资产目录中

* 在工程文件的 Resources 文件夹中找到;将其拖动到 Asset Catalog 的编辑器中。Xcode 会为该映像创建一个新的映像集。`turtlerock@2x.jpg`

  ![image-20240918154102380](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918154102380.png)

接下来，您将为自定义图像视图创建新的 SwiftUI 视图。

* 选择 File > New > File （新建文件） 以再次打开模板选择器。在用户界面部分，选择“SwiftUI 视图”，然后单击下一步。为文件命名，然后单击 Create。`CircleImage.swift`

  ![image-20240918154119816](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918154119816.png)

您已准备好插入图像并修改其显示以匹配所需的设计。

* 使用初始值设定项将文本视图替换为 Turtle Rock 的图像，并向其传递要显示的图像的名称。`Image(_:)`

  ```swift
  import SwiftUI
  
  
  struct CircleImage: View {
      var body: some View {
          Image("turtlerock")
      }
  }
  
  
  #Preview {
      CircleImage()
  }
  ```

  ![image-20240918154336928](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918154336928.png)

* 添加对clipShape(Circle()) 的调用，以将圆形剪切形状应用于图像。

  Circle类型是一种形状，您可以将其用作蒙版，或者通过为圆形设置描边或填充来用作视图。

  ```swift
  import SwiftUI
  
  
  struct CircleImage: View {
      var body: some View {
          Image("turtlerock")
              .clipShape(Circle())
      }
  }
  
  
  #Preview {
      CircleImage()
  }
  ```

  ![image-20240918154443543](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918154443543.png)

* 创建另一个带有灰色描边的圆圈，然后将其添加为叠加层，以便为图像添加边框。

  ```swift
  import SwiftUI
  
  
  struct CircleImage: View {
      var body: some View {
          Image("turtlerock")
              .clipShape(Circle())
              .overlay {
                  Circle().stroke(.gray, lineWidth: 4)
              }
      }
  }
  
  
  #Preview {
      CircleImage()
  }
  ```

  ![image-20240918154507277](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918154507277.png)

* 接下来，添加半径为 7 磅的阴影。

  ```swift
  import SwiftUI
  
  
  struct CircleImage: View {
      var body: some View {
          Image("turtlerock")
              .clipShape(Circle())
              .overlay {
                  Circle().stroke(.gray, lineWidth: 4)
              }
              .shadow(radius: 7)
      }
  }
  
  
  #Preview {
      CircleImage()
  }
  ```

  ![image-20240918154529225](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918154529225.png)

* 将边框颜色切换为白色。

  这样就完成了图像视图。

  ```swift
  import SwiftUI
  
  
  struct CircleImage: View {
      var body: some View {
          Image("turtlerock")
              .clipShape(Circle())
              .overlay {
                  Circle().stroke(.white, lineWidth: 4)
              }
              .shadow(radius: 7)
      }
  }
  
  
  #Preview {
      CircleImage()
  }
  ```

  ![image-20240918154653927](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918154653927.png)



#### 5.使用来自其他框架的 SwiftUI 视图

接下来，您将创建一个以给定坐标为中心的地图。您可以使用 MapKit 中的视图来渲染地图。`Map`

![image-20240918154821639](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918154821639.png)



首先，您将创建一个新的自定义视图来管理您的地图。

* 选择“文件”>“新建 > 文件”，选择 iOS 作为平台，选择“SwiftUI 视图”模板，然后单击“下一步”。为新文件命名，然后单击 Create。`MapView.swift`

  ![image-20240918154903553](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918154903553.png)

* 添加语句。`import``MapKit`

  当您在同一文件中导入 SwiftUI 和某些其他框架时，您可以访问该框架提供的特定于 SwiftUI 的功能

  ```swift
  import SwiftUI
  import MapKit
  
  
  struct MapView: View {
      var body: some View {
          Text("Hello, World!")
      }
  }
  
  
  #Preview {
      MapView()
  }
  ```

  

* 创建一个私有计算变量，用于保存映射的区域信息。

  ```swift
  import SwiftUI
  import MapKit
  
  
  struct MapView: View {
      var body: some View {
          Text("Hello, World!")
      }
  
  
      private var region: MKCoordinateRegion {
          MKCoordinateRegion(
              center: CLLocationCoordinate2D(latitude: 34.011_286, longitude: -116.166_868),
              span: MKCoordinateSpan(latitudeDelta: 0.2, longitudeDelta: 0.2)
          )
      }
  }
  
  
  #Preview {
      MapView()
  }
  ```

  

* 将默认视图替换为采用您使用区域初始化的摄像机位置的视图。`Text``Map`

  ```swift
  import SwiftUI
  import MapKit
  
  
  struct MapView: View {
      var body: some View {
          Map(initialPosition: .region(region))
      }
  
  
      private var region: MKCoordinateRegion {
          MKCoordinateRegion(
              center: CLLocationCoordinate2D(latitude: 34.011_286, longitude: -116.166_868),
              span: MKCoordinateSpan(latitudeDelta: 0.2, longitudeDelta: 0.2)
          )
      }
  }
  
  
  #Preview {
      MapView()
  }
  ```

  

* 您将在预览中看到一张以 Turtle Rock 为中心的地图。

  您可以在实时预览中操纵地图，以缩小一点并使用 Option 键单击并拖动控件查看周围区域。

  ![image-20240918155417255](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918155417255.png)



#### 6.编写详细信息视图

现在，您拥有了所需的所有组件 — 名称和地点、圆形图像和位置地图。

使用您目前使用的工具，组合您的自定义视图以创建路标细节视图的最终设计。

![image-20240918155623706](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918155623706.png)



* 在 Project navigator （项目导航器） 中，选择文件。`ContentView`

  ```swift
  import SwiftUI
  
  
  struct ContentView: View {
      var body: some View {
          VStack(alignment: .leading) {
              Text("Turtle Rock")
                  .font(.title)
              HStack {
                  Text("Joshua Tree National Park")
                      .font(.subheadline)
                  Spacer()
                  Text("California")
                      .font(.subheadline)
              }
          }
          .padding()
      }
  }
  
  
  #Preview {
      ContentView()
  }
  ```

  ![image-20240918155839528](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918155839528.png)

* 将包含三个文本视图的 嵌入到另一个 .`VStack``VStack`

  ```swift
  import SwiftUI
  
  
  struct ContentView: View {
      var body: some View {
          VStack {
              VStack(alignment: .leading) {
                  Text("Turtle Rock")
                      .font(.title)
                  HStack {
                      Text("Joshua Tree National Park")
                          .font(.subheadline)
                      Spacer()
                      Text("California")
                          .font(.subheadline)
                  }
              }
              .padding()
          }
      }
  }
  
  
  #Preview {
      ContentView()
  }
  ```

  ![image-20240918160004742](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918160004742.png)

* 将您的自定义添加到堆栈顶部。使用 .`MapView``MapView``frame(width:height:)`

  当您仅指定参数时，视图会自动调整为其内容的宽度。在这种情况下， 展开 以填充可用空间。`height``MapView`

  ```swift
  import SwiftUI
  
  
  struct ContentView: View {
      var body: some View {
          VStack {
              MapView()
                  .frame(height: 300)
  
  
              VStack(alignment: .leading) {
                  Text("Turtle Rock")
                      .font(.title)
                  HStack {
                      Text("Joshua Tree National Park")
                          .font(.subheadline)
                      Spacer()
                      Text("California")
                          .font(.subheadline)
                  }
              }
              .padding()
          }
      }
  }
  
  
  #Preview {
      ContentView()
  }
  ```

  ![image-20240918160039392](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918160039392.png)

* 将视图添加到堆栈中。`CircleImage`

  ```swift
  import SwiftUI
  
  
  struct ContentView: View {
      var body: some View {
          VStack {
              MapView()
                  .frame(height: 300)
  
  
              CircleImage()
  
  
              VStack(alignment: .leading) {
                  Text("Turtle Rock")
                      .font(.title)
                  HStack {
                      Text("Joshua Tree National Park")
                          .font(.subheadline)
                      Spacer()
                      Text("California")
                          .font(.subheadline)
                  }
              }
              .padding()
          }
      }
  }
  
  
  #Preview {
      ContentView()
  }
  ```

  ![image-20240918160145875](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918160145875.png)

* 要将图像视图分层到地图视图的顶部，请为图像提供 -130 磅的垂直偏移量，并从视图底部填充 -130 磅。

  这些调整通过向上移动图像来为文本腾出空间。

  ```swift
  import SwiftUI
  
  
  struct ContentView: View {
      var body: some View {
          VStack {
              MapView()
                  .frame(height: 300)
  
  
              CircleImage()
                  .offset(y: -130)
                  .padding(.bottom, -130)
  
  
              VStack(alignment: .leading) {
                  Text("Turtle Rock")
                      .font(.title)
                  HStack {
                      Text("Joshua Tree National Park")
                          .font(.subheadline)
                      Spacer()
                      Text("California")
                          .font(.subheadline)
                  }
              }
              .padding()
          }
      }
  }
  
  
  #Preview {
      ContentView()
  }
  ```

  ![image-20240918160217846](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918160217846.png)

* 在外部底部添加一个分隔条，以将内容推到屏幕顶部。`VStack`

  ```swift
  import SwiftUI
  
  
  struct ContentView: View {
      var body: some View {
          VStack {
              MapView()
                  .frame(height: 300)
  
  
              CircleImage()
                  .offset(y: -130)
                  .padding(.bottom, -130)
  
  
              VStack(alignment: .leading) {
                  Text("Turtle Rock")
                      .font(.title)
                  HStack {
                      Text("Joshua Tree National Park")
                          .font(.subheadline)
                      Spacer()
                      Text("California")
                          .font(.subheadline)
                  }
              }
              .padding()
  
  
              Spacer()
          }
      }
  }
  
  
  #Preview {
      ContentView()
  }
  ```

  ![image-20240918160337866](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918160337866.png)

* 为地标添加分隔线和一些其他描述性文本。

  ```swift
  import SwiftUI
  
  
  struct ContentView: View {
      var body: some View {
          VStack {
              MapView()
                  .frame(height: 300)
  
  
              CircleImage()
                  .offset(y: -130)
                  .padding(.bottom, -130)
  
  
              VStack(alignment: .leading) {
                  Text("Turtle Rock")
                      .font(.title)
                  HStack {
                      Text("Joshua Tree National Park")
                          .font(.subheadline)
                      Spacer()
                      Text("California")
                          .font(.subheadline)
                  }
  
  
                  Divider()
  
  
                  Text("About Turtle Rock")
                      .font(.title2)
                  Text("Descriptive text goes here.")
              }
              .padding()
  
  
              Spacer()
          }
      }
  }
  
  
  #Preview {
      ContentView()
  }
  ```

  ![image-20240918160428746](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918160428746.png)

* 最后，将 subheadline 字体修饰符从每个视图移动到包含它们的视图，并将辅助样式应用于 subheadline 文本。`Text``HStack`

  当您将修饰符应用于布局视图（如堆栈）时，SwiftUI 会将修饰符应用于组中包含的所有元素。

  ```swift
  import SwiftUI
  
  
  struct ContentView: View {
      var body: some View {
          VStack {
              MapView()
                  .frame(height: 300)
  
  
              CircleImage()
                  .offset(y: -130)
                  .padding(.bottom, -130)
  
  
              VStack(alignment: .leading) {
                  Text("Turtle Rock")
                      .font(.title)
                  HStack {
                      Text("Joshua Tree National Park")
                      Spacer()
                      Text("California")
                  }
                  .font(.subheadline)
                  .foregroundStyle(.secondary)
  
  
                  Divider()
  
  
                  Text("About Turtle Rock")
                      .font(.title2)
                  Text("Descriptive text goes here.")
              }
              .padding()
  
  
              Spacer()
          }
      }
  }
  
  
  #Preview {
      ContentView()
  }
  ```

  ![image-20240918160517324](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918160517324.png)



### 构建列表和导航

设置基本路标详细信息视图后，您需要为用户提供一种方法来查看路标的完整列表，并查看有关每个位置的详细信息。

您将创建可显示有关任何地标信息的视图，并动态生成一个滚动列表，用户可以点击该列表来查看地标的详细信息视图。要微调 UI，您将使用 Xcode 在不同设备大小下渲染预览。

下载项目文件以开始构建此项目，然后按照以下步骤操作。

https://docs-assets.developer.apple.com/published/943e7865c6b061fca4ead9b990b83331/BuildingListsAndNavigation.zip

#### 1.创建模板并载入数据

在第一个教程中，您将信息硬编码到所有自定义视图中。在这里，您将创建一个模型来存储可传递到视图中的数据。

使用上一教程中已完成的项目和本教程的项目文件中可用的资源开始。

![image-20240918161023558](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918161023558.png)

* 将下载文件的 Resources 文件夹拖动到项目的导航窗格中;在出现的对话框中，选择“Copy items if needed”和“Landmark”目标，然后单击 Finish。`landmarkData.json`

  您将在本教程的其余部分以及后续所有内容中使用此示例数据。

  ![image-20240918161104967](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918161104967.png)

* 选择 File > New > File （新建 文件） 在项目中创建新的 Swift 文件，并将其命名为 。`Landmark.swift`

  ![image-20240918161129438](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918161129438.png)

* 定义一个结构，其中包含一些与数据文件中某些键的名称匹配的属性。`Landmark``landmarkData`

  添加一致性可以更轻松地在结构和数据文件之间移动数据。在本节后面，您将依靠协议的组件从文件中读取数据。`Codable``Decodable``Codable`

  ```swift
  import Foundation
  
  
  struct Landmark: Hashable, Codable {
      var id: Int
      var name: String
      var park: String
      var state: String
      var description: String
  }
  ```

  

在接下来的几个步骤中，您将对与每个地标关联的图像进行建模。

* 将 JPG 文件从项目文件的 Resources 文件夹拖动到项目的资源目录中。Xcode 会为每个映像创建一个新的映像集。

  新图像加入了您在上一个教程中添加的 Turtle Rock 图像。

  ![image-20240918161210800](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918161210800.png)

* 添加一个属性以从数据中读取图像的名称，并添加一个计算属性以从资产目录加载图像。`imageName``image`

  您将属性设为 private，因为结构的用户只关心图像本身。`Landmarks`

  ```swift
  import Foundation
  import SwiftUI
  
  
  struct Landmark: Hashable, Codable {
      var id: Int
      var name: String
      var park: String
      var state: String
      var description: String
  
  
      private var imageName: String
      var image: Image {
          Image(imageName)
      }
  }
  ```

  

接下来，您将管理有关地标位置的信息。

* 使用反映 JSON 数据结构中存储的嵌套类型向结构添加属性。`coordinates``Coordinates`

  将此属性标记为 private，因为在下一步中，您只会使用它来创建 public 计算属性。

  ```swift
  import Foundation
  import SwiftUI
  
  
  struct Landmark: Hashable, Codable {
      var id: Int
      var name: String
      var park: String
      var state: String
      var description: String
  
  
      private var imageName: String
      var image: Image {
          Image(imageName)
      }
  
  
      private var coordinates: Coordinates
  
  
      struct Coordinates: Hashable, Codable {
          var latitude: Double
          var longitude: Double
      }
  }
  ```

  

* 计算对与 MapKit 框架交互有用的属性。`locationCoordinate`

  ```swift
  import Foundation
  import SwiftUI
  import CoreLocation
  
  
  struct Landmark: Hashable, Codable {
      var id: Int
      var name: String
      var park: String
      var state: String
      var description: String
  
  
      private var imageName: String
      var image: Image {
          Image(imageName)
      }
  
  
      private var coordinates: Coordinates
      var locationCoordinate: CLLocationCoordinate2D {
          CLLocationCoordinate2D(
              latitude: coordinates.latitude,
              longitude: coordinates.longitude)
      }
  
  
      struct Coordinates: Hashable, Codable {
          var latitude: Double
          var longitude: Double
      }
  }
  ```

  

最后，您将创建一个使用文件中的 landmarks 初始化的数组。

* 在项目中创建新的 Swift 文件并将其命名为 。`ModelData.swift`

  ![image-20240918161832569](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918161832569.png)

* 创建一个方法，用于从应用程序的 main bundle 中获取具有给定名称的 JSON 数据。`load(_:)`

  load 方法依赖于返回类型对协议的一致性，协议是协议的一个组件。`Decodable``Codable`

  ```swift
  import Foundation
  
  
  func load<T: Decodable>(_ filename: String) -> T {
      let data: Data
  
  
      guard let file = Bundle.main.url(forResource: filename, withExtension: nil)
      else {
          fatalError("Couldn't find \(filename) in main bundle.")
      }
  
  
      do {
          data = try Data(contentsOf: file)
      } catch {
          fatalError("Couldn't load \(filename) from main bundle:\n\(error)")
      }
  
  
      do {
          let decoder = JSONDecoder()
          return try decoder.decode(T.self, from: data)
      } catch {
          fatalError("Couldn't parse \(filename) as \(T.self):\n\(error)")
      }
  }
  ```

  

* 创建您从 中初始化的界标数组。`landmarkData.json`

  ```swift
  import Foundation
  
  
  var landmarks: [Landmark] = load("landmarkData.json")
  
  
  func load<T: Decodable>(_ filename: String) -> T {
      let data: Data
  
  
      guard let file = Bundle.main.url(forResource: filename, withExtension: nil)
      else {
          fatalError("Couldn't find \(filename) in main bundle.")
      }
  
  
      do {
          data = try Data(contentsOf: file)
      } catch {
          fatalError("Couldn't load \(filename) from main bundle:\n\(error)")
      }
  
  
      do {
          let decoder = JSONDecoder()
          return try decoder.decode(T.self, from: data)
      } catch {
          fatalError("Couldn't parse \(filename) as \(T.self):\n\(error)")
      }
  }
  ```

* 将 、 和 放入 视图 组、 资源组和 模型 组。`ContentView``CircleImage``MapView``landmarkData``Landmark``ModelData`

  提示

  您可以通过选择要添加到组中的项目，然后在 Xcode 菜单中选择 File > New > Group from Selection 来创建现有项目的组。

  ![image-20240918162548829](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918162548829.png)





#### 2.创建行视图

您将在本教程中构建的第一个视图是一行，用于显示有关每个地标的详细信息。此行视图将信息存储在它所显示的地标的属性中，以便一个视图可以显示任何地标。稍后，您将把多行合并到一个地标列表中。

![image-20240918162949239](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918162949239.png)

* 在 Views 组中创建一个名为 的新 SwiftUI 视图。`LandmarkRow.swift`

  ![image-20240918163018641](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918163018641.png)

* 添加为 的存储属性。`landmark``LandmarkRow`

  添加属性时，画布中的预览将停止工作，因为该类型在初始化期间需要一个 landmark 实例。`landmark``LandmarkRow`

  ```swift
  import SwiftUI
  
  
  struct LandmarkRow: View {
      var landmark: Landmark
  
  
      var body: some View {
          Text("Hello, World!")
      }
  }
  
  
  #Preview {
      LandmarkRow()
  }
  ```

  

要修复预览，您需要修改预览的视图实例化。

* 在预览宏中，将 landmark 参数添加到初始值设定项中，指定数组的第一个元素。`LandmarkRow``landmarks`

  预览显示文本 “Hello， World！”。

  ```swift
  import SwiftUI
  
  
  struct LandmarkRow: View {
      var landmark: Landmark
  
  
      var body: some View {
          Text("Hello, World!")
      }
  }
  
  
  #Preview {
      LandmarkRow(landmark: landmarks[0])
  }
  ```

  

修复此问题后，您可以构建行的布局。

* 将现有文本视图嵌入到 .`HStack`

  ```swift
  import SwiftUI
  
  
  struct LandmarkRow: View {
      var landmark: Landmark
  
  
      var body: some View {
          HStack {
              Text("Hello, World!")
          }
      }
  }
  
  
  #Preview {
      LandmarkRow(landmark: landmarks[0])
  }
  ```

  ![image-20240918163358618](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918163358618.png)

* 修改文本视图以使用属性的 .`landmark``name`

  ```swift
  import SwiftUI
  
  
  struct LandmarkRow: View {
      var landmark: Landmark
  
  
      var body: some View {
          HStack {
              Text(landmark.name)
          }
      }
  }
  
  
  #Preview {
      LandmarkRow(landmark: landmarks[0])
  }
  ```

  ![image-20240918163428910](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918163428910.png)

* 通过在文本视图之前添加图像并在其后添加分隔线来完成该行。

  ```swift
  import SwiftUI
  
  
  struct LandmarkRow: View {
      var landmark: Landmark
  
  
      var body: some View {
          HStack {
              landmark.image
                  .resizable()
                  .frame(width: 50, height: 50)
              Text(landmark.name)
  
  
              Spacer()
          }
      }
  }
  
  
  #Preview {
      LandmarkRow(landmark: landmarks[0])
  }
  ```

  ![image-20240918163447574](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918163447574.png)

#### 3.自定义行预览

Xcode 会自动识别您在视图的源文件中使用 preview 宏声明的任何预览。

画布一次只显示一个预览，但您可以定义多个预览并在画布中进行选择。或者，您可以将视图分组在一起，以创建视图的多个版本的单个预览。

![image-20240918163851614](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918163851614.png)



* 添加使用数组中第二个元素的第二个预览宏。`landmarks`

  通过添加预览，您可以查看视图在不同数据下的行为方式。

  ```swift
  import SwiftUI
  
  
  struct LandmarkRow: View {
      var landmark: Landmark
  
  
      var body: some View {
          HStack {
              landmark.image
                  .resizable()
                  .frame(width: 50, height: 50)
              Text(landmark.name)
  
  
              Spacer()
          }
      }
  }
  
  
  #Preview {
      LandmarkRow(landmark: landmarks[0])
  }
  
  
  #Preview {
      LandmarkRow(landmark: landmarks[1])
  }
  ```

  

* 使用画布中的控件选择第二个预览。

  默认情况下，画布标签使用它们显示的行号进行预览。

  ![image-20240918164407230](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918164407230.png)

预览宏采用一个可选参数，您可以使用该参数来标记预览。`name`

* 为每个预览指定一个名称，以帮助区分它们。

  ```swift
  import SwiftUI
  
  
  struct LandmarkRow: View {
      var landmark: Landmark
  
  
      var body: some View {
          HStack {
              landmark.image
                  .resizable()
                  .frame(width: 50, height: 50)
              Text(landmark.name)
  
  
              Spacer()
          }
      }
  }
  
  
  #Preview("Turtle Rock") {
      LandmarkRow(landmark: landmarks[0])
  }
  
  
  #Preview("Salmon") {
      LandmarkRow(landmark: landmarks[1])
  }
  ```

  

* 使用新标签在两个预览之间导航。再次尝试更改选定的预览。

  ![image-20240918164449336](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918164449336.png)

  

当您想要并排预览视图的不同版本时，可以将它们分组到单个集合视图中。

* 删除第二个预览，而是将行的两个版本包装在 .`Group`

  `Group`是用于对视图内容进行分组的容器。Xcode 在画布中将组的子视图堆叠为一个预览。

  ```swift
  import SwiftUI
  
  
  struct LandmarkRow: View {
      var landmark: Landmark
  
  
      var body: some View {
          HStack {
              landmark.image
                  .resizable()
                  .frame(width: 50, height: 50)
              Text(landmark.name)
  
  
              Spacer()
          }
      }
  }
  
  
  #Preview {
      Group {
          LandmarkRow(landmark: landmarks[0])
          LandmarkRow(landmark: landmarks[1])
      }
  }
  ```

  ![image-20240918164522780](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918164522780.png)

您在预览中编写的代码只会更改 Xcode 在画布中显示的内容。



#### 4.创建地标列表

当您使用 SwiftUI 的类型时，您可以显示特定于平台的视图列表。列表的元素可以是静态的，就像你到目前为止创建的堆栈的子视图一样，也可以是动态生成的。您甚至可以混合使用静态视图和动态生成的视图。`List`

![image-20240918164839727](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918164839727.png)



* 在 Views 组中创建一个名为 的新 SwiftUI 视图。`LandmarkList.swift`

  ![image-20240918164858019](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918164858019.png)

  * 将默认视图替换为 ，并提供具有前两个地标作为列表的子项的实例。`Text``List``LandmarkRow`

    预览显示以适合 iOS 的列表样式呈现的两个地标。

    ```swift
    import SwiftUI
    
    
    struct LandmarkList: View {
        var body: some View {
            List {
                LandmarkRow(landmark: landmarks[0])
                LandmarkRow(landmark: landmarks[1])
            }
        }
    }
    
    
    #Preview {
        LandmarkList()
    }
    ```

    ![image-20240918164928242](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918164928242.png)



#### 5.使列表动态化

您可以直接从集合生成行，而不是单独指定列表的元素。

您可以通过传递数据集合和为集合中的每个元素提供视图的闭包来创建一个显示集合元素的列表。该列表使用提供的闭包将集合中的每个元素转换为子视图。

![image-20240918165137340](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918165137340.png)

* 删除两个静态 landmark 行，改为将模型数据的数组传递给初始值设定项。`landmarks``List`

  列表使用*可识别*数据。您可以通过以下两种方式之一使数据可识别：将唯一标识每个元素的属性的键路径与数据一起传递，或者使数据类型符合协议。`Identifiable`

  ```swift
  import SwiftUI
  
  
  struct LandmarkList: View {
      var body: some View {
          List(landmarks, id: \.id) { landmark in
  
  
          }
      }
  }
  
  
  #Preview {
      LandmarkList()
  }
  ```

  

* 通过从 closure 返回 a 来完成动态生成的列表。`LandmarkRow`

  这将为数组中的每个元素创建一个。`LandmarkRow``landmarks`

  ```swift
  import SwiftUI
  
  
  struct LandmarkList: View {
      var body: some View {
          List(landmarks, id: \.id) { landmark in
              LandmarkRow(landmark: landmark)
          }
      }
  }
  
  
  #Preview {
      LandmarkList()
  }
  ```

  ![image-20240918170920104](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918170920104.png)

接下来，您将通过向类型添加一致性来简化代码。`List``Identifiable``Landmark`

* 切换到协议并声明符合协议。`Landmark.swift``Identifiable`

  数据已经具有 protocol 所需的属性;您只需在读取数据时添加一个属性来解码它。`Landmark``id``Identifiable`

  ```swift
  import Foundation
  import SwiftUI
  import CoreLocation
  
  
  struct Landmark: Hashable, Codable, Identifiable {
      var id: Int
      var name: String
      var park: String
      var state: String
      var description: String
  
  
      private var imageName: String
      var image: Image {
          Image(imageName)
      }
  
  
      private var coordinates: Coordinates
      var locationCoordinate: CLLocationCoordinate2D {
          CLLocationCoordinate2D(
              latitude: coordinates.latitude,
              longitude: coordinates.longitude)
      }
  
  
      struct Coordinates: Hashable, Codable {
          var latitude: Double
          var longitude: Double
      }
  }
  ```

  

* 切换回并删除该参数。`LandmarkList.swift``id`

  从现在开始，您将能够直接使用元素集合。`Landmark`

  ```swift
  import SwiftUI
  
  
  struct LandmarkList: View {
      var body: some View {
          List(landmarks) { landmark in
              LandmarkRow(landmark: landmark)
          }
      }
  }
  
  
  #Preview {
      LandmarkList()
  }
  ```

  ![image-20240918170932368](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918170932368.png)



#### 6.设置列表和详细信息之间的导航

列表可以正确呈现，但您还无法点击单个地标来查看该地标的详细信息页面。

您可以通过将列表嵌入到 列表中，然后将每一行嵌套在 a 中，以设置到目标视图的转换，从而向列表添加导航功能。`NavigationSplitView``NavigationLink`

![image-20240918171015055](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918171015055.png)

使用您在上一教程中创建的内容准备详细信息视图，并更新主内容视图以显示列表视图。

* 创建一个名为 的新 SwiftUI 视图。`LandmarkDetail.swift`

  ```swift
  import SwiftUI
  
  
  struct LandmarkDetail: View {
      var body: some View {
          Text("Hello, World!")
      }
  }
  
  
  #Preview {
      LandmarkDetail()
  }
  ```

  ![image-20240918171314068](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918171314068.png)

  

* 将属性的内容从 复制到 中。`body``ContentView``LandmarkDetail`

  ```swift
  import SwiftUI
  
  
  struct LandmarkDetail: View {
      var body: some View {
          VStack {
              MapView()
                  .frame(height: 300)
  
  
              CircleImage()
                  .offset(y: -130)
                  .padding(.bottom, -130)
  
  
              VStack(alignment: .leading) {
                  Text("Turtle Rock")
                      .font(.title)
  
  
                  HStack {
                      Text("Joshua Tree National Park")
                      Spacer()
                      Text("California")
                  }
                  .font(.subheadline)
                  .foregroundStyle(.secondary)
  
  
                  Divider()
  
  
                  Text("About Turtle Rock")
                      .font(.title2)
                  Text("Descriptive text goes here.")
              }
              .padding()
  
  
              Spacer()
          }
      }
  }
  
  
  #Preview {
      LandmarkDetail()
  }
  ```

  ![image-20240918171446048](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918171446048.png)

* 更改为 display 。`ContentView``LandmarkList`

  ```swift
  import SwiftUI
  
  
  struct ContentView: View {
      var body: some View {
          LandmarkList()
      }
  }
  
  
  #Preview {
      ContentView()
  }
  ```

  ![image-20240918171454893](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918171454893.png)

在接下来的几个步骤中，您将在列表视图和详细信息视图之间添加导航。

* 将动态生成的地标列表嵌入到 .`NavigationSplitView`

  导航拆分视图采用第二个输入，该输入是某人做出选择后显示的视图的占位符。在 iPhone 上，拆分视图不需要占位符，但在 iPad 上，详细信息窗格可以在有人进行选择之前出现，如本教程后面所述。

  ```swift
  import SwiftUI
  
  
  struct LandmarkList: View {
      var body: some View {
          NavigationSplitView {
              List(landmarks) { landmark in
                  LandmarkRow(landmark: landmark)
              }
          } detail: {
              Text("Select a Landmark")
          }
      }
  }
  
  
  #Preview {
      LandmarkList()
  }
  ```

  ![image-20240918171535800](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918171535800.png)

* 添加修饰符以设置显示列表时导航栏的标题。`navigationTitle(_:)`

  ```swift
  import SwiftUI
  
  
  struct LandmarkList: View {
      var body: some View {
          NavigationSplitView {
              List(landmarks) { landmark in
                  LandmarkRow(landmark: landmark)
              }
              .navigationTitle("Landmarks")
          } detail: {
              Text("Select a Landmark")
          }
      }
  }
  
  
  #Preview {
      LandmarkList()
  }
  ```

  ![image-20240918171714909](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918171714909.png)

* 在列表的闭包中，将返回的行包装在 a 中，指定视图作为目标。`NavigationLink``LandmarkDetail`

  ```swift
  import SwiftUI
  
  
  struct LandmarkList: View {
      var body: some View {
          NavigationSplitView {
              List(landmarks) { landmark in
                  NavigationLink {
                      LandmarkDetail()
                  } label: {
                      LandmarkRow(landmark: landmark)
                  }
              }
              .navigationTitle("Landmarks")
          } detail: {
              Text("Select a Landmark")
          }
      }
  }
  
  
  #Preview {
      LandmarkList()
  }
  ```

  ![image-20240918171740440](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918171740440.png)

* 您可以直接在预览中试用导航。点击地标以访问详情页面。

  ![image-20240918171753703](C:\Users\h30069248\Desktop\笔记\SwiftUI入门.assets\image-20240918171753703.png)
