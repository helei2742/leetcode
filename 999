package com.helei.telegramebot.bot.menu.solana.tree.child.transaction;

import com.helei.telegramebot.bot.menu.TGMenuNode;
import com.helei.telegramebot.bot.menu.TGMenuParams;
import com.helei.telegramebot.bot.menu.solana.BaseTGMenuNode;


public class TransactionMenuNode extends BaseTGMenuNode {

    public TransactionMenuNode(TGMenuNode parentMenu) {
        super(parentMenu, "交易", "transaction");
    }

    @Override
    public String getTittleContext(TGMenuParams params) {

        return "交易";
    }

}


package com.helei.telegramebot.bot.menu.solana.tree.child.wallet.child.sendsol.child;

import com.alibaba.fastjson.JSONObject;
import com.helei.telegramebot.bot.menu.TGMenuNode;
import com.helei.telegramebot.bot.menu.TGMenuParams;
import com.helei.telegramebot.bot.menu.solana.tree.child.wallet.AbstractWalletMenuNode;
import com.helei.telegramebot.dto.SendSolParams;
import lombok.extern.slf4j.Slf4j;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ForceReplyKeyboard;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboard;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;


/**
 * 发送sol 设置发送sol个数的菜单按钮
 */
@Slf4j
public class SendSolSettingAmountCountMenuNode extends AbstractWalletMenuNode {

    public SendSolSettingAmountCountMenuNode(TGMenuNode parentMenu) {
        super(parentMenu, "x sol", "amountCount");
    }

    @Override
    public InlineKeyboardButton getDynamicKeyboardButton(TGMenuParams params) {
        String json = params.getParams().getFirst();
        InlineKeyboardButton inlineKeyboardButton = new InlineKeyboardButton(getButtonText());
        inlineKeyboardButton.setCallbackData(getPathName() + " " + json);
        return inlineKeyboardButton;
    }

    @Override
    public ReplyKeyboard buildMenuKeyBoard(TGMenuParams params) {
        ForceReplyKeyboard forceReplyKeyboard = new ForceReplyKeyboard();
        forceReplyKeyboard.setSelective(true);

        return forceReplyKeyboard;
    }

    @Override
    public TGMenuNode menuNodeReplyHandler(TGMenuParams params) {
        //Step 1 参数解析
        String chatId = params.getChatId();

        try {
            SendSolParams sendSolParams = params.getParam(1, SendSolParams.class);
            double enter = Double.parseDouble(params.getReplyText());

            //Step 2 校验
            if (enter > sendSolParams.getWalletSolCount()) {
                throw new IllegalArgumentException(String.format("chatId[%s]输入转账sol数量[%s]大于钱包余额[%s]", chatId, enter, sendSolParams.getWalletSolCount()));
            }


            //Step 3 修改参数
            sendSolParams.setAmountCount(enter);
            params.getParams().set(1, JSONObject.toJSONString(sendSolParams));

        } catch (Exception e) {
            log.error("转账sol数量输入时发生错误", e);
            sendSimpleMessage(chatId, "参数错误, " + e.getMessage());
        }

        return getParentMenu();
    }


    @Override
    public String getTittleContext(TGMenuParams params) {
        SendSolParams sendSolParams = params.getParam(0, SendSolParams.class);
        return "请输入转出的sol个数, 当前默认钱包可用：" + sendSolParams.getWalletSolCount();
    }
}



package com.helei.telegramebot.bot.menu.solana.tree.child.wallet.child.sendsol.child;

import com.alibaba.fastjson.JSONObject;
import com.helei.telegramebot.bot.menu.TGMenuNode;
import com.helei.telegramebot.bot.menu.TGMenuParams;
import com.helei.telegramebot.bot.menu.solana.tree.child.wallet.AbstractWalletMenuNode;
import com.helei.telegramebot.dto.SendSolParams;
import lombok.extern.slf4j.Slf4j;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ForceReplyKeyboard;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboard;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;


@Slf4j
public class SendSolSettingAmountPercentMenuNode extends AbstractWalletMenuNode {

    public SendSolSettingAmountPercentMenuNode(TGMenuNode parentMenu) {
        super(parentMenu, "x%", "amountPercent");
    }

    @Override
    public InlineKeyboardButton getDynamicKeyboardButton(TGMenuParams params) {
        String json = params.getParams().getFirst();
        InlineKeyboardButton inlineKeyboardButton = new InlineKeyboardButton(getButtonText());
        inlineKeyboardButton.setCallbackData(getPathName() + " " + json);
        return inlineKeyboardButton;
    }

    @Override
    public ReplyKeyboard buildMenuKeyBoard(TGMenuParams params) {
        ForceReplyKeyboard forceReplyKeyboard = new ForceReplyKeyboard();
        forceReplyKeyboard.setSelective(true);

        return forceReplyKeyboard;
    }

    @Override
    public TGMenuNode menuNodeReplyHandler(TGMenuParams params) {
        //Step 1 参数解析
        String chatId = params.getChatId();

        try {
            SendSolParams sendSolParams = params.getParam(1, SendSolParams.class);
            double enter = Double.parseDouble(params.getReplyText());

            //Step 2 校验
            if (enter < 0 || enter > 1) {
                throw new IllegalArgumentException(String.format( "chatId[%s]输入转账sol百分比[%s]错误", chatId, enter));
            }

            if (sendSolParams.getWalletSolCount() <= 0) {
                throw new IllegalArgumentException(String.format("chatId[%s]钱包sol余额不足", chatId));
            }


            //Step 3 修改参数
            sendSolParams.setAmountPercent(enter);
            params.getParams().set(1, JSONObject.toJSONString(sendSolParams));

        } catch (Exception e) {
            log.error("转账sol数量输入时发生错误", e);
            sendSimpleMessage(chatId, "参数错误, " + e.getMessage());
        }

        return getParentMenu();
    }

    @Override
    public String getTittleContext(TGMenuParams params) {
        return "输入提现百分比";
    }
}


package com.helei.telegramebot.bot.menu.solana.tree.child.wallet.child.sendsol.child;

import cn.hutool.core.util.StrUtil;
import com.alibaba.fastjson.JSONObject;
import com.helei.dto.base.Result;
import com.helei.telegramebot.bot.menu.TGMenuNode;
import com.helei.telegramebot.bot.menu.TGMenuParams;
import com.helei.telegramebot.bot.menu.solana.tree.child.wallet.AbstractWalletMenuNode;
import com.helei.telegramebot.dto.SendSolParams;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;



public class SendSolSettingStartMenuNode extends AbstractWalletMenuNode {

    public SendSolSettingStartMenuNode(TGMenuNode parentMenu) {
        super(parentMenu, "开始提现", "start_send");
    }


    @Override
    public SendMessage getMenu(TGMenuParams menuParams) {
        SendSolParams sendSolParams = menuParams.getParam(0, SendSolParams.class);

        // 参数校验
        if (StrUtil.isBlank(sendSolParams.getAddress()) || StrUtil.isBlank(sendSolParams.getTargetAddress())) {
            throw new IllegalArgumentException(String.format("转账地址为空, from:%s, to:%s", sendSolParams.getAddress(), sendSolParams.getTargetAddress()));
        }

        if (sendSolParams.getWalletSolCount() <= 0) {
            throw new IllegalArgumentException(String.format("钱包余额不足，[%s]SOL", sendSolParams.getWalletSolCount()));
        }

        if (sendSolParams.getAmountCount() == 0 && sendSolParams.getAmountPercent() == 0) {
            throw new IllegalArgumentException(String.format("转账数量不足, [%s]", 0));
        }

        // sol百分比转为个数
        if (sendSolParams.getAmountCount() == 0) {
            sendSolParams.setAmountCount(sendSolParams.getAmountPercent() * sendSolParams.getWalletSolCount());
        }

        // 发送交易
        Result result = getPersistenceService().getWallet().sendTransfer(sendSolParams.getAddress(), sendSolParams.getTargetAddress(), sendSolParams.getWalletSolCount());


        // 返回结果
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(menuParams.getChatId());

        if (result == null || result.getSuccess()) {
            sendMessage.setText("已成功发送交易\n" + JSONObject.toJSONString(sendSolParams));
        } else {
            sendMessage.setText("发送交易失败, " +  result.getErrorMsg());
        }

        return sendMessage;
    }

    @Override
    public String getTittleContext(TGMenuParams menuParams) {
        return "";
    }
}





package com.helei.telegramebot.bot.menu.solana.tree.child.wallet.child.sendsol.child;

import cn.hutool.core.util.StrUtil;
import com.alibaba.fastjson.JSONObject;
import com.helei.telegramebot.bot.menu.TGMenuNode;
import com.helei.telegramebot.bot.menu.TGMenuParams;
import com.helei.telegramebot.bot.menu.solana.tree.child.wallet.AbstractWalletMenuNode;
import com.helei.telegramebot.dto.SendSolParams;
import lombok.extern.slf4j.Slf4j;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ForceReplyKeyboard;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboard;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.List;


@Slf4j
public class SendSolSettingTargetAddressMenuNode extends AbstractWalletMenuNode {



    public SendSolSettingTargetAddressMenuNode(TGMenuNode parentMenu) {
        super(parentMenu, "提现收款钱包", "target_address");
    }

    @Override
    public InlineKeyboardButton getDynamicKeyboardButton(TGMenuParams params) {
        String json = params.getParams().getFirst();
        InlineKeyboardButton inlineKeyboardButton = new InlineKeyboardButton(getButtonText());
        inlineKeyboardButton.setCallbackData(getPathName() + " " + json);
        return inlineKeyboardButton;
    }

    @Override
    public ReplyKeyboard buildMenuKeyBoard(TGMenuParams params) {
        ForceReplyKeyboard forceReplyKeyboard = new ForceReplyKeyboard();
        forceReplyKeyboard.setSelective(true);

        return forceReplyKeyboard;
    }

    @Override
    public TGMenuNode menuNodeReplyHandler(TGMenuParams params) {
        //Step 1 参数解析
        String chatId = params.getChatId();

        try {
            SendSolParams sendSolParams = params.getParam(1, SendSolParams.class);
            String targetAddress = params.getReplyText();


            //Step 2 校验
            if (StrUtil.isBlank(targetAddress)) {
                throw new IllegalArgumentException("转账目标地址不能为null");
            }

            //Step 3 修改参数
            sendSolParams.setTargetAddress(targetAddress);
            params.getParams().set(1, JSONObject.toJSONString(sendSolParams));

        } catch (Exception e) {
            log.error("转账sol数量输入时发生错误", e);
            sendSimpleMessage(chatId, "参数错误, " + e.getMessage());
        }

        return getParentMenu();
    }


    @Override
    public String getTittleContext(TGMenuParams params) {
        return "请输入收款钱包的地址";
    }
}



package com.helei.telegramebot.bot.menu.solana.tree.child.wallet.child.sendsol;

import com.alibaba.fastjson.JSONObject;
import com.helei.telegramebot.bot.menu.TGMenuNode;
import com.helei.telegramebot.bot.menu.TGMenuParams;
import com.helei.telegramebot.bot.menu.solana.tree.child.wallet.AbstractWalletMenuNode;
import com.helei.telegramebot.dto.SendSolParams;
import com.helei.telegramebot.entity.ChatWallet;


public class SendSolMenuNode extends AbstractWalletMenuNode {

    public SendSolMenuNode(TGMenuNode parentMenu) {
        super(parentMenu, "转出sol", "send_sol");
        setUseWalletAddressKeyBoard(true);

        getSubMenu().add(new SendSolSettingMenuNode(this));
    }


    @Override
    public TGMenuNode menuNodeReplyHandler(TGMenuParams params) {
        //Step 1 解析参数
        String chatId = params.getChatId();

        if (params.getParams().isEmpty()) {
            sendSimpleMessage(chatId, "参数错误");
            return getParentMenu();
        }

        String publicKey = params.getParams().getFirst();

        //Step 2 校验地址是否存在
        ChatWallet query = ChatWallet.builder().chatId(chatId).publicKey(publicKey).build();
        ChatWallet chatWallet = getPersistenceService().getWallet().queryChatIdWallet(query);
        if (chatWallet == null) {
            sendSimpleMessage(chatId, "未绑定地址\n" + publicKey);
            return getParentMenu();
        }

        //Step 3 发送子键盘

        //添加上参数
        SendSolParams sendSolParams = SendSolParams.builder().address(chatWallet.getPublicKey()).walletSolCount(chatWallet.getSolAmount()).build();

        params.addParam(JSONObject.toJSONString(sendSolParams));

        return getSubMenu().getFirst();
    }


    @Override
    public String getTittleContext(TGMenuParams params) {
        return "请选择希望转出sol的钱包";
    }
}



package com.helei.telegramebot.bot.menu.solana.tree.child.wallet.child.sendsol;

import com.helei.telegramebot.bot.menu.TGMenuNode;
import com.helei.telegramebot.bot.menu.TGMenuParams;
import com.helei.telegramebot.bot.menu.solana.tree.child.wallet.AbstractWalletMenuNode;
import com.helei.telegramebot.bot.menu.solana.tree.child.wallet.child.sendsol.child.*;


public class SendSolSettingMenuNode extends AbstractWalletMenuNode {

    public SendSolSettingMenuNode(TGMenuNode parentMenu) {
        super(parentMenu, "设置", "setting");
        getSubMenu().add(new SendSolSettingAmountCountMenuNode(this));
        getSubMenu().add(new SendSolSettingAmountPercentMenuNode(this));
        getSubMenu().add(new SendSolSettingTargetAddressMenuNode(this));
        getSubMenu().add(new SendSolSettingRefreshMenuNode(this));
        getSubMenu().add(new SendSolSettingStartMenuNode(this));
    }


    @Override
    public String getTittleContext(TGMenuParams params) {
        return "请点击下方输入数量、转账地址后，点击发起提现完成sol转账\n" + params;
    }
}


package com.helei.telegramebot.bot.menu.solana.tree.child.wallet.child;

import cn.hutool.core.util.StrUtil;
import com.helei.dto.base.Result;
import com.helei.telegramebot.bot.menu.TGMenuActivateType;
import com.helei.telegramebot.bot.menu.TGMenuNode;
import com.helei.telegramebot.bot.menu.TGMenuParams;
import com.helei.telegramebot.bot.menu.solana.tree.child.wallet.AbstractWalletMenuNode;
import lombok.extern.slf4j.Slf4j;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ForceReplyKeyboard;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboard;


@Slf4j
public class BindWalletMenuNode extends AbstractWalletMenuNode {


    public BindWalletMenuNode(TGMenuNode parentMenu) {
        super(parentMenu, "绑定钱包", "bind_wallet");
        setActivateType(TGMenuActivateType.REPLY);
    }


    @Override
    public String getTittleContext(TGMenuParams params) {
        return "请输入需要绑定的钱包私匙";
    }


    @Override
    public ReplyKeyboard buildMenuKeyBoard(TGMenuParams params) {
        ForceReplyKeyboard forceReplyKeyboard = new ForceReplyKeyboard();
        forceReplyKeyboard.setSelective(true);

        return forceReplyKeyboard;
    }

    @Override
    public TGMenuNode menuNodeReplyHandler(TGMenuParams params) {
        String chatId = params.getChatId();
        Message message = params.getReplyMessage();


        //Step 1 参数校验
        String privateKey = params.getReplyText();
        if (StrUtil.isBlank(privateKey)) {
            log.error("chatId[{}] - [{}]命令参数为空", getButtonText(), chatId);
            return getParentMenu();
        }

        //Step 2 保存
        Result result = getPersistenceService().getWallet().bindWalletByPrivateKey(
                getBot().getBotUsername(),
                chatId,
                privateKey
        );

        //Step 4 返回结果
        if (!result.getSuccess()) {
            sendSimpleMessage(chatId, "保存钱包信息失败, " + result.getErrorMsg());
        } else {
            sendSimpleMessage(chatId, "保存钱包信息成功");
        }


        sendDeleteMessage(chatId, message.getMessageId());

        if (message.getReplyToMessage() != null) {
            sendDeleteMessage(chatId, (message.getReplyToMessage().getMessageId()));
        }

        //Step 5 返回菜单状态，到上一级
        return getParentMenu();
    }

}



package com.helei.telegramebot.bot.menu.solana.tree.child.wallet;

import com.alibaba.fastjson.JSONObject;
import com.helei.telegramebot.bot.AbstractTelegramBot;
import com.helei.telegramebot.bot.menu.TGMenuNode;
import com.helei.telegramebot.bot.menu.TGMenuParams;
import com.helei.telegramebot.bot.menu.solana.BaseTGMenuNode;
import com.helei.telegramebot.entity.ChatWallet;
import com.helei.telegramebot.service.impl.SolanaATBotPersistenceService;
import jakarta.validation.constraints.NotNull;
import lombok.Getter;
import lombok.Setter;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboard;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;


@Setter
@Getter
public abstract class AbstractWalletMenuNode extends BaseTGMenuNode {

    private boolean useWalletAddressKeyBoard = false;


    public AbstractWalletMenuNode(TGMenuNode parentMenu, String buttonText, String callbackData) {
        super(parentMenu, buttonText, callbackData);
    }

    /**
     * 初始化
     *
     * @param bot                           bot
     * @param solanaATBotPersistenceService solanaATBotPersistenceService
     */
    @Override
    public void init(AbstractTelegramBot bot, SolanaATBotPersistenceService solanaATBotPersistenceService) {
        super.init(bot, solanaATBotPersistenceService);
    }


    @Override
    public ReplyKeyboard buildMenuKeyBoard(TGMenuParams params) {
        if (useWalletAddressKeyBoard) return buildWalletSelectDynamicKeyBoard(params);
        return buildSubMenuKeyBoard(params);
    }

    /**
     * 构建选择钱包的动态键盘
     *
     * @param params params
     * @return 键盘
     */
    private @NotNull ReplyKeyboard buildWalletSelectDynamicKeyBoard(TGMenuParams params) {
        String chatId = params.getChatId();

        //Step 1 查默认钱包公匙
        String pubKey = getPersistenceService().getWallet().queryChatIdDefaultWalletAddress(getBot().getBotUsername(), chatId);

        //Step 2 查询所有钱包
        List<ChatWallet> chatWallets = getPersistenceService().getWallet().queryChatIdAllWallet(getBot().getBotUsername(), chatId);

        //Step 3 分出默认钱包
        ChatWallet defaultWallet = dispatchDefaultWallet(chatWallets, pubKey);

        //Step 5 构建动态键盘
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboardRows = new ArrayList<>();

        params.addParam(defaultWallet.getPublicKey());

        InlineKeyboardButton defaultButton = new InlineKeyboardButton("默认钱包 - " + 0);
        defaultButton.setCallbackData(getPathName() + " " + JSONObject.toJSONString(params));
        keyboardRows.add(List.of(defaultButton));

        for (int i = 0; i < chatWallets.size(); i++) {
            ChatWallet chatWallet = chatWallets.get(i);

            InlineKeyboardButton inlineKeyboardButton = new InlineKeyboardButton("钱包 - " + i + 1);

            params.getParams().removeLast();
            params.addParam(chatWallet.getPublicKey());

            inlineKeyboardButton.setCallbackData(getPathName() + " " + JSONObject.toJSONString(params));
            keyboardRows.add(List.of(inlineKeyboardButton));
        }
        markup.setKeyboard(keyboardRows);
        return markup;
    }

    /**
     * 分出默认钱包，会减少chatWallets
     *
     * @param chatWallets 钱包list
     * @param pubKey      默认钱包的公钥
     * @return 默认钱包
     */
    protected ChatWallet dispatchDefaultWallet(List<ChatWallet> chatWallets, String pubKey) {
        ChatWallet defaultWallet = null;
        Optional<ChatWallet> first = chatWallets.stream().filter(c -> !pubKey.equals(c.getPublicKey())).findFirst();
        if (first.isPresent()) {
            defaultWallet = first.get();
            chatWallets.remove(defaultWallet);
        }
        return defaultWallet;
    }
}


package com.helei.telegramebot.bot.menu.solana.tree.child.wallet;

import com.helei.telegramebot.bot.menu.TGMenuNode;
import com.helei.telegramebot.bot.menu.TGMenuParams;
import com.helei.telegramebot.bot.menu.solana.tree.child.wallet.child.*;
import com.helei.telegramebot.bot.menu.solana.tree.child.wallet.child.sendsol.SendSolMenuNode;
import com.helei.telegramebot.entity.ChatWallet;
import com.helei.telegramebot.template.SolanaBotWalletTittleTemplate;
import org.jetbrains.annotations.NotNull;

import java.util.List;

public class WalletMenuNode extends AbstractWalletMenuNode {

    public WalletMenuNode(TGMenuNode parentMenu) {
        super(parentMenu, "我的钱包", "wallet");

        getSubMenu().add(new BindWalletMenuNode(this));
        getSubMenu().add(new CancelBindWalletMenuNode(this));
        getSubMenu().add(new ChangeDefaultWalletMenuNode(this));
        getSubMenu().add(new ExportPrivateKeyMenuNode(this));
        getSubMenu().add(new SendSolMenuNode(this));
        getSubMenu().add(new SetWalletNameMenuNode(this));
    }

    @Override
    public String getTittleContext(TGMenuParams params) {
        String chatId = params.getChatId();

        //Step 1 查默认钱包公匙
        String pubKey = getPersistenceService().getWallet().queryChatIdDefaultWalletAddress(getBot().getBotUsername(), chatId);

        //Step 2 查询所有钱包
        List<ChatWallet> chatWallets = getPersistenceService().getWallet().queryChatIdAllWallet(getBot().getBotUsername(), chatId);

        //Step 3 找到默认钱包
        ChatWallet defaultWallet = dispatchDefaultWallet(chatWallets, pubKey);

        //Step 3 生成title

        return buildAllWalletInfoStr(defaultWallet, chatWallets);
    }


    /**
     * 构建所有钱包信息字符串
     *
     * @param defaultWallet defaultWallet
     * @param chatWallets   chatWallets
     * @return string
     */
    private static @NotNull String buildAllWalletInfoStr(ChatWallet defaultWallet, List<ChatWallet> chatWallets) {
        StringBuilder tittle = new StringBuilder();

        if (defaultWallet != null) {
            tittle.append("默认钱包:\n").append(SolanaBotWalletTittleTemplate.aChatWalletPrintStr(defaultWallet, defaultWallet.getId()));
        }

        tittle.append("其它钱包:\n");
        for (ChatWallet chatWallet : chatWallets) {
            tittle.append(SolanaBotWalletTittleTemplate.aChatWalletPrintStr(chatWallet, chatWallet.getId())).append("\n");
        }

        return tittle.toString();
    }
}

package com.helei.telegramebot.bot.menu.solana.tree;


import com.helei.telegramebot.bot.menu.TGMenuParams;
import com.helei.telegramebot.bot.menu.solana.BaseTGMenuNode;
import com.helei.telegramebot.bot.menu.solana.tree.child.transaction.TransactionMenuNode;
import com.helei.telegramebot.bot.menu.solana.tree.child.wallet.WalletMenuNode;


public class MainMenuNode extends BaseTGMenuNode {

    public MainMenuNode() {
        super(null, "主菜单", "main");
        getSubMenu().add(new WalletMenuNode(this));
        getSubMenu().add(new TransactionMenuNode(this));
    }

    @Override
    public String getTittleContext(TGMenuParams params) {
        return "欢迎来到主菜单";
    }
}




package com.helei.telegramebot.bot.menu.solana;

import cn.hutool.core.lang.Pair;
import com.google.common.collect.Lists;
import com.helei.telegramebot.bot.AbstractTelegramBot;
import com.helei.telegramebot.bot.menu.TGMenuNode;
import com.helei.telegramebot.bot.menu.TGMenuParams;
import com.helei.telegramebot.service.impl.SolanaATBotPersistenceService;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboard;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.List;


/**
 * 基础菜单节点，提供了默认的菜单键盘构造方法
 */
@Getter
@Slf4j
public abstract class BaseTGMenuNode extends TGMenuNode {

    private AbstractTelegramBot bot;

    private SolanaATBotPersistenceService persistenceService;

    private int colNumber = 2;

    public BaseTGMenuNode(
            TGMenuNode parentMenu,
            String buttonText,
            String callbackData
    ) {
        super(parentMenu, buttonText, callbackData);
    }

    public void init(AbstractTelegramBot bot, SolanaATBotPersistenceService persistenceService) {
        init(bot, persistenceService, 2);
    }

    public void init(AbstractTelegramBot bot, SolanaATBotPersistenceService persistenceService, int colNumber) {
        this.bot = bot;
        this.persistenceService = persistenceService;
        this.colNumber = colNumber;
    }


    @Override
    public Pair<String, ReplyKeyboard> getTittleAndMenuKeyBoard(TGMenuParams params) {
        // title, 也就是带键盘的消息。默认为菜单路径 \n context
        String tittle = getFullButtonText() + "\n" + getTittleContext(params);
        return new Pair<>(tittle, buildMenuKeyBoard(params));
    }


    /**
     * 构建菜单键盘
     *
     * @param params 参数
     * @return 键盘
     */
    public ReplyKeyboard buildMenuKeyBoard(TGMenuParams params) {
        return buildSubMenuKeyBoard(params);
    }


    /**
     * 构建菜单键盘，会取菜单节点的subMenu子节点，构建键盘选项。每行的按钮个数通过colNumber参数控制
     *
     * @param params 参数
     * @return 键盘
     */
    protected ReplyKeyboard buildSubMenuKeyBoard(TGMenuParams params) {
        // 默认， 从subMenu构建

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboardRows = new ArrayList<>();

        // 一行两个
        List<List<TGMenuNode>> partitions = Lists.partition(new ArrayList<>(getSubMenu()), colNumber);

        //列表
        for (List<TGMenuNode> partition : partitions) {
            keyboardRows.add(createKeyboardRow(partition,params));
        }

        //返回父菜单选项
        if (getParentMenu() != null) {
            keyboardRows.add(createKeyboardRow(List.of(getParentMenu()), params));
        }

        markup.setKeyboard(keyboardRows);
        return markup;
    }

    /**
     * 获取标题主要内容
     *
     * @param params 参数
     * @return context
     */
    public abstract String getTittleContext(TGMenuParams params);


    /**
     * 删除消息
     *
     * @param chatId    chatId
     * @param messageId messageId
     */
    protected void sendDeleteMessage(String chatId, Integer messageId) {
        DeleteMessage deleteMessage = new DeleteMessage();
        deleteMessage.setChatId(chatId);
        deleteMessage.setMessageId(messageId);
        execute(deleteMessage);
    }

    /**
     * 发送仅仅只有文本的简单消息
     *
     * @param chatId chatId
     * @param text   文本
     */
    protected void sendSimpleMessage(String chatId, String text) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(text);
        execute(sendMessage);
    }

    /**
     * 发送消息到tg
     *
     * @param message message
     */
    protected void execute(BotApiMethod<?> message) {
        try {
            bot.execute(message);
        } catch (TelegramApiException e) {
            log.error("发送消息[{}}出错", message, e);
        }
    }

    /**
     * 创建键盘行
     *
     * @param list   这行的菜单节点
     * @param params 参数
     * @return 一行按钮
     */
    private List<InlineKeyboardButton> createKeyboardRow(List<TGMenuNode> list, TGMenuParams params) {
        return list.stream().map(kv -> kv.getDynamicKeyboardButton(params)).toList();
    }
}


package com.helei.telegramebot.bot.menu.solana;


import com.helei.dto.base.Result;
import com.helei.telegramebot.bot.impl.SolanaAutoTradeTelegramBot;
import com.helei.telegramebot.bot.menu.TGMenuNode;
import com.helei.telegramebot.bot.menu.TGMenuParams;
import com.helei.telegramebot.bot.menu.TelegramBotMenu;
import com.helei.telegramebot.bot.menu.solana.tree.MainMenuNode;
import com.helei.telegramebot.service.ITelegramPersistenceService;
import com.helei.telegramebot.service.impl.SolanaATBotPersistenceService;
import lombok.extern.slf4j.Slf4j;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;

import java.io.Serializable;


/**
 * 机器人菜单
 */
@Slf4j
public class SolanaBotMenu implements Serializable, TelegramBotMenu {

    /**
     * 机器人的username
     */
    private final SolanaAutoTradeTelegramBot bot;

    /**
     * 持久化服务
     */
    private final ITelegramPersistenceService telegramPersistenceService;


    /**
     * 持久化服务
     */
    private final SolanaATBotPersistenceService solanaATBotPersistenceService;

    /**
     * 菜单根节点
     */
    private final TGMenuNode menuRoot;

    public SolanaBotMenu(SolanaAutoTradeTelegramBot bot, ITelegramPersistenceService telegramPersistenceService, SolanaATBotPersistenceService solanaATBotPersistenceService) {
        this.bot = bot;
        this.telegramPersistenceService = telegramPersistenceService;
        this.solanaATBotPersistenceService = solanaATBotPersistenceService;
        this.menuRoot = initMenuGraph();
    }


    @Override
    public SendMessage initChatMenu(String chatId) {
        Result result = telegramPersistenceService.saveChatMenuState(bot.getBotUsername(), chatId, menuRoot);

        if (result.getSuccess()) {
            Integer id = (Integer) result.getData();
            TGMenuNode tgMenuNode = TGMenuNode.nodeIdMap.get(id);

            TGMenuParams tgMenuParams = new TGMenuParams();
            tgMenuParams.setPath(menuRoot.getPathName());

            return tgMenuNode.getMenu(tgMenuParams);
        } else {
            SendMessage sendMessage = new SendMessage();
            sendMessage.setChatId(chatId);
            sendMessage.setText(result.getErrorMsg());
            return sendMessage;
        }
    }

    @Override
    public TGMenuNode getCurrentMenuState(String chatId) {
        Result result = telegramPersistenceService.getChatMenuState(bot.getBotUsername(), chatId);

        if (result.getSuccess()) {
            return TGMenuNode.nodeIdMap.get((Integer) result.getData());
        } else {
            return menuRoot;
        }
    }

    @Override
    public TGMenuNode getPrefer(String chatId) {

        return getCurrentMenuState(chatId).getParentMenu();
    }


    @Override
    @Deprecated
    public SendMessage getCurrentMenu(String chatId) {
        TGMenuNode currentMenu = getCurrentMenuState(chatId);
        TGMenuParams params = new TGMenuParams();
//        params.setPath(getCurrentMenu(c));
        SendMessage menu = currentMenu.getMenu(params);
        return menu;
    }


    @Override
    public BotApiMethod<?> menuCommandHandler(TGMenuParams menuParams) {

        TGMenuNode tgMenuNode = menuParams.getPathMenuNode();

        log.info("收到菜单信息[{}]", menuParams);

        //Step 2 调用handler处理

        // 是某个菜单叶节点的回复
        TGMenuNode newtgMenuNode = tgMenuNode.menuNodeReplyHandler(menuParams);

        // 不一样了, 发送新的菜单过去
        if (newtgMenuNode != tgMenuNode) {
            tgMenuNode = newtgMenuNode;
        }

        //Step 3 保存更改菜单状态
        telegramPersistenceService.saveChatMenuState(bot.getBotUsername(), menuParams.getChatId(), tgMenuNode);

        return tgMenuNode.getMenu(menuParams);
    }


    /**
     * 初始化菜单图
     *
     * @return TGMenuNode
     */
    private TGMenuNode initMenuGraph() {
        // 1,主菜单
        TGMenuNode menuRoot = new MainMenuNode();

        // 2.初始化

        TGMenuNode.nodeIdMap.values().forEach(menuNode -> {
            if (menuNode instanceof BaseTGMenuNode baseTGMenuNode) {
                baseTGMenuNode.init(bot, solanaATBotPersistenceService);
            }
        });

        return menuRoot;
    }
}



package com.helei.telegramebot.bot.menu;

import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;

public interface TelegramBotMenu {


    SendMessage initChatMenu(String chatId);

    TGMenuNode getCurrentMenuState(String chatId);

    /**
     * 获取 id 当前菜单上一级的菜单
     *
     * @return 上一级菜单
     */
    TGMenuNode getPrefer(String chatId);


    /**
     * 获取当前菜单
     *
     * @param chatId chatId
     * @return 菜单
     */
    SendMessage getCurrentMenu(String chatId);


    /**
     * 处理菜单命令
     *
     * @param menuParams menuParams
     * @return SendMessage
     */
    BotApiMethod<?> menuCommandHandler(TGMenuParams menuParams);
}


package com.helei.telegramebot.bot.menu;

/**
 * 菜单节点激活的类型
 */
public enum TGMenuActivateType {
    /**
     * 点击按钮
     */
    CLICK,
    /**
     * 回复
     */
    REPLY
}


package com.helei.telegramebot.bot.menu;

import cn.hutool.core.lang.Pair;
import com.alibaba.fastjson.JSONObject;
import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboard;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;

@Slf4j
@Data
public abstract class TGMenuNode {

    /**
     * 菜单节点编号计数器
     */
    private static final AtomicInteger idGenerator = new AtomicInteger();

    /**
     * 节点编号Map节点
     */
    public static final Map<Integer, TGMenuNode> nodeIdMap = new HashMap<>();

    /**
     * 节点字符串路径map 节点
     */
    public static final Map<String, TGMenuNode> commandMap = new HashMap<>();

    /**
     * 节点编号
     */
    private final int id;

    /**
     * 父节点
     */
    private final TGMenuNode parentMenu;


    /**
     * 节点在父节点菜单中现实的按钮文字
     */
    private final String buttonText;

    /**
     * 节点在父节点菜单中被点击后传回的字符串
     */
    private final String pathName;


    /**
     * 菜单激活类型
     */
    private TGMenuActivateType activateType = TGMenuActivateType.CLICK;

    /**
     * 子节点列表
     */
    private final List<TGMenuNode> subMenu = new ArrayList<>();


    /**
     * 菜单节点构造器
     *
     * @param parentMenu 父节点
     * @param buttonText 本节点在父节点菜单按钮中显示的字符串
     * @param pathName   标识节点的字符串
     */
    public TGMenuNode(TGMenuNode parentMenu, String buttonText, String pathName) {
        this.parentMenu = parentMenu;
        this.buttonText = buttonText;
        this.pathName = pathName;
        this.id = idGenerator.incrementAndGet();

        nodeIdMap.put(id, this);

        commandMap.put(getPathName(), this);
    }

    /**
     * 返回次节点的完整path,从最上层的父节点开始，用.号连接
     *
     * @return path
     */
    public String getPathName() {
        if (parentMenu == null) {
            return "/menu." + pathName;
        }
        return parentMenu.getPathName() + "." + pathName;
    }


    /**
     * 获取菜单
     *
     * @param params params
     * @return 菜单消息
     */
    public SendMessage getMenu(TGMenuParams params) {
        SendMessage message = new SendMessage();

        message.setChatId(params.getChatId());

        Pair<String, ReplyKeyboard> pair = getTittleAndMenuKeyBoard(params);

        message.setText(pair.getKey());

        message.setReplyMarkup(pair.getValue());

        return message;
    }


    /**
     * 获取菜单标题和键盘按钮
     *
     * @param params 参数
     * @return Pair<String, ReplyKeyboard>
     */
    public abstract Pair<String, ReplyKeyboard> getTittleAndMenuKeyBoard(TGMenuParams params);


    /**
     * 获取全部的按钮文字, 包括夫节点，用 - 连接
     *
     * @return string
     */
    public String getFullButtonText() {
        StringBuilder full = new StringBuilder();
        TGMenuNode c = this;

        while ((c = c.getParentMenu()) != null) {
            full.insert(0, c.getButtonText() + "-");
        }

        return full.toString();
    }


    /**
     * 获取动态的菜单按钮。this在父菜单中显示的键盘按钮
     *
     * @param params 参数
     * @return InlineKeyboardButton
     */
    public InlineKeyboardButton getDynamicKeyboardButton(TGMenuParams params) {
        params.setActivateType(activateType);
        params.setPath(getPathName());

        InlineKeyboardButton inlineKeyboardButton = new InlineKeyboardButton(getButtonText());
        inlineKeyboardButton.setCallbackData(getPathName() + JSONObject.toJSONString(params));
        return inlineKeyboardButton;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof TGMenuNode that)) return false;
        return id == that.id;
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(id);
    }

    @Override
    public String toString() {
        return "TGMenuNode{" +
                "callbackData='" + pathName + '\'' +
                ", buttonText='" + buttonText + '\'' +
                ", parentMenu=" + parentMenu +
                ", id=" + id +
                ", subMenu=" + subMenu.stream().map(TGMenuNode::getId).toList() +
                '}';
    }

    /**
     * 处理给菜单回复的消息
     *
     * @param params 参数
     * @return 接下来的菜单状态
     */
    public TGMenuNode menuNodeReplyHandler(TGMenuParams params) {
        log.info("收到菜单命令[{}]", params);

        return this;
    }
}



package com.helei.telegramebot.bot.menu;

import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.annotation.JSONField;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.telegram.telegrambots.meta.api.objects.Message;

import java.util.ArrayList;
import java.util.List;

@Data
@AllArgsConstructor
@NoArgsConstructor
@Builder
public class TGMenuParams {


    /**
     * chatId
     */
    private String chatId;


    /**
     * 菜单路径
     */
    private String path;


    /**
     * 菜单参数
     */
    private final List<String> params = new ArrayList<>();


    /**
     * 激活类型
     */
    private TGMenuActivateType activateType;


    /**
     * 响应的消息
     */
    private String replyText;


    @JSONField(serialize = false)
    private Message replyMessage;


    public <T> T getParam(int idx, Class<T> aClass) {
        return JSONObject.parseObject(params.get(idx), aClass);
    }

    public void addParam(Object param) {
        this.params.add(JSONObject.toJSONString(param));
    }


    public TGMenuNode getPathMenuNode() {
        return TGMenuNode.commandMap.get(path);
    }

}


package com.helei.telegramebot.bot;

import cn.hutool.core.util.BooleanUtil;
import cn.hutool.core.util.StrUtil;
import com.alibaba.fastjson.JSONObject;
import com.helei.dto.base.Result;
import com.helei.telegramebot.bot.menu.TGMenuNode;
import com.helei.telegramebot.bot.menu.TGMenuParams;
import com.helei.telegramebot.config.command.TelegramBotCommand;
import com.helei.telegramebot.config.command.TelegramBotNameSpaceCommand;
import com.helei.telegramebot.dto.TGBotCommandContext;
import com.helei.telegramebot.service.ITelegramPersistenceService;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.groupadministration.GetChat;
import org.telegram.telegrambots.meta.api.methods.groupadministration.GetChatAdministrators;
import org.telegram.telegrambots.meta.api.methods.groupadministration.GetChatMember;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.*;
import org.telegram.telegrambots.meta.api.objects.chatmember.ChatMember;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ExecutorService;


/**
 * TG机器人抽象类
 */
@Slf4j
public abstract class AbstractTelegramBot extends TelegramLongPollingBot implements BaseCommandTelegramBot {


    /**
     * 机器人名
     */
    private final String botUsername;

    /**
     * 机器人连接的token
     */
    private final String token;

    /**
     * 持久化服务
     */
    @Getter
    private final ITelegramPersistenceService telegramPersistenceService;

    /**
     * 执行的线程池
     */
    protected final ExecutorService executor;

    protected AbstractTelegramBot(String botUsername, String token, ITelegramPersistenceService telegramPersistenceService, ExecutorService executor) {
        this.botUsername = botUsername;
        this.token = token;
        this.telegramPersistenceService = telegramPersistenceService;
        this.executor = executor;
    }


    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return token;
    }

    @Override
    public void onUpdateReceived(Update update) {
        executor.execute(() -> {
            Message message = update.getMessage();
            CallbackQuery callbackQuery = update.getCallbackQuery();

            boolean notMenuMessage = menuParamsResolveAndInvokeHandler(message, callbackQuery);

            if (notMenuMessage && message != null) {
                // 1，消息
                messageHandler(message);
            }
        });
    }


    /**
     * 解析菜单参数并执行相关方法
     *
     * @param message       message
     * @param callbackQuery callbackQuery
     * @return boolean
     */
    private boolean menuParamsResolveAndInvokeHandler(Message message, CallbackQuery callbackQuery) {
        // 参数解析
        TGMenuParams params = null;

        String msg = "";
        String reply = null;
        Message replyMessage = null;

        if (message != null && message.getReplyToMessage() != null) {
            msg = message.getReplyToMessage().getText();
            reply = message.getText();
            replyMessage = message;
        } else if (callbackQuery != null) {
            msg = callbackQuery.getData();
            replyMessage = callbackQuery.getMessage();
        } else {
            return true;
        }


        String[] split = msg.split(" ");
        String path = split[0];

        params = JSONObject.parseObject(split[1], TGMenuParams.class);
        params.setReplyText(reply);
        params.setPath(path);
        params.setReplyMessage(replyMessage);

        if (path.startsWith("/menu.")) {
            Result result =  menuCommandHandler(params);

            if (result != null && !result.getSuccess()) {
                log.error("执行菜单命令[{}] 命令失败, {}",
                        params, result.getErrorMsg());
            }
            return false;
        }

        return true;
    }


    /**
     * 处理菜单消息
     *
     * @param message message
     * @return TGMenuNode
     */
    private TGMenuNode getCurrentMenuNode(Message message) {
        Result chatMenuState = telegramPersistenceService.getChatMenuState(botUsername, String.valueOf(message.getChatId()));
        if (chatMenuState != null && chatMenuState.getSuccess()) {
            TGMenuNode menuNode = (TGMenuNode) chatMenuState.getData();
            log.info("chatId[{}]当前菜单为[{}]", message.getChatId(), menuNode);
            return menuNode;
        }
        return null;
    }

    /**
     * 处理消息
     *
     * @param message 消息
     */
    private void messageHandler(Message message) {

        Result result = null;

        String chatId = String.valueOf(message.getChatId());

        try {
            User from = message.getFrom();
            String text = message.getText();

            log.info("bot[{}] 收到消息 chatId[{}]-用户[{}] - 消息[{}]", getBotUsername(), chatId, from.getUserName(), text);

            // 处理命令消息
            if (message.isCommand()) {
                //Step 1 解析命令、参数
                TGBotCommandContext commandContext = resolveCommand(text);

                String nameSpaceStr = commandContext.getNamespace();
                String commandStr = commandContext.getCommand();
                List<String> params = commandContext.getParams();

//                    String botName = commandAndBotName.length > 1 ? commandAndBotName[1] : "";
                //不是本机器人，不管
//                    if (!getBotUsername().equals(botName)) {
//                        return;
//                    }

                // 不是Namespace里的命令, 就是基础bot的命令
                if (StrUtil.isBlank(nameSpaceStr)) {
                    baseCommandHandler(commandStr, message);
                    return;
                }

                // 检查namespace 是否有对应的command
                if (!TelegramBotNameSpaceCommand.isContainCommand(nameSpaceStr, commandStr)) {
                    String format = String.format("不存在[%s]命令[%s]", nameSpaceStr, commandStr);
                    log.error(format);
                    result = Result.fail(format);
                    return;
                }

                TelegramBotNameSpaceCommand.NameSpace nameSpace = TelegramBotNameSpaceCommand.NameSpace.valueOf(nameSpaceStr);


                //Step 2 过滤
                if (commandMessageFilter(nameSpace, commandStr, params, message)) {
                    log.warn("bot[{}] 过滤掉 用户[{}] - 消息[{}]", getBotUsername(), from.getUserName(), text);
                } else {//3 其他命令
                    result = commandMessageHandler(nameSpace, commandStr, params, message);
                }
            } else {
                //处理普通消息
                result = normalMessageHandler(text, message);
            }
        } catch (Exception e) {
            log.error("处理消息[{}]出错", message, e);
        } finally {
            //Step 3 发送结果
            if (result != null) {
                resolveHandlerResult(chatId, result);
            }
        }
    }


    /**
     * 解析命令
     *
     * @param text text
     * @return String[]{nameSpaceStr, commandStr}
     */
    private TGBotCommandContext resolveCommand(String text) {
        String nameSpaceStr = "";
        String commandStr = "";

        String[] split = text.split(" ");

        String[] commandAndBotName = split[0].split("@");
        String[] nameSpaceAndCommand = commandAndBotName[0].replace("/", "").toUpperCase().split("\\.");

        if (nameSpaceAndCommand.length == 2) {
            nameSpaceStr = nameSpaceAndCommand[0].toUpperCase();
            commandStr = nameSpaceAndCommand[1].toUpperCase();
        } else if (nameSpaceAndCommand.length == 1) {
            commandStr = nameSpaceAndCommand[0].toUpperCase();
        }

        List<String> params = new ArrayList<>(Arrays.asList(split));
        params.removeFirst();

        return TGBotCommandContext
                .builder()
                .namespace(nameSpaceStr)
                .command(commandStr)
                .params(params)
                .build();
    }

    /**
     * 处理handler处理后的结果
     *
     * @param result result
     */
    private void resolveHandlerResult(String chatId, Result result) {
        try {
            if (BooleanUtil.isFalse(result.getSuccess())) {
                sendMessageToChat(chatId, result.getErrorMsg());
            } else if (result.getData() != null) {
                sendMessageToChat(chatId, result.getData().toString());
            }
        } catch (Exception e) {
            log.error("向chat[{}]发送结果[{}]时出现异常", chatId, result);
        }
    }


    /**
     * 处理基础命令
     *
     * @param commandStr 命令字符串
     * @param message    消息
     */
    private void baseCommandHandler(String commandStr, Message message) {

        TelegramBotCommand command = null;
        try {
            command = TelegramBotCommand.valueOf(commandStr);
        } catch (Exception e) {
            log.error("不存在基础命令[{}]", commandStr);
            sendMessageToChat(String.valueOf(message.getChatId()), String.format("不存在基础命令[%s]", commandStr));
            return;
        }

        switch (command) {
            case START -> startCommandHandler(message);
        }
    }


    /**
     * 菜单命令
     *
     * @param menuParams menuParams
     */
    public abstract Result menuCommandHandler(TGMenuParams menuParams);

    /**
     * 过滤命令消息
     *
     * @param nameSpace        nameSpace
     * @param nameSpaceCommand nameSpaceCommand
     * @param params           params
     * @param message          message
     */
    public abstract boolean commandMessageFilter(TelegramBotNameSpaceCommand.NameSpace nameSpace, String nameSpaceCommand, List<String> params, Message message);


    /**
     * 命令消息处理
     *
     * @param nameSpace        nameSpace
     * @param nameSpaceCommand 命令
     * @param params           参数
     * @param message          原消息内容
     */
    public abstract Result commandMessageHandler(TelegramBotNameSpaceCommand.NameSpace nameSpace, String nameSpaceCommand, List<?> params, Message message);


    /**
     * 普通消息处理
     *
     * @param messageText 消息文本
     * @param message     原消息内容
     */
    public abstract Result normalMessageHandler(String messageText, Message message);


    /**
     * 给指定chat发消息
     *
     * @param chatId      chatId
     * @param messageText 消息文本
     */
    public void sendMessageToChat(String chatId, String messageText) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(messageText);

        try {
            execute(message);  // 发送消息
        } catch (TelegramApiException e) {
            log.error("给群组 [{}] 发送消息[{}]发生错误", chatId, messageText, e);
        }
    }

    /**
     * 给指定chat发送html消息
     *
     * @param chatId      chatId
     * @param messageText 消息文本
     */
    public void sendHTMLMessageToChat(String chatId, String messageText) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setParseMode("HTML");
        message.setText(messageText);

        try {
            execute(message);  // 发送消息
        } catch (TelegramApiException e) {
            log.error("给群组 [{}] 发送消息[{}]发生错误", chatId, messageText, e);
        }
    }


    /**
     * 获取聊天信息
     *
     * @param chatId chatId
     * @return 详细信息
     */
    public Chat getChat(String chatId) {
        GetChat chat = new GetChat(chatId);
        try {
            return execute(chat);
        } catch (TelegramApiException e) {
            log.error("获取Chat[{}]消息发生错误", chatId);
        }
        return null;
    }


    /**
     * 获取特定成员信息
     *
     * @param chatId 群组id
     * @param userId 消息文本
     */
    public User getChatMemberInfo(String chatId, long userId) {
        GetChatMember getChatMember = new GetChatMember();
        getChatMember.setChatId(chatId);
        getChatMember.setUserId(userId);

        try {
            ChatMember chatMember = execute(getChatMember);
            log.info("获取到群组[{}]成员[{}]的信息, status[{}]", chatId, userId, chatMember.getStatus());
            // 根据需要获取更多信息，例如用户名、权限等
            return chatMember.getUser();
        } catch (TelegramApiException e) {
            throw new RuntimeException(String.format("获取到群组[%s]成员[%s]的信息失败", chatId, userId), e);
        }
    }

    /**
     * 获取群组管理员信息
     *
     * @param chatId 群组id
     */
    public List<ChatMember> getChatAdministratorsInfo(String chatId) {
        GetChatAdministrators getChatAdministrators = new GetChatAdministrators();
        getChatAdministrators.setChatId(chatId);

        try {
            return execute(getChatAdministrators);
        } catch (TelegramApiException e) {
            throw new RuntimeException(String.format("获取到群组[%s]管理员信息出错", chatId), e);
        }
    }

}



package com.helei.telegramebot.bot;

import com.helei.dto.base.Result;
import com.helei.telegramebot.bot.menu.TGMenuParams;
import com.helei.telegramebot.bot.menu.TelegramBotMenu;
import com.helei.telegramebot.config.command.TelegramBotNameSpaceCommand;
import com.helei.telegramebot.service.ITelegramPersistenceService;
import lombok.extern.slf4j.Slf4j;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.User;

import java.util.List;
import java.util.concurrent.ExecutorService;


@Slf4j
public abstract class MenuBaseTelegramBot extends AbstractTelegramBot {

    /**
     * 菜单
     */
    protected TelegramBotMenu telegramBotMenu;


    protected MenuBaseTelegramBot(String botUsername, String token, ITelegramPersistenceService telegramPersistenceService, ExecutorService executor) {
        super(botUsername, token, telegramPersistenceService, executor);
    }


    public void init(TelegramBotMenu telegramBotMenu) {
        this.telegramBotMenu = telegramBotMenu;
    }


    @Override
    public boolean commandMessageFilter(TelegramBotNameSpaceCommand.NameSpace nameSpace, String nameSpaceCommand, List<String> params, Message message) {
        Result result = getTelegramPersistenceService().isSavedChatInBot(getBotUsername(), message.getChatId());

        // 过滤掉没初始化的chat
        if (!result.getSuccess()) {
            sendMessageToChat(String.valueOf(message.getChatId()), result.getErrorMsg());
            return true;
        }

        return false;
    }

    @Override
    public Result menuCommandHandler(TGMenuParams menuParams) {
        BotApiMethod<?> botApiMethod = telegramBotMenu.menuCommandHandler(menuParams);

        try {
            if (botApiMethod != null) {
                execute(botApiMethod);
            }
            return Result.ok();
        } catch (Exception e) {
            return Result.fail(String.format("处理菜单命令[%s]失败, %s",menuParams, e.getMessage()));
        }
    }


    @Override
    public void startCommandHandler(Message message) {
        Long chatId = message.getChatId();

        // chatId持久化，连同用户信息
        User from = message.getFrom();

        Result result = getTelegramPersistenceService().saveChatInBot(getBotUsername(), chatId, from);
        if (!result.getSuccess()) {
            log.error("保存聊天[{}]用户[{}]信息失败", chatId, from.getUserName());
            sendMessageToChat(String.valueOf(chatId), result.getErrorMsg());
        } else {
            sendMessageToChat(String.valueOf(chatId), getBotUsername() + " 注册聊天信息成功");
        }


        try {
            SendMessage sendMessage = telegramBotMenu.initChatMenu(String.valueOf(chatId));
            execute(sendMessage);
        } catch (Exception e) {
            log.error("[{}]创建菜单失败", chatId, e);
            sendMessageToChat(String.valueOf(chatId), "创建菜单失败");
        }
    }
}



package com.helei.telegramebot.dto;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
@Builder
public class SendSolParams {

    private String address;

    private String targetAddress;

    private double walletSolCount;

    private double amountCount;

    private double amountPercent;
}

