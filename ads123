package cn.com.helei.DepinBot.core.dto;


import io.netty.handler.codec.http.DefaultHttpHeaders;
import io.netty.handler.codec.http.HttpHeaders;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;



@Data
@AllArgsConstructor
@NoArgsConstructor
public class DepinClientAccount {

    /**
     * 账户名
     */
    private String name;

    /**
     * 邮箱
     */
    private String email;

    /**
     * 密码
     */
    private String password;

    /**
     * 代理id
     */
    private Integer proxyId;


    /**
     * 浏览器环境id
     */
    private Integer browserEnvId;


    public HttpHeaders getWSHeaders() {
        return new DefaultHttpHeaders();
    }

    public HttpHeaders getRestHeaders() {
        return new DefaultHttpHeaders();
    }

    public String getConnectUrl() {
        return "";
    }
}


package cn.com.helei.DepinBot.core.network;

import lombok.Data;
import lombok.NoArgsConstructor;

import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.SocketAddress;

@NoArgsConstructor
@Data
public class NetworkProxy {

    private Integer id;

    private ProxyType proxyType;

    private String host;

    private int port;

    private String username;

    private String password;

    public NetworkProxy(String proxyUrl) {
        String[] split = proxyUrl.split("://");
        String protocol = split[0];

        proxyType = switch (protocol) {
            case "http" -> ProxyType.HTTP;
            case "sockt5" -> ProxyType.SOCKT5;
            default -> throw new IllegalStateException("Unexpected value: " + protocol);
        };
        String[] upAndAddress = split[1].split("@");

        String[] up = upAndAddress[0].split(":");
        this.username = up[0];
        this.password = up[1];

        String[] address = upAndAddress[1].split(":");
        this.host = address[0];
        this.port = Integer.parseInt(address[1]);

    }

    public SocketAddress getAddress() {
        return new InetSocketAddress(host, port);
    }
}


package cn.com.helei.DepinBot.core.network;

import cn.com.helei.DepinBot.core.util.table.CommandLineTablePrintHelper;
import lombok.Getter;
import lombok.Setter;
import org.yaml.snakeyaml.Yaml;

import java.io.IOException;
import java.io.InputStream;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.atomic.AtomicInteger;

public class NetworkProxyPool {

    private static final Map<String, NetworkProxyPool> LOADED_POOL_MAP = new ConcurrentHashMap<>();

    @Getter
    private String configClassPath;

    @Setter
    @Getter
    private List<NetworkProxy> pool;

    private final ConcurrentMap<Integer, NetworkProxy> idMapProxy = new ConcurrentHashMap<>();

    /**
     * 使用次数
     */
    private final Map<Integer, Integer> useCount = new HashMap<>();


    public static void main(String[] args) {
        System.out.println(loadYamlNetworkPool("network-proxy.yaml"));
    }

    public static NetworkProxyPool loadYamlNetworkPool(String classpath) {
        return LOADED_POOL_MAP.compute(classpath, (k, pool) -> {
            if (pool == null) {
                Yaml yaml = new Yaml();
                try (InputStream inputStream = NetworkProxyPool.class.getClassLoader().getResourceAsStream(classpath)) {
                    Map<String, Object> yamlData = yaml.load(inputStream);
                    Map<String, Object> depin = (Map<String, Object>) yamlData.get("depin");
                    Map<String, Object> network = (Map<String, Object>) depin.get("network");
                    Map<String, Object> proxy = (Map<String, Object>) network.get("proxy");

                    NetworkProxyPool networkProxyPool = yaml.loadAs(yaml.dump(proxy), NetworkProxyPool.class);

                    AtomicInteger id = new AtomicInteger();
                    networkProxyPool.pool.forEach(networkProxy -> {
                        networkProxy.setId(id.get());
                        networkProxyPool.idMapProxy.put(id.getAndIncrement(), networkProxy);
                        networkProxyPool.useCount.put(id.get(), 0);
                    });

                    networkProxyPool.configClassPath = classpath;

                    pool = networkProxyPool;
                } catch (IOException e) {
                    throw new RuntimeException(String.format("价值配置网络代理池文件[%s]发生错误", classpath));
                }
            }
            return pool;
        });
    }


    /**
     * 获取最少使用的代理
     *
     * @param count 数量
     * @return List<NetworkProxy>
     */
    public synchronized List<NetworkProxy> getLessUsedProxy(int count) {
        int batchSize = Math.min(count, useCount.size());

        List<NetworkProxy> res = new ArrayList<>(count);

        int needCount = count;
        while (needCount > 0) {
            int currentSize = Math.min(needCount, batchSize);

            List<NetworkProxy> batch = useCount.entrySet().stream()
                    .sorted((e1, e2) -> e1.getValue().compareTo(e2.getValue()))
                    .limit(currentSize)
                    .map(e -> {
                        useCount.compute(e.getKey(), (k, v) -> v == null ? 0 : v + 1);
                        return idMapProxy.get(e.getKey());
                    }).toList();
            res.addAll(batch);

            needCount -= batch.size();
        }

        return res;
    }

    /**
     * 获取代理
     *
     * @param id id
     * @return NetworkProxy
     */
    public synchronized NetworkProxy getProxy(Integer id) {
        return idMapProxy.compute(id, (k, v) -> {
            if (v == null) return null;

            useCount.compute(id, (k1, v1) -> {
                if (v1 == null) v1 = 0;

                return v1 + 1;
            });

            return v;
        });
    }


    /**
     * 打印池
     *
     * @return String
     */
    public String printPool() {
        return CommandLineTablePrintHelper.generateTableString(pool.stream().toList(), NetworkProxy.class);
    }
}


package cn.com.helei.DepinBot.core.network;

public enum ProxyType {

    HTTP,
    SOCKT5
}


package cn.com.helei.DepinBot.core.network;

import org.yaml.snakeyaml.DumperOptions;
import org.yaml.snakeyaml.Yaml;

import java.io.*;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

public class TxtProxyConvert2YamlConfig {

    public static void main(String[] args) throws RuntimeException {

        String fileName = "/Users/helei/develop/ideaworkspace/depinbot/DepinBot/src/main/resources/proxy.txt";
        String fileName1 = "/Users/helei/develop/ideaworkspace/depinbot/DepinBot/src/main/resources/build-proxy.yaml";

        try (BufferedReader fr = new BufferedReader(new FileReader(fileName))){

            List<NetworkProxy> set = new ArrayList<>();
            String line;
            int id = 1;
            while ((line = fr.readLine()) != null) {
                String[] split = line.split(":");

                NetworkProxy networkProxy = new NetworkProxy();
                networkProxy.setHost(split[0]);
                networkProxy.setPort(Integer.parseInt(split[1]));
                networkProxy.setUsername(split[2]);
                networkProxy.setPassword(split[3]);
                set.add(networkProxy);
            }

            // 配置 YAML 输出选项
            DumperOptions options = new DumperOptions();
            options.setIndent(2);  // 设置缩进级别为 2
            options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK); // 使用块风格

            Yaml yaml = new Yaml(options);

            // 写入 YAML 文件
            try (FileWriter writer = new FileWriter(fileName1)) {
                NetworkProxyPool data = new NetworkProxyPool();
                data.setPool(set);
                yaml.dump(data, writer);  // 将对象写入 YAML 文件
                System.out.println("YAML 文件写入成功！");
            } catch (IOException e) {
                e.printStackTrace();
            }

        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}


package cn.com.helei.DepinBot.core;

import cn.com.helei.DepinBot.core.dto.AccountContext;
import com.alibaba.fastjson.JSONObject;

public class SimpleDepinWSClient extends AbstractDepinWSClient<JSONObject, JSONObject> {

    public SimpleDepinWSClient(AccountContext accountContext) {
        super(accountContext, new SimpleDepinWSClientHandler());
    }




    public static class SimpleDepinWSClientHandler extends AbstractDepinWSClientHandler<JSONObject, JSONObject> {

        @Override
        protected JSONObject heartBeatMessage() {
            return null;
        }

        @Override
        protected void handleOtherMessage(JSONObject message) {

        }

        @Override
        public JSONObject convertMessageToRespType(String message) {
            return null;
        }
    }
}


package cn.com.helei.DepinBot.oasis;

import cn.com.helei.DepinBot.core.network.NetworkProxy;
import cn.com.helei.DepinBot.core.util.RestApiClient;
import com.alibaba.fastjson.JSONObject;
import lombok.extern.slf4j.Slf4j;

import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;

@Slf4j
public class OasisApi {

    private static final Map<NetworkProxy, RestApiClient> proxyRestApiClientMap = new ConcurrentHashMap<>();

    private final ExecutorService executorService;

    public OasisApi(ExecutorService executorService) {
        this.executorService = executorService;
    }


    /**
     * 注册用户
     *
     * @param email      邮箱
     * @param password   密码
     * @param inviteCode 邀请码
     * @return 结果
     */
    public CompletableFuture<Boolean> registerUser(NetworkProxy networkProxy, String email, String password, String inviteCode) {
        JSONObject payload = new JSONObject();

        JSONObject account = new JSONObject();
        account.put("email", email);
        account.put("password", password);
        account.put("referralCode", inviteCode);
        payload.put("0", account);
        return getRestApiClient(networkProxy)
                .request("https://api.oasis.ai/internal/authSignup?batch=1", "post", null, null, payload)
                .thenApplyAsync((res) -> {
                    try {
                        JSONObject result = JSONObject.parseObject(res);
                        return result.getJSONArray("data").getJSONObject(0).getBoolean("result");
                    } catch (Exception e) {
                        log.error("注册邮箱[{}]发生异常！", email);
                        return false;
                    }
                });
    }

    /**
     * 登录用户,返回token
     *
     * @param email    邮箱
     * @param password 密码
     * @return 结果
     */
    public CompletableFuture<String> loginUser(NetworkProxy networkProxy, String email, String password) {
        JSONObject payload = new JSONObject();

        JSONObject account = new JSONObject();
        account.put("email", email);
        account.put("password", password);
        account.put("rememberSession", true);
        payload.put("0", account);

        return getRestApiClient(networkProxy)
                .request("https://api.oasis.ai/internal/authLogin?batch=1", "post", null, null, payload)
                .thenApplyAsync((res) -> {
                    try {
                        JSONObject result = JSONObject.parseObject(res);
                        return result.getJSONArray("data").getJSONObject(0).getString("token");
                    } catch (Exception e) {
                        throw new RuntimeException(String.format("登录邮箱[%s]发生异常！", email));
                    }
                });
    }


    private RestApiClient getRestApiClient(NetworkProxy networkProxy) {
        return proxyRestApiClientMap.compute(networkProxy, (k, v) -> {
            if (v == null) {
                v = new RestApiClient(networkProxy, executorService);
            }
            return v;
        });
    }

}


package cn.com.helei.DepinBot.oasis;

import cn.com.helei.DepinBot.core.BaseDepinBotConfig;
import cn.com.helei.DepinBot.core.dto.DepinClientAccount;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.extern.slf4j.Slf4j;
import org.yaml.snakeyaml.Yaml;

import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.Map;

@EqualsAndHashCode(callSuper = true)
@Slf4j
@Data
public class OasisBotConfig extends BaseDepinBotConfig {

    private String inviteCode;

    private List<DepinClientAccount> accountList;

    public static void main(String[] args) {
        System.out.println(loadYamlConfig("app/oasis.yaml"));
    }

    public static OasisBotConfig loadYamlConfig(String classpath) {
        Yaml yaml = new Yaml();
        log.info("开始加载 OasisBot配置信息-file classpath:[{}}", classpath);
        try (InputStream inputStream = OasisBotConfig.class.getClassLoader().getResourceAsStream(classpath)) {
            Map<String, Object> yamlData = yaml.load(inputStream);
            Map<String, Object> depin = (Map<String, Object>) yamlData.get("depin");
            Map<String, Object> app = (Map<String, Object>) depin.get("app");
            Map<String, Object> oasis = (Map<String, Object>) app.get("oasis");

            //Step 1 基础配置文件
            OasisBotConfig oasisBotConfig = yaml.loadAs(yaml.dump(oasis), OasisBotConfig.class);

            log.info("OasisBot配置信息加载完毕: 共{}个账号", oasisBotConfig.accountList.size());

            return oasisBotConfig;
        } catch (IOException e) {
            throw new RuntimeException(String.format("加载配置文件[%s]发生错误", classpath));
        }
    }

}





package cn.com.helei.DepinBot.oasis;

import cn.com.helei.DepinBot.core.AbstractDepinWSClient;
import cn.com.helei.DepinBot.core.CommandLineDepinBot;
import cn.com.helei.DepinBot.core.commandMenu.CommandMenuNode;
import cn.com.helei.DepinBot.core.dto.AccountContext;
import com.alibaba.fastjson.JSONObject;
import lombok.extern.slf4j.Slf4j;

import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.atomic.AtomicInteger;

@Slf4j
public class OasisDepinBot extends CommandLineDepinBot<JSONObject, JSONObject> {

    private final OasisApi oasisApi;

    public OasisDepinBot(OasisBotConfig oasisBotConfig) {
        super(oasisBotConfig);
        this.oasisApi = new OasisApi(getExecutorService());
    }

    @Override
    protected CommandMenuNode buildMenuNode() {
        CommandMenuNode main = new CommandMenuNode("主菜单", "欢迎使用机器人", null);

        CommandMenuNode commandMenuNode = new CommandMenuNode(true, "账户注册", "开始批量注册账号", this::registerAccount);


        return main.addSubMenu(commandMenuNode);
    }

    @Override
    public AbstractDepinWSClient<JSONObject, JSONObject> buildAccountWSClient(AccountContext accountContext) {
        return null;
    }

    @Override
    public void whenAccountConnected(AccountContext accountContext, Boolean success) {
        
    }


    private String registerAccount() {
        OasisBotConfig oasisBotConfig = (OasisBotConfig) getBaseDepinBotConfig();
        String inviteCode = oasisBotConfig.getInviteCode();

        log.info("开始注册账户");
        AtomicInteger successCount = new AtomicInteger(0);
        List<CompletableFuture<Void>> futureList = getAccountContextManager().getAccounts().stream().map(accountContext -> {
            String email = accountContext.getClientAccount().getEmail();

            log.info("注册[{}]..使用邀请码[{}]..代理[{}]", email, inviteCode, accountContext.getProxy().getId());
            return oasisApi.registerUser(accountContext.getProxy(), email, accountContext.getClientAccount().getPassword(), inviteCode)
                    .thenAcceptAsync(success -> {
                        if (success) {
                            accountContext.setUsable(true);
                            log.info("注册[{}]成功", email);
                            successCount.getAndIncrement();
                        } else {
                            accountContext.setUsable(false);
                            log.error("注册[{}]失败", email);
                        }
                    });
        }).toList();


        try {
            CompletableFuture.allOf(futureList.toArray(new CompletableFuture[0])).get();
        } catch (InterruptedException | ExecutionException e) {
            log.error("等待账户注册完成失败",e);
            return "等待账户注册完成失败";
        }
        return "注册完成,成功注册" + successCount.get() + "个账户" + "共:" + getAccountContextManager().getAccounts().size() + "个账户";
    }
}


depin:
  app:
    oasis:
      accounts:
        - email: 914577981@qq.com
          password: 123123123
        - email: 12321312@qq.com
          password: 123123123


depin:
  network:
    proxy:
      pool:
        - http://12321:12321@172.0.0.1:12135
        - http://123:12321@172.0.0.1:12135
        - http://213:12321@172.0.0.1:12135
        - http://123:12321@172.0.0.1:12135

depin:
  browser:
    envs:
      - id: 1
        headers:
          User-Agent:
          Cache-Control:  no-cache
          Accept-Language: zh-CN,zh;q=0.9,en;q=0.8


