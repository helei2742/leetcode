package cn.com.helei.DepinBot.openLedger;

import cn.com.helei.DepinBot.core.BaseDepinWSClient;
import cn.com.helei.DepinBot.core.bot.CommandLineDepinBot;
import cn.com.helei.DepinBot.core.commandMenu.CommandMenuNode;
import cn.com.helei.DepinBot.core.dto.account.AccountContext;
import cn.com.helei.DepinBot.core.dto.RewordInfo;
import cn.com.helei.DepinBot.core.util.RestApiClient;
import cn.com.helei.DepinBot.core.util.RestApiClientFactory;
import cn.hutool.core.util.BooleanUtil;
import com.alibaba.fastjson.JSONObject;
import lombok.extern.slf4j.Slf4j;

import java.time.LocalDateTime;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.TimeUnit;


/**
 * OpenLedger depin 项目机器人
 */
@Slf4j
public class OpenLedgerDepinBot extends CommandLineDepinBot<String, String> {

    private final OpenLedgerConfig openLedgerConfig;

    public OpenLedgerDepinBot(OpenLedgerConfig openLedgerConfig) {
        super(openLedgerConfig);
        this.openLedgerConfig = openLedgerConfig;
    }

    @Override
    protected void buildMenuNode(CommandMenuNode mainManu) {
        CommandMenuNode menuNodeA = new CommandMenuNode("子菜单A", "这是子菜单A，请选择", null);
        CommandMenuNode menuNodeB = new CommandMenuNode("子菜单B", "这是子菜单B，请选择", null);

        menuNodeA.addSubMenu(new CommandMenuNode("子菜单A-1", "这是子菜单A-1，请选择", () -> "haha进入了A-1"));
        menuNodeA.addSubMenu(new CommandMenuNode("子菜单A-2", "这是子菜单A-2，请选择", () -> "haha进入了A-2"));

        menuNodeB.addSubMenu(new CommandMenuNode("子菜单B-1", "这是子菜单B-1，请选择", null));
        menuNodeB.addSubMenu(new CommandMenuNode("子菜单B-2", "这是子菜单B-2，请选择", null));

        mainManu.addSubMenu(menuNodeA);
        mainManu.addSubMenu(menuNodeB);
    }

    @Override
    public BaseDepinWSClient<String, String> buildAccountWSClient(AccountContext accountContext) {
        return new OpenLedgerDepinWSClient(accountContext);
    }

    @Override
    public void whenAccountConnected(BaseDepinWSClient<String, String> depinWSClient, Boolean success) {
        if (BooleanUtil.isTrue(success)) {
            //Step 1 1 设置定时刷新奖励信息设置
            addTimer(() -> {
                updateRewardInfo(depinWSClient.getAccountContext());
            }, openLedgerConfig.getAccountRewardRefreshIntervalSeconds(), TimeUnit.SECONDS);
        }
    }

    @Override
    public void whenAccountReceiveResponse(BaseDepinWSClient<String, String> depinWSClient, String id, String response) {

    }

    @Override
    public void whenAccountReceiveMessage(BaseDepinWSClient<String, String> depinWSClient, String message) {

    }

    @Override
    public String getHeartbeatMessage(BaseDepinWSClient<String, String> depinWSClient) {
        return "";
    }

    /**
     * 更新奖励信息
     *
     * @param accountContext accountContext
     */
    private void updateRewardInfo(AccountContext accountContext) {
        log.info("开始账户[{}]更新奖励信息", accountContext.getClientAccount().getName());

        RewordInfo rewordInfo = accountContext.getRewordInfo();
        if (rewordInfo == null) {
            return;
        }

        //计算当前获得的奖励
        CompletableFuture<JSONObject> rewardFuture = queryReward(accountContext);
        CompletableFuture<JSONObject> rewardRealtimeFuture = queryRewardRealtime(accountContext);
        CompletableFuture<JSONObject> claimDetailFuture = queryClaimDetail(accountContext);

        rewardFuture.thenAcceptBothAsync(rewardRealtimeFuture, (reward, rewardRealtime) -> {
                    //总分
                    rewordInfo.addTotalPoints(reward.getDouble("totalPoint"));
                    rewordInfo.addSessionPoints(reward.getDouble("point"));
                    rewordInfo.setSessionId(reward.getString("name"));


                    //今日链接奖励
                    if (rewardRealtime != null) {
                        Double todayHeartBeats = rewardRealtime.getDouble("total_heartbeats");

                        rewordInfo.addTodayPoints(todayHeartBeats);
                        rewordInfo.addTotalPoints(todayHeartBeats);
                        rewordInfo.addSessionPoints(todayHeartBeats);
                    }

                    //今日签到奖励
                    try {
                        JSONObject claimDetail = claimDetailFuture.get();
                        if (claimDetail != null && claimDetail.getBoolean("claimed")) {
                            Double dailyPoint = claimDetail.getDouble("dailyPoint");

                            rewordInfo.addTodayPoints(dailyPoint);
                            rewordInfo.addTotalPoints(dailyPoint);
                            rewordInfo.addSessionPoints(dailyPoint);
                        }
                    } catch (Exception e) {
                        log.error("计算奖励查询每日签到信息发生异常, [{}}", accountContext, e);
                    }

                    rewordInfo.setUpdateTime(LocalDateTime.now());
                    log.info("账户[{}]更新奖励信息更新完毕[{}}", accountContext.getClientAccount().getName(), rewordInfo);
                }, getExecutorService())
                .exceptionally(throwable -> {
                    log.error("计算奖励查询每日签到信息发生异常, [{}}", accountContext, throwable);
                    return null;
                });
    }


    /**
     * 查询每日签到信息
     *
     * @param accountContext accountContext
     * @return {
     * "status": "SUCCESS",
     * "message": null,
     * "data": {
     * "tier": "Shrimp",
     * "image": "<a href="https://cdn.openledger.xyz/Tier-2-active.png">...</a>",
     * "claimed": true,
     * "dailyPoint": 50,
     * "nextClaim": "2025-01-19T00:00:00.000Z"
     * }
     * }
     */
    private CompletableFuture<JSONObject> queryClaimDetail(AccountContext accountContext) {
        RestApiClient restApiClient = RestApiClientFactory.getClient(accountContext.getProxy());
        String url = "https://rewardstn.openledger.xyz/api/v1/claim_details";

        return requestAndTakeData(accountContext, restApiClient, url);
    }

    /**
     * 查查reword
     *
     * @param accountContext accountContext
     * @return {
     * "status": "SUCCESS",
     * "message": null,
     * "data": {
     * "totalPoint": "2989.00",
     * "point": "2989.00",
     * "name": "Epoch 1",
     * "endDate": "2025-01-31"
     * }
     * }
     */
    private CompletableFuture<JSONObject> queryReward(AccountContext accountContext) {
        RestApiClient restApiClient = RestApiClientFactory.getClient(accountContext.getProxy());
        String url = "https://rewardstn.openledger.xyz/api/v1/reward";

        return requestAndTakeData(accountContext, restApiClient, url);
    }

    /**
     * 查查reword history
     *
     * @param accountContext accountContext
     * @return {
     * "status": "SUCCESS",
     * "message": null,
     * "data": [
     * {
     * "date": "2025-01-18",
     * "total_points": 50,
     * "details": [
     * {
     * "claim_type": 2,
     * "points": 50
     * }
     * ]
     * }
     * ]
     * }
     */
    private CompletableFuture<JSONObject> queryRewordHistory(AccountContext accountContext) {
        RestApiClient restApiClient = RestApiClientFactory.getClient(accountContext.getProxy());
        String url = "https://rewardstn.openledger.xyz/api/v1/reward_history";

        return requestAndTakeData(accountContext, restApiClient, url);
    }


    /**
     * 查查reword realtime
     *
     * @param accountContext accountContext
     * @return {
     * "status": "SUCCESS",
     * "message": null,
     * "data": [
     * {
     * "date": "2025-01-18",
     * "total_heartbeats": "134",
     * "total_scraps": "0",
     * "total_prompts": "0"
     * }
     * ]
     * }
     */
    private CompletableFuture<JSONObject> queryRewardRealtime(AccountContext accountContext) {
        RestApiClient restApiClient = RestApiClientFactory.getClient(accountContext.getProxy());
        String url = "https://rewardstn.openledger.xyz/api/v1/reward_realtime";

        return requestAndTakeData(accountContext, restApiClient, url);
    }

    private CompletableFuture<JSONObject> requestAndTakeData(AccountContext accountContext, RestApiClient restApiClient, String url) {
        return restApiClient
                .request(
                        url,
                        "get",
                        accountContext.getRestHeaders(),
                        null,
                        null
                )
                .thenApplyAsync(s -> {
                    JSONObject resp = JSONObject.parseObject(s);
                    if (resp.getString("status").equalsIgnoreCase("success")) {
                        //一次heartbeats一分
                        return resp.getJSONArray("data").getJSONObject(0);
                    }
                    return null;
                }, getExecutorService());
    }
}
package cn.com.helei.DepinBot.openloop;

import cn.com.helei.DepinBot.core.pool.network.NetworkProxy;
import com.alibaba.fastjson.JSONObject;
import lombok.extern.slf4j.Slf4j;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Random;
import java.util.concurrent.CompletableFuture;

@Slf4j
public class OpenLoopApi {

    private static final Random random = new Random();

    private final OpenLoopDepinBot openLoopDepinBot;

    public OpenLoopApi(OpenLoopDepinBot openLoopDepinBot) {
        this.openLoopDepinBot = openLoopDepinBot;
    }


    /**
     * 注册用户
     *
     * @param email      邮箱
     * @param password   密码
     * @param inviteCode 邀请码
     * @return 结果
     */
    public CompletableFuture<Boolean> registerUser(NetworkProxy networkProxy, String email, String name,
                                                   String password, String inviteCode) {
        JSONObject account = new JSONObject();
        account.put("email", email);
        account.put("username", name);
        account.put("password", password);
        account.put("inviteCode", inviteCode);

        Map<String, String> headers = new HashMap<>();
        headers.put("Content-Type", "application/json; charset=utf-8");

        return openLoopDepinBot
                .syncRequest(networkProxy,"https://api.openloop.so/users/register",
                        "post", headers, null, account, ()-> String.format("开始注册[%s]-email[%s]", name, email)
                )
                .thenApplyAsync((res) -> {
                    if (Objects.equals(res, "")) {
                        log.info("注册邮箱[{}]成功！请前往验证", email);
                        return true;
                    } else {
                        log.error("注册[{}]失败, {}", email, res);
                        return false;
                    }
                });
    }


    /**
     * 登录用户,返回token
     *
     * @param email    邮箱
     * @param password 密码
     * @return 结果
     */
    public CompletableFuture<String> loginUser(NetworkProxy networkProxy, String email, String password) {

        JSONObject account = new JSONObject();
        account.put("email", email);
        account.put("password", password);

        Map<String, String> headers = new HashMap<>();
        headers.put("Content-Type", "application/json");

        return openLoopDepinBot
                .syncRequest(
                        networkProxy,
                        "https://api.openloop.so/users/login",
                        "post",
                        headers,
                        null,
                        account,
                        ()-> String.format("账户[%s]开始获取token", email)
                )
                .thenApplyAsync((res) -> {
                    JSONObject result = JSONObject.parseObject(res);
                    return result.getString("accessToken");
                });
    }

    /**
     * 分享带宽
     *
     * @param proxy proxy
     * @param token token
     * @return JSONObject
     */
    public CompletableFuture<JSONObject> shareBandwidth(NetworkProxy proxy, String name, String token) {
        JSONObject body = new JSONObject();
        body.put("quality", getRandomQuality());

        Map<String, String> headers = new HashMap<>();
        headers.put("Content-Type", "application/json; charset=utf-8");
        headers.put("Authorization", "Bearer " + token);

        return openLoopDepinBot
                .syncRequest(
                        proxy,
                        "https://api.openloop.so/bandwidth/share",
                        "post",
                        headers,
                        null,
                        body,
                        () -> String.format("账户[%s]开始分享带宽", name)
                )
                .thenApplyAsync((res) -> {
                    try {
                        JSONObject response = JSONObject.parseObject(res);
                        return response.getJSONObject("data").getJSONObject("balances");
                    } catch (Exception e) {
                        throw new RuntimeException("分享带宽失败, response body:" + res);
                    }
                });
    }


    /**
     * 获取随机的网络质量
     *
     * @return 60-99
     */
    private int getRandomQuality() {
        return random.nextInt(40) + 60;
    }
}
package cn.com.helei.DepinBot.openloop;

import cn.com.helei.DepinBot.core.BaseDepinBotConfig;
import cn.com.helei.DepinBot.core.util.YamlConfigLoadUtil;
import cn.com.helei.DepinBot.oasis.OasisBotConfig;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.extern.slf4j.Slf4j;

import java.util.List;

@EqualsAndHashCode(callSuper = true)
@Slf4j
@Data
public class OpenLoopConfig  extends BaseDepinBotConfig {

    private String inviteCode;

    public static void main(String[] args) {
        System.out.println(loadYamlConfig("app/openloop.yaml"));
    }

    public static OpenLoopConfig loadYamlConfig(String classpath) {
        return YamlConfigLoadUtil.load(classpath, List.of("depin", "app", "openloop"), OpenLoopConfig.class);
    }
}
package cn.com.helei.DepinBot.openloop;

import cn.com.helei.DepinBot.core.bot.DefaultMenuCMDLineDepinBot;
import cn.com.helei.DepinBot.core.dto.account.AccountContext;
import cn.com.helei.DepinBot.core.dto.account.ConnectStatusInfo;
import com.alibaba.fastjson.JSONObject;
import lombok.extern.slf4j.Slf4j;

import java.time.LocalDateTime;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;


@Slf4j
public class OpenLoopDepinBot extends DefaultMenuCMDLineDepinBot<OpenLoopConfig> {

    private final OpenLoopApi openLoopApi;

    public OpenLoopDepinBot(String configClassPath) {
        super(OpenLoopConfig.loadYamlConfig(configClassPath));

        openLoopApi = new OpenLoopApi(this);
    }


    @Override
    protected CompletableFuture<Boolean> registerAccount(AccountContext accountContext, String inviteCode) {
        return openLoopApi.registerUser(
                accountContext.getProxy(),
                accountContext.getClientAccount().getEmail(),
                accountContext.getName(),
                accountContext.getClientAccount().getPassword(),
                inviteCode
        );
    }

    @Override
    protected CompletableFuture<String> requestTokenOfAccount(AccountContext accountContext) {
        return openLoopApi.loginUser(
                accountContext.getProxy(),
                accountContext.getClientAccount().getEmail(),
                accountContext.getClientAccount().getPassword()
        );
    }


    @Override
    public CompletableFuture<Void> connectAllAccount() {
        return CompletableFuture.runAsync(()-> {
            //Step 1 设置启动时间
            getAccounts().forEach(accountContext ->
                    accountContext.getConnectStatusInfo().setStartDateTime(LocalDateTime.now()));

            //Step 2 设置定时任务
            addTimer(() -> {
                List<AccountContext> accounts = getAccounts();

                List<CompletableFuture<JSONObject>> futures = accounts
                        .stream()
                        .map(account -> {
                            // 发起网络请求，心跳数++
                            account.getConnectStatusInfo().setUpdateDateTime(LocalDateTime.now());
                            account.getConnectStatusInfo().getHeartBeatCount().incrementAndGet();

                            return openLoopApi.shareBandwidth(account.getProxy(), account.getName(), account.getParam("token"));
                        })
                        .toList();

                // 获取异步结果，处理心跳数和收益数据
                for (int i = 0; i < futures.size(); i++) {
                    CompletableFuture<JSONObject> future = futures.get(i);
                    AccountContext accountContext = accounts.get(i);

                    ConnectStatusInfo connectStatusInfo = accountContext.getConnectStatusInfo();
                    try {
                        JSONObject balances = future.get();
                        Double totalPoint = balances.getDouble("POINT");

                        accountContext.getRewordInfo().setSessionPoints(totalPoint);
                        accountContext.getRewordInfo().setUpdateTime(LocalDateTime.now());
                    } catch (ExecutionException | InterruptedException e) {
                        connectStatusInfo.getErrorHeartBeatCount().getAndIncrement();
                        connectStatusInfo.setUpdateDateTime(LocalDateTime.now());

                        log.error("账号[{}]分享带宽发生异常, {}", accountContext.getName(), e.getMessage());
                    }
                }
            }, 60, TimeUnit.SECONDS);
        }, getExecutorService());
    }
}
package cn.com.helei.DepinBot.openloop;

import cn.com.helei.DepinBot.core.exception.DepinBotStartException;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class OpenLoopDepinBotTest {

    static OpenLoopDepinBot openLoopDepinBot;


    @BeforeAll
    static void beforeAll() {
        openLoopDepinBot = new OpenLoopDepinBot("app/openloop.yaml");
        openLoopDepinBot.init();
    }

    @Test
    public void test() throws DepinBotStartException {
        openLoopDepinBot.start();
    }

}
