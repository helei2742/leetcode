package com.helei.tradedatacenter.indicator.calculater;

import com.helei.tradedatacenter.entity.KLine;
import com.helei.tradedatacenter.indicator.PST;
import org.apache.flink.api.common.state.ListState;
import org.apache.flink.api.common.state.ListStateDescriptor;
import org.apache.flink.configuration.Configuration;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

public class PSTCalculator extends BaseIndicatorCalculator<PST> {

    private final int windowLength;

    private ListState<KLine> windowDataState;

    protected PSTCalculator(
            String name,
            int windowLength,
            int pCount,
            int sCount
    ) {
        super(name);
        this.windowLength = windowLength;
    }

    @Override
    public void open(Configuration parameters) throws Exception {
        this.windowDataState =  getRuntimeContext().getListState(new ListStateDescriptor<>("windowDataState", KLine.class));
    }

    @Override
    public PST calculateInKLine(KLine kLine) throws Exception {
        LinkedList<Double> priceList = new LinkedList<>();
        Iterator<KLine> iterator = windowDataState.get().iterator();

        if (!iterator.hasNext()) {
            return null;
        }
        KLine pre = iterator.next();
        if (!iterator.hasNext()) {
            return null;
        }
        KLine cur = iterator.next();

        /**
         * 相对高点
         */
        List<KLine> high = new ArrayList<>();

        /**
         * 相对低点
         */
        List<KLine> low = new ArrayList<>();

        /**
         * 压力
         */
        List<Double> pList = new ArrayList<>();

        /**
         * 支撑
         */
        List<Double> sList = new ArrayList<>();

        //取趋势线
        while (iterator.hasNext()) {
            KLine next = iterator.next();
            //相对低点
            if (cur.getClose() < next.getClose() && pre.getClose() > cur.getClose()) {
                low.add(cur);
                //添加压力线，为前一个的相对高点
                pList.add(cur.getClose());
            }

            //相对高点
            if (cur.getClose() > next.getClose() && pre.getClose() < cur.getClose()) {
                high.add(cur);
            }
        }



        return null;
    }
}
